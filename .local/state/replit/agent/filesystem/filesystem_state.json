{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Meta Build - Personal Productivity and Self-Improvement Web App\n\n## Overview\n\nMeta Build is a comprehensive full-stack personal productivity and self-improvement web application designed to help users track and manage various aspects of their daily life. The application includes six core modules: Dashboard (overview), Daily Tasks, Workout tracking, Mind Workouts, Daily Routines, and Development Tracker for goals. Built with modern web technologies, it features a clean, responsive interface with real-time data visualization through charts and progress tracking.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nIntegration preference: Add new features to existing pages rather than creating separate pages.\n\n## Recent Changes\n\n### August 4, 2025 - Complete Render Deployment Solution\n- **Fixed Critical API 404 Error on Render**: Resolved production deployment issue where API routes returned 404\n  - Root Cause: In-memory storage was being reset on every server restart in Render's environment\n  - Solution: Added automatic sample data initialization in production environment\n  - Added comprehensive Render deployment configuration (render.yaml, Dockerfile, deployment guide)\n  - Result: All pages (Dashboard, Tasks, Fitness, Mindset, Routine, Goals) now work correctly on Render\n\n### August 4, 2025 - Critical Production Deployment Fix\n- **Fixed API Routes 404 Error on Render**: Modified production static file serving to preserve API routes\n  - Issue: Static file serving was catching ALL routes including `/api/*` and serving index.html instead\n  - Solution: Updated server/index.ts to only serve SPA fallback for non-API routes\n  - Result: API endpoints now work correctly in production deployment on Render\n- **Implemented User's Exact 7-Day Workout Plan**: Replaced generic exercises with complete fitness routine\n  - Day 1 Push: Normal Push-Ups (4×25), Incline Push-Ups (3×25), Pike Push-Ups (3×15), Diamond Push-Ups (2×15), Bench Dips (3×25), Russian Twists (3×30), Plank (5min)\n  - Day 2 Pull: Pull-Ups/Assisted (4×12), Towel Rows (3×20), Towel Bicep Curls (3×20), Reverse Curls (3×15), Gripper Fast (3×40), Farmer Hold (2×45sec), Wrist Rolls (2×20)\n  - Day 3 Legs: Squats (4×25), Jump Squats (3×20), Lunges (3×20 steps), Calf Raises (4×30), Wall Sit (2×45sec), Broad Jumps (2×15), High Knees (2×30)\n  - Day 4 Core: Crunches (3×25), Leg Raises (3×25), Mountain Climbers (3×30), Plank (3×1min), Side Plank (2×1min each), V-Ups (3×20), Russian Twists (3×30)\n  - Day 5 Power: Clap Pushups (3×15), Skipping (5min), High Knees (3×30), Towel Bicep Curls (2×25), Wrist Rolls (2×20), Gripper Slow Squeeze (2×15), Hanging (3×1min)\n  - Day 6 Stretch: Archer Pushups (2×12), Incline Pushups Light (2×20), Squats Light (2×25), Plank Stretch (2×1min), Neck+Spine+Toe Touch Stretch (3×30sec), Hanging Stretch (2×1min)\n  - Day 7 Rest: Hanging Rest (1×1min), Cobra Stretch (2×30sec), Light Walk (10min) - all optional\n- **Eliminated Routine Duplicates**: Completely disabled client-side routine initialization to prevent duplicates\n\n### August 3, 2025 - Major Performance & Goal Tracking Fixes\n- **Fixed Workout Pie Charts**: Now correctly count only exercises scheduled for today instead of all exercises\n  - Daily exercises pie chart shows today's daily exercises completion\n  - Weekly exercises pie chart shows only today's weekly exercises (filtered by current day)\n- **Fixed Dashboard Performance Metrics**: All 5 performance bars now display correctly\n  - Tasks: Shows today's task completion rate\n  - Workout: Combines daily + today's weekly exercises for accurate workout performance\n  - Mind: Shows today's mind activities completion\n  - Routine: Shows today's routine items completion  \n  - Dev: Shows current week's development goals completion\n- **Enhanced Development Goals System**: Updated with comprehensive 2025-2030 roadmap\n  - Yearly goals: 2025 (₹60K/month), 2026 (₹1L-₹2L/month), 2027 (₹1Cr club)\n  - Monthly goals: April (Foundation), May (Full-Stack), June (Real Projects), July (Freelancing)\n  - Weekly goals: 12 detailed weekly plans with specific learning objectives and project deliverables\n  - Current week filtering: Dashboard and dev tracker show only current week's goals\n- **Mind Activities Persistence**: Improved data persistence when navigating between pages\n\n### August 3, 2025 - Complete Workout System Enhancement\n- **Comprehensive 7-Day Full Body Routine**: Added complete workout plan with 44 exercises organized by day:\n  - Day 1 (Monday): Push - Chest, Shoulders, Triceps, Abs\n  - Day 2 (Tuesday): Pull - Back, Biceps, Forearms, Grip  \n  - Day 3 (Wednesday): Legs - Quads, Glutes, Calves\n  - Day 4 (Thursday): Core - Six-Pack, Obliques, Stability\n  - Day 5 (Friday): Power - Explosive + Grip Veins\n  - Day 6 (Saturday): Stretch - Light Sculpting + Relaxing\n  - Day 7 (Sunday): Rest - Optional light activities\n\n- **30-Day Arms & Grip Specialized Routine**: Added comprehensive forearm and grip strength program:\n  - Monday: High-Volume Gripper (endurance + blood flow)\n  - Tuesday: Strength + Static Hold (crushing power + tendon strength)\n  - Wednesday: Recovery + Light Pump (recovery with light flow)\n  - Thursday: Mixed Monster Circuit (strength + pump combination)\n  - Friday: Reverse Focus (balance & injury prevention)\n  - Saturday: Max Test & Burnout (testing limits)\n  - Sunday: Rest/Recovery (stretching and recovery)\n\n- **Improved Workout Organization**: \n  - Separated workout types (Full Body vs Arms & Grip) in both daily and weekly tabs\n  - Daily tab shows workout types in separate organized boxes\n  - Weekly tab uses clickable workout type selection before showing day schedules\n  - Each workout type shows completion statistics\n\n- **Removed Missed Workouts Feature**: Simplified workout interface by removing missed workout tracking and display (August 3, 2025)\n\n- **Enhanced Current Day Highlighting**: Added visual indicators for current day across all day-based interfaces (August 3, 2025):\n  - Workout page weekly day tabs: Ring border and blue dot indicator for today\n  - Routine modal day checkboxes: Special background and \"Today\" badge for current day\n  - Workout modal day dropdown: Highlighted current day option with blue styling\n  - Calendar component: Already had excellent current day highlighting with gradient and ring\n\n- **Comprehensive Development Goals System**: Created structured roadmap for ₹60K/month Full-Stack Developer goal (August 3, 2025):\n  - 1 Yearly Goal: Become ₹60K/month Full-Stack Developer by 2025\n  - 3 Monthly Goals: April (Foundation), May (Full-Stack), June (Real Projects)  \n  - 12 Weekly Goals: JavaScript → React → Node.js → Portfolio → Auth → Projects → Freelancing\n  - Goals automatically initialized based on 2025-2030 career roadmap\n  - Each goal includes specific deliverables and skill milestones\n\n- **Professional Interface**: Clean, Microsoft/Google-style design with minimal animations and better visual hierarchy\n\n### August 3, 2025 - Skincare Routine Integration\n- Integrated comprehensive skincare, haircare & hygiene routine into existing Daily Routine page\n- Added 15 pre-defined skincare routine items covering:\n  - Morning routine: Detox drink, ice treatment, face wash, face pack, moisturizer + sunscreen\n  - Evening routine: Cleansing, serum, night moisturizer, dark spot treatment\n  - Weekly routines: Lip scrub, body exfoliation, ubtan mask, lemon treatment, hair care\n- Added skincare tips section with diet recommendations and foods to avoid\n- Removed separate skincare page and integrated everything into daily routine structure\n- All skincare items use existing routine system with proper categorization (morning/night/weekly)\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development patterns\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives for accessible, customizable components\n- **Styling**: Tailwind CSS with CSS variables for theming, supporting both light and dark modes\n- **Charts**: Chart.js integration for data visualization (pie charts, bar charts)\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript throughout the entire stack for consistency\n- **API Design**: RESTful API structure with dedicated routes for each feature module\n- **Development**: Hot module replacement via Vite in development mode\n- **Build Process**: ESBuild for production bundling with platform-specific optimizations\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Database Provider**: Neon Database (@neondatabase/serverless) for serverless PostgreSQL\n- **Schema Management**: Shared schema definitions using Zod for validation across client and server\n- **Migrations**: Drizzle Kit for database schema migrations and management\n- **Local Storage**: Client-side localStorage utilities for user preferences and temporary data\n\n### Authentication and Authorization\n- **Session Management**: Connect-pg-simple for PostgreSQL-backed session storage\n- **Security**: Built-in middleware for request logging and error handling\n- **Client State**: Theme preferences and user settings stored locally\n\n### External Dependencies\n- **Database**: Neon PostgreSQL (serverless)\n- **UI Framework**: Radix UI primitives for accessible components\n- **Charts**: Chart.js for data visualization\n- **Development Tools**: Vite for development server and build tooling\n- **Validation**: Zod for runtime type checking and schema validation\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Icons**: Lucide React for consistent iconography\n- **Styling**: Tailwind CSS with class-variance-authority for component variants\n\nThe application follows a modular architecture with clear separation between frontend and backend concerns. The shared schema ensures type safety across the entire stack, while the component-based frontend architecture promotes reusability and maintainability. The use of modern tools like Drizzle ORM and TanStack Query provides excellent developer experience with type inference and automatic cache invalidation.","size_bytes":10491},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\" || app.get(\"env\") === \"production\") {\n    await setupVite(app, server);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  \n  // Always initialize sample data to ensure it's available\n  const { initializeSampleData } = await import(\"./storage\");\n  await initializeSampleData();\n  \n  // Log startup information\n  console.log(`🌍 Environment: ${app.get(\"env\")}`);\n  console.log(`📦 API Routes available at /api/*`);\n  console.log(`🎯 Sample data initialized successfully`);\n  \n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2428},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage, initializeSampleData } from \"./storage\";\nimport { \n  insertTaskSchema, \n  insertWaterIntakeSchema,\n  insertExerciseSchema,\n  insertWorkoutTypeSchema,\n  insertMindActivitySchema,\n  insertRoutineItemSchema,\n  insertGoalSchema,\n  insertPerformanceSchema,\n  insertStreakSchema\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Tasks\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const date = req.query.date as string;\n      const tasks = await storage.getTasks(date);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const taskData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(taskData);\n      res.status(201).json(task);\n    } catch (error) {\n      console.error(\"Task creation error:\", error);\n      if (error instanceof Error) {\n        res.status(400).json({ \n          message: \"Invalid task data\", \n          details: error.message \n        });\n      } else {\n        res.status(400).json({ message: \"Invalid task data\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const task = await storage.updateTask(req.params.id, req.body);\n      res.json(task);\n    } catch (error) {\n      res.status(404).json({ message: \"Task not found\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      await storage.deleteTask(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(404).json({ message: \"Task not found\" });\n    }\n  });\n\n  // Water Intake\n  app.get(\"/api/water-intake\", async (req, res) => {\n    try {\n      const date = req.query.date as string;\n      if (!date) {\n        return res.status(400).json({ message: \"Date is required\" });\n      }\n      const waterIntake = await storage.getWaterIntake(date);\n      res.json(waterIntake || { date, amount: 0, goal: 2400 });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch water intake\" });\n    }\n  });\n\n  app.post(\"/api/water-intake\", async (req, res) => {\n    try {\n      const waterData = insertWaterIntakeSchema.parse(req.body);\n      const waterIntake = await storage.createOrUpdateWaterIntake(waterData);\n      res.json(waterIntake);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid water intake data\" });\n    }\n  });\n\n  // Exercises\n  app.get(\"/api/exercises\", async (req, res) => {\n    try {\n      const date = req.query.date as string;\n      const isWeekly = req.query.isWeekly === \"true\";\n      const exercises = await storage.getExercises(date, isWeekly);\n      res.json(exercises);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch exercises\" });\n    }\n  });\n\n  app.post(\"/api/exercises\", async (req, res) => {\n    try {\n      const exerciseData = insertExerciseSchema.parse(req.body);\n      const exercise = await storage.createExercise(exerciseData);\n      res.status(201).json(exercise);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid exercise data\" });\n    }\n  });\n\n  app.patch(\"/api/exercises/:id\", async (req, res) => {\n    try {\n      const exercise = await storage.updateExercise(req.params.id, req.body);\n      res.json(exercise);\n    } catch (error) {\n      res.status(404).json({ message: \"Exercise not found\" });\n    }\n  });\n\n  app.delete(\"/api/exercises/:id\", async (req, res) => {\n    try {\n      await storage.deleteExercise(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(404).json({ message: \"Exercise not found\" });\n    }\n  });\n\n  // Workout Types\n  app.get(\"/api/workout-types\", async (req, res) => {\n    try {\n      const workoutTypes = await storage.getWorkoutTypes();\n      res.json(workoutTypes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch workout types\" });\n    }\n  });\n\n  app.post(\"/api/workout-types\", async (req, res) => {\n    try {\n      const workoutTypeData = insertWorkoutTypeSchema.parse(req.body);\n      const workoutType = await storage.createWorkoutType(workoutTypeData);\n      res.status(201).json(workoutType);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid workout type data\" });\n    }\n  });\n\n  // Mind Activities\n  app.get(\"/api/mind-activities\", async (req, res) => {\n    try {\n      const date = req.query.date as string;\n      const activities = await storage.getMindActivities(date);\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch mind activities\" });\n    }\n  });\n\n  app.post(\"/api/mind-activities\", async (req, res) => {\n    try {\n      const activityData = insertMindActivitySchema.parse(req.body);\n      const activity = await storage.createMindActivity(activityData);\n      res.status(201).json(activity);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid mind activity data\" });\n    }\n  });\n\n  app.patch(\"/api/mind-activities/:id\", async (req, res) => {\n    try {\n      const activity = await storage.updateMindActivity(req.params.id, req.body);\n      res.json(activity);\n    } catch (error) {\n      res.status(404).json({ message: \"Mind activity not found\" });\n    }\n  });\n\n  app.delete(\"/api/mind-activities/:id\", async (req, res) => {\n    try {\n      await storage.deleteMindActivity(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(404).json({ message: \"Mind activity not found\" });\n    }\n  });\n\n  // Routine Items\n  app.get(\"/api/routine-items\", async (req, res) => {\n    try {\n      const type = req.query.type as string;\n      const date = req.query.date as string;\n      const items = await storage.getRoutineItems(type, date);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch routine items\" });\n    }\n  });\n\n  app.post(\"/api/routine-items\", async (req, res) => {\n    try {\n      const itemData = insertRoutineItemSchema.parse(req.body);\n      const item = await storage.createRoutineItem(itemData);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid routine item data\" });\n    }\n  });\n\n  app.patch(\"/api/routine-items/:id\", async (req, res) => {\n    try {\n      const item = await storage.updateRoutineItem(req.params.id, req.body);\n      res.json(item);\n    } catch (error) {\n      res.status(404).json({ message: \"Routine item not found\" });\n    }\n  });\n\n  app.delete(\"/api/routine-items/:id\", async (req, res) => {\n    try {\n      await storage.deleteRoutineItem(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(404).json({ message: \"Routine item not found\" });\n    }\n  });\n\n  // Clear all routine items (for cleanup)\n  app.delete(\"/api/routine-items/clear-all\", async (req, res) => {\n    try {\n      const allItems = await storage.getRoutineItems();\n      for (const item of allItems) {\n        await storage.deleteRoutineItem(item.id);\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to clear routine items\" });\n    }\n  });\n\n\n\n  // Goals\n  app.get(\"/api/goals\", async (req, res) => {\n    try {\n      const type = req.query.type as string;\n      const goals = await storage.getGoals(type);\n      res.json(goals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch goals\" });\n    }\n  });\n\n  app.post(\"/api/goals\", async (req, res) => {\n    try {\n      const goalData = insertGoalSchema.parse(req.body);\n      const goal = await storage.createGoal(goalData);\n      res.status(201).json(goal);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid goal data\" });\n    }\n  });\n\n  app.patch(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const goal = await storage.updateGoal(req.params.id, req.body);\n      res.json(goal);\n    } catch (error) {\n      res.status(404).json({ message: \"Goal not found\" });\n    }\n  });\n\n  app.delete(\"/api/goals/:id\", async (req, res) => {\n    try {\n      await storage.deleteGoal(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(404).json({ message: \"Goal not found\" });\n    }\n  });\n\n  // Performance\n  app.get(\"/api/performance\", async (req, res) => {\n    try {\n      const date = req.query.date as string;\n      const performance = await storage.getPerformance(date);\n      res.json(performance);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch performance\" });\n    }\n  });\n\n  app.post(\"/api/performance\", async (req, res) => {\n    try {\n      const performanceData = insertPerformanceSchema.parse(req.body);\n      const performance = await storage.createOrUpdatePerformance(performanceData);\n      res.json(performance);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid performance data\" });\n    }\n  });\n\n  // Streak\n  app.get(\"/api/streak\", async (req, res) => {\n    try {\n      const streak = await storage.getStreak();\n      res.json(streak);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch streak\" });\n    }\n  });\n\n  app.patch(\"/api/streak\", async (req, res) => {\n    try {\n      const streak = await storage.updateStreak(req.body);\n      res.json(streak);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update streak\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  \n  // Initialize sample data on server startup\n  initializeSampleData().catch(console.error);\n  \n  return httpServer;\n}\n","size_bytes":9694},"server/storage.ts":{"content":"import { \n  Task, InsertTask, \n  WaterIntake, InsertWaterIntake,\n  Exercise, InsertExercise,\n  WorkoutType, InsertWorkoutType,\n  MindActivity, InsertMindActivity,\n  RoutineItem, InsertRoutineItem,\n  Goal, InsertGoal,\n  Performance, InsertPerformance,\n  Streak, InsertStreak\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Tasks\n  getTasks(date?: string): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, task: Partial<Task>): Promise<Task>;\n  deleteTask(id: string): Promise<void>;\n\n  // Water Intake\n  getWaterIntake(date: string): Promise<WaterIntake | undefined>;\n  createOrUpdateWaterIntake(waterIntake: InsertWaterIntake): Promise<WaterIntake>;\n\n  // Exercises\n  getExercises(date?: string, isWeekly?: boolean): Promise<Exercise[]>;\n  getExercise(id: string): Promise<Exercise | undefined>;\n  createExercise(exercise: InsertExercise): Promise<Exercise>;\n  updateExercise(id: string, exercise: Partial<Exercise>): Promise<Exercise>;\n  deleteExercise(id: string): Promise<void>;\n\n  // Workout Types\n  getWorkoutTypes(): Promise<WorkoutType[]>;\n  createWorkoutType(workoutType: InsertWorkoutType): Promise<WorkoutType>;\n  deleteWorkoutType(id: string): Promise<void>;\n\n  // Mind Activities\n  getMindActivities(date?: string): Promise<MindActivity[]>;\n  getMindActivity(id: string): Promise<MindActivity | undefined>;\n  createMindActivity(activity: InsertMindActivity): Promise<MindActivity>;\n  updateMindActivity(id: string, activity: Partial<MindActivity>): Promise<MindActivity>;\n  deleteMindActivity(id: string): Promise<void>;\n\n  // Routine Items\n  getRoutineItems(type?: string, date?: string): Promise<RoutineItem[]>;\n  getRoutineItem(id: string): Promise<RoutineItem | undefined>;\n  createRoutineItem(item: InsertRoutineItem): Promise<RoutineItem>;\n  updateRoutineItem(id: string, item: Partial<RoutineItem>): Promise<RoutineItem>;\n  deleteRoutineItem(id: string): Promise<void>;\n\n\n\n  // Goals\n  getGoals(type?: string): Promise<Goal[]>;\n  getGoal(id: string): Promise<Goal | undefined>;\n  createGoal(goal: InsertGoal): Promise<Goal>;\n  updateGoal(id: string, goal: Partial<Goal>): Promise<Goal>;\n  deleteGoal(id: string): Promise<void>;\n\n  // Performance\n  getPerformance(date?: string): Promise<Performance[]>;\n  createOrUpdatePerformance(performance: InsertPerformance): Promise<Performance>;\n\n  // Streak\n  getStreak(): Promise<Streak>;\n  updateStreak(streak: Partial<Streak>): Promise<Streak>;\n}\n\nexport class MemStorage implements IStorage {\n  private tasks: Map<string, Task> = new Map();\n  private waterIntakes: Map<string, WaterIntake> = new Map();\n  private exercises: Map<string, Exercise> = new Map();\n  private workoutTypes: Map<string, WorkoutType> = new Map();\n  private mindActivities: Map<string, MindActivity> = new Map();\n  private routineItems: Map<string, RoutineItem> = new Map();\n  private goals: Map<string, Goal> = new Map();\n  private performance: Map<string, Performance> = new Map();\n  private streak: Streak = { id: \"default\", current: 0, highest: 0 };\n  private initialized: boolean = false;\n\n  // Tasks\n  async getTasks(date?: string): Promise<Task[]> {\n    const allTasks = Array.from(this.tasks.values());\n    return date ? allTasks.filter(task => task.date === date) : allTasks;\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const task: Task = { ...insertTask, id, createdAt: new Date().toISOString() };\n    this.tasks.set(id, task);\n    return task;\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task> {\n    const task = this.tasks.get(id);\n    if (!task) throw new Error(\"Task not found\");\n    const updatedTask = { ...task, ...updates };\n    this.tasks.set(id, updatedTask);\n    return updatedTask;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    this.tasks.delete(id);\n  }\n\n  // Water Intake\n  async getWaterIntake(date: string): Promise<WaterIntake | undefined> {\n    return Array.from(this.waterIntakes.values()).find(w => w.date === date);\n  }\n\n  async createOrUpdateWaterIntake(insertWaterIntake: InsertWaterIntake): Promise<WaterIntake> {\n    const existing = await this.getWaterIntake(insertWaterIntake.date);\n    if (existing) {\n      const updated = { ...existing, ...insertWaterIntake };\n      this.waterIntakes.set(existing.id, updated);\n      return updated;\n    }\n    const id = randomUUID();\n    const waterIntake: WaterIntake = { ...insertWaterIntake, id };\n    this.waterIntakes.set(id, waterIntake);\n    return waterIntake;\n  }\n\n  // Exercises\n  async getExercises(date?: string, isWeekly?: boolean): Promise<Exercise[]> {\n    const allExercises = Array.from(this.exercises.values());\n    let filtered = allExercises;\n    \n    if (date !== undefined) {\n      filtered = filtered.filter(ex => ex.date === date);\n    }\n    \n    if (isWeekly !== undefined) {\n      filtered = filtered.filter(ex => ex.isWeekly === isWeekly);\n    }\n    \n    return filtered;\n  }\n\n  async getExercise(id: string): Promise<Exercise | undefined> {\n    return this.exercises.get(id);\n  }\n\n  async createExercise(insertExercise: InsertExercise): Promise<Exercise> {\n    const id = randomUUID();\n    const exercise: Exercise = { ...insertExercise, id };\n    this.exercises.set(id, exercise);\n    return exercise;\n  }\n\n  async updateExercise(id: string, updates: Partial<Exercise>): Promise<Exercise> {\n    const exercise = this.exercises.get(id);\n    if (!exercise) throw new Error(\"Exercise not found\");\n    const updatedExercise = { ...exercise, ...updates };\n    this.exercises.set(id, updatedExercise);\n    return updatedExercise;\n  }\n\n  async deleteExercise(id: string): Promise<void> {\n    this.exercises.delete(id);\n  }\n\n  // Workout Types\n  async getWorkoutTypes(): Promise<WorkoutType[]> {\n    return Array.from(this.workoutTypes.values());\n  }\n\n  async createWorkoutType(insertWorkoutType: InsertWorkoutType): Promise<WorkoutType> {\n    const id = randomUUID();\n    const workoutType: WorkoutType = { ...insertWorkoutType, id };\n    this.workoutTypes.set(id, workoutType);\n    return workoutType;\n  }\n\n  async deleteWorkoutType(id: string): Promise<void> {\n    this.workoutTypes.delete(id);\n  }\n\n  // Mind Activities\n  async getMindActivities(date?: string): Promise<MindActivity[]> {\n    const allActivities = Array.from(this.mindActivities.values());\n    return date ? allActivities.filter(activity => activity.date === date) : allActivities;\n  }\n\n  async getMindActivity(id: string): Promise<MindActivity | undefined> {\n    return this.mindActivities.get(id);\n  }\n\n  async createMindActivity(insertActivity: InsertMindActivity): Promise<MindActivity> {\n    const id = randomUUID();\n    const activity: MindActivity = { ...insertActivity, id };\n    this.mindActivities.set(id, activity);\n    return activity;\n  }\n\n  async updateMindActivity(id: string, updates: Partial<MindActivity>): Promise<MindActivity> {\n    const activity = this.mindActivities.get(id);\n    if (!activity) throw new Error(\"Mind activity not found\");\n    const updatedActivity = { ...activity, ...updates };\n    this.mindActivities.set(id, updatedActivity);\n    return updatedActivity;\n  }\n\n  async deleteMindActivity(id: string): Promise<void> {\n    this.mindActivities.delete(id);\n  }\n\n  // Routine Items\n  async getRoutineItems(type?: string, date?: string): Promise<RoutineItem[]> {\n    const allItems = Array.from(this.routineItems.values());\n    let filtered = allItems;\n    \n    if (type) {\n      filtered = filtered.filter(item => item.type === type);\n    }\n    \n    if (date) {\n      filtered = filtered.filter(item => item.date === date);\n    }\n    \n    return filtered;\n  }\n\n  async getRoutineItem(id: string): Promise<RoutineItem | undefined> {\n    return this.routineItems.get(id);\n  }\n\n  async createRoutineItem(insertItem: InsertRoutineItem): Promise<RoutineItem> {\n    const id = randomUUID();\n    const item: RoutineItem = { ...insertItem, id };\n    this.routineItems.set(id, item);\n    return item;\n  }\n\n  async updateRoutineItem(id: string, updates: Partial<RoutineItem>): Promise<RoutineItem> {\n    const item = this.routineItems.get(id);\n    if (!item) throw new Error(\"Routine item not found\");\n    const updatedItem = { ...item, ...updates };\n    this.routineItems.set(id, updatedItem);\n    return updatedItem;\n  }\n\n  async deleteRoutineItem(id: string): Promise<void> {\n    this.routineItems.delete(id);\n  }\n\n\n\n  // Goals\n  async getGoals(type?: string): Promise<Goal[]> {\n    const allGoals = Array.from(this.goals.values());\n    return type ? allGoals.filter(goal => goal.type === type) : allGoals;\n  }\n\n  async getGoal(id: string): Promise<Goal | undefined> {\n    return this.goals.get(id);\n  }\n\n  async createGoal(insertGoal: InsertGoal): Promise<Goal> {\n    const id = randomUUID();\n    const goal: Goal = { ...insertGoal, id };\n    this.goals.set(id, goal);\n    return goal;\n  }\n\n  async updateGoal(id: string, updates: Partial<Goal>): Promise<Goal> {\n    const goal = this.goals.get(id);\n    if (!goal) throw new Error(\"Goal not found\");\n    const updatedGoal = { ...goal, ...updates };\n    this.goals.set(id, updatedGoal);\n    return updatedGoal;\n  }\n\n  async deleteGoal(id: string): Promise<void> {\n    this.goals.delete(id);\n  }\n\n  // Performance\n  async getPerformance(date?: string): Promise<Performance[]> {\n    const allPerformance = Array.from(this.performance.values());\n    return date ? allPerformance.filter(p => p.date === date) : allPerformance;\n  }\n\n  async createOrUpdatePerformance(insertPerformance: InsertPerformance): Promise<Performance> {\n    const existing = Array.from(this.performance.values()).find(p => p.date === insertPerformance.date);\n    if (existing) {\n      const updated = { ...existing, ...insertPerformance };\n      this.performance.set(existing.id, updated);\n      return updated;\n    }\n    const id = randomUUID();\n    const performance: Performance = { ...insertPerformance, id };\n    this.performance.set(id, performance);\n    return performance;\n  }\n\n  // Streak\n  async getStreak(): Promise<Streak> {\n    return this.streak;\n  }\n\n  async updateStreak(updates: Partial<Streak>): Promise<Streak> {\n    this.streak = { ...this.streak, ...updates };\n    return this.streak;\n  }\n}\n\nexport const storage = new MemStorage();\n\n// Clear existing data to prevent duplicates\nexport const clearAllData = async () => {\n  const allTasks = await storage.getTasks();\n  const allExercises = await storage.getExercises();\n  const allGoals = await storage.getGoals();\n  const allRoutines = await storage.getRoutineItems();\n  \n  // Clear all existing data\n  for (const task of allTasks) {\n    await storage.deleteTask(task.id);\n  }\n  for (const exercise of allExercises) {\n    await storage.deleteExercise(exercise.id);\n  }\n  for (const goal of allGoals) {\n    await storage.deleteGoal(goal.id);\n  }\n  for (const routine of allRoutines) {\n    await storage.deleteRoutineItem(routine.id);\n  }\n  \n  console.log('✅ All existing data cleared');\n};\n\n// Initialize sample data\nexport const initializeSampleData = async () => {\n  // Check if already initialized to prevent duplicates\n  if ((storage as any).initialized) {\n    console.log('⏭️ Sample data already initialized, skipping...');\n    return;\n  }\n  \n  const today = new Date().toISOString().split('T')[0];\n  \n  // Clear existing data first to prevent duplicates\n  await clearAllData();\n  \n  console.log('🚀 Initializing fresh sample data...');\n  \n  // Initialize sample tasks\n  console.log('📝 Creating sample tasks...');\n    await storage.createTask({\n      title: \"Review daily goals\",\n      description: \"Check and update today's priorities\",\n      date: today,\n      completed: false,\n      status: \"pending\",\n      time: \"09:00\",\n      duration: 15\n    });\n    \n    await storage.createTask({\n      title: \"Drink 8 glasses of water\",\n      description: \"Stay hydrated throughout the day\",\n      date: today,\n      completed: false,\n      status: \"pending\",\n      time: \"10:00\",\n      duration: undefined\n    });\n    \n    await storage.createTask({\n      title: \"Complete workout routine\",\n      description: \"Follow today's exercise plan\",\n      date: today,\n      completed: false,\n      status: \"pending\",\n      time: \"18:00\",\n      duration: 45\n    });\n  \n  // Initialize sample exercises\n  console.log('💪 Creating sample exercises...');\n    // Daily exercises\n    await storage.createExercise({\n      name: \"Morning Yoga\",\n      duration: 20,\n      sets: 1,\n      reps: \"20 min flow\",\n      date: today,\n      isWeekly: false,\n      completed: false\n    });\n    \n    await storage.createExercise({\n      name: \"Push-ups\",\n      duration: 5,\n      sets: 3,\n      reps: \"15\",\n      date: today,\n      isWeekly: false,\n      completed: false\n    });\n    \n    await storage.createExercise({\n      name: \"Evening Walk\",\n      duration: 30,\n      sets: 1,\n      reps: \"30 min walk\",\n      date: today,\n      isWeekly: false,\n      completed: false\n    });\n    \n    // Day 1 - Push (Chest, Shoulders, Triceps, Abs)\n    await storage.createExercise({\n      name: \"Normal Push-Ups\",\n      duration: 35,\n      sets: 4,\n      reps: \"25\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"monday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Incline Push-Ups\",\n      duration: 35,\n      sets: 3,\n      reps: \"25\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"monday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Pike Push-Ups\",\n      duration: 35,\n      sets: 3,\n      reps: \"15\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"monday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Diamond Push-Ups\",\n      duration: 35,\n      sets: 2,\n      reps: \"15\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"monday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Bench Dips\",\n      duration: 35,\n      sets: 3,\n      reps: \"25\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"monday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Russian Twists\",\n      duration: 35,\n      sets: 3,\n      reps: \"30\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"monday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Plank\",\n      duration: 35,\n      sets: 1,\n      reps: \"5 min\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"monday\",\n      workoutType: \"Full Body\"\n    });\n\n    // Day 2 - Pull (Back, Biceps, Forearms, Grip)\n    await storage.createExercise({\n      name: \"Pull-Ups / Assisted\",\n      duration: 35,\n      sets: 4,\n      reps: \"12\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"tuesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Towel Rows\",\n      duration: 35,\n      sets: 3,\n      reps: \"20\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"tuesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Towel Bicep Curls\",\n      duration: 35,\n      sets: 3,\n      reps: \"20\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"tuesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Reverse Curls\",\n      duration: 35,\n      sets: 3,\n      reps: \"15\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"tuesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Gripper Fast\",\n      duration: 35,\n      sets: 3,\n      reps: \"40\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"tuesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Farmer Hold\",\n      duration: 35,\n      sets: 2,\n      reps: \"45 sec\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"tuesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Wrist Rolls\",\n      duration: 35,\n      sets: 2,\n      reps: \"20\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"tuesday\",\n      workoutType: \"Full Body\"\n    });\n\n    // Day 3 - Legs (Quads, Glutes, Calves)\n    await storage.createExercise({\n      name: \"Squats\",\n      duration: 35,\n      sets: 4,\n      reps: \"25\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"wednesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Jump Squats\",\n      duration: 35,\n      sets: 3,\n      reps: \"20\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"wednesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Lunges\",\n      duration: 35,\n      sets: 3,\n      reps: \"20 steps\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"wednesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Calf Raises\",\n      duration: 35,\n      sets: 4,\n      reps: \"30\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"wednesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Wall Sit\",\n      duration: 35,\n      sets: 2,\n      reps: \"45 sec\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"wednesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Broad Jumps\",\n      duration: 35,\n      sets: 2,\n      reps: \"15\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"wednesday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"High Knees\",\n      duration: 35,\n      sets: 2,\n      reps: \"30\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"wednesday\",\n      workoutType: \"Full Body\"\n    });\n\n    // Day 4 - Core + Abs (Six-Pack, Obliques, Stability)\n    await storage.createExercise({\n      name: \"Crunches\",\n      duration: 35,\n      sets: 3,\n      reps: \"25\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"thursday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Leg Raises\",\n      duration: 35,\n      sets: 3,\n      reps: \"25\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"thursday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Mountain Climbers\",\n      duration: 35,\n      sets: 3,\n      reps: \"30\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"thursday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Plank\",\n      duration: 35,\n      sets: 3,\n      reps: \"1 min\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"thursday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Side Plank\",\n      duration: 35,\n      sets: 2,\n      reps: \"1 min each\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"thursday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"V-Ups\",\n      duration: 35,\n      sets: 3,\n      reps: \"20\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"thursday\",\n      workoutType: \"Full Body\"\n    });\n\n    // Day 5 - Power + Explosive + Grip Veins (Short, Strong)\n    await storage.createExercise({\n      name: \"Clap Pushups\",\n      duration: 30,\n      sets: 3,\n      reps: \"15\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"friday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Skipping\",\n      duration: 30,\n      sets: 1,\n      reps: \"5 min\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"friday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"High Knees Power\",\n      duration: 30,\n      sets: 3,\n      reps: \"30\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"friday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Towel Bicep Curls Power\",\n      duration: 30,\n      sets: 2,\n      reps: \"25\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"friday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Wrist Rolls Power\",\n      duration: 30,\n      sets: 2,\n      reps: \"20\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"friday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Gripper Slow Squeeze\",\n      duration: 30,\n      sets: 2,\n      reps: \"15\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"friday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Hanging\",\n      duration: 30,\n      sets: 3,\n      reps: \"1 min\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"friday\",\n      workoutType: \"Full Body\"\n    });\n\n    // Day 6 - BONUS Stretch + Pump Day (Light Sculpting + Relaxing)\n    await storage.createExercise({\n      name: \"Archer Pushups\",\n      duration: 30,\n      sets: 2,\n      reps: \"12\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"saturday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Incline Pushups Light\",\n      duration: 30,\n      sets: 2,\n      reps: \"20\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"saturday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Squats Light\",\n      duration: 30,\n      sets: 2,\n      reps: \"25\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"saturday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Plank Stretch\",\n      duration: 30,\n      sets: 2,\n      reps: \"1 min\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"saturday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Neck + Spine + Toe Touch Stretch\",\n      duration: 30,\n      sets: 3,\n      reps: \"30 sec\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"saturday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Hanging Stretch\",\n      duration: 30,\n      sets: 2,\n      reps: \"1 min\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"saturday\",\n      workoutType: \"Full Body\"\n    });\n\n    // Day 7 - Rest Day (Zero Pressure)\n    await storage.createExercise({\n      name: \"Hanging Rest\",\n      duration: 10,\n      sets: 1,\n      reps: \"1 min\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"sunday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Cobra Stretch\",\n      duration: 10,\n      sets: 2,\n      reps: \"30 sec\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"sunday\",\n      workoutType: \"Full Body\"\n    });\n    \n    await storage.createExercise({\n      name: \"Light Walk\",\n      duration: 10,\n      sets: 1,\n      reps: \"10 min\",\n      date: today,\n      isWeekly: true,\n      completed: false,\n      day: \"sunday\",\n      workoutType: \"Full Body\"\n    });\n  \n  // Initialize sample goals\n  console.log('🎯 Creating sample goals...');\n    await storage.createGoal({\n      title: \"2025: Hit ₹60K/month as Full-Stack Developer\",\n      description: \"Master modern web development stack and land high-paying remote opportunities\",\n      type: \"yearly\",\n      targetDate: \"2025-12-31\",\n      completed: false,\n      progress: 25\n    });\n    \n    await storage.createGoal({\n      title: \"April 2025 - Foundation & Setup\",\n      description: \"Complete JavaScript fundamentals, setup development environment, and create portfolio foundation\",\n      type: \"monthly\", \n      targetDate: \"2025-04-30\",\n      completed: false,\n      progress: 60\n    });\n    \n    await storage.createGoal({\n      title: \"Week 1: Advanced JavaScript Mastery\",\n      description: \"Deep dive into ES6+, async/await, closures, prototypes, and modern JavaScript patterns. Complete 3 complex projects.\",\n      type: \"weekly\",\n      targetDate: \"2025-04-07\",\n      completed: false,\n      progress: 80\n    });\n    \n    await storage.createGoal({\n      title: \"Week 2: React & Component Architecture\",\n      description: \"Build complex React applications with hooks, context, and state management. Create 2 portfolio projects.\",\n      type: \"weekly\",\n      targetDate: \"2025-04-14\",\n      completed: false,\n      progress: 30\n    });\n    \n    await storage.createGoal({\n      title: \"Week 3: Backend Development with Node.js\",\n      description: \"Learn Express.js, RESTful APIs, and database integration. Build full-stack applications.\",\n      type: \"weekly\",\n      targetDate: \"2025-04-21\",\n      completed: false,\n      progress: 0\n    });\n    \n    // Add more monthly goals to show proper monthly section\n    await storage.createGoal({\n      title: \"May 2025 - Full Stack Fundamentals\", \n      description: \"Deep dive React + Express.js, Learn MongoDB with Mongoose, Build 2 full-stack projects, Start blogs + LinkedIn posts, Master Postman + Git\",\n      type: \"monthly\",\n      targetDate: \"2025-05-31\",\n      completed: false,\n      progress: 0\n    });\n    \n    await storage.createGoal({\n      title: \"June 2025 - Real World Projects\",\n      description: \"Make 2 major real-world projects, Use JWT authentication, Role-based dashboards (Admin/User), Host on Vercel/Render, Start Upwork/Freelancer profiles\",\n      type: \"monthly\",\n      targetDate: \"2025-06-30\",\n      completed: false,\n      progress: 0\n    });\n    \n    await storage.createGoal({\n      title: \"July 2025 - Freelancing + Interviews\",\n      description: \"Get small freelance gigs (₹2-10k), Apply to internships, Practice coding interviews (DSA), Create payment project (Razorpay), Start cold emailing startups\",\n      type: \"monthly\",\n      targetDate: \"2025-07-31\",\n      completed: false,\n      progress: 0\n    });\n  \n  // Initialize sample routine items based on user's skincare routine\n  console.log('📅 Creating sample routine items...');\n    \n    // Morning routine (exact match with user's routine)\n    await storage.createRoutineItem({\n      name: \"🍋 Lemon & Honey Detox Drink\",\n      time: \"06:00\",\n      duration: 5,\n      type: \"morning\",\n      date: today,\n      completed: false,\n      days: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"🧊 Ice Cube Face Treatment\",\n      time: \"06:05\",\n      duration: 2,\n      type: \"morning\",\n      date: today,\n      completed: false,\n      days: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"🧼 Face & Body Wash (Vitamin C)\",\n      time: \"06:10\",\n      duration: 5,\n      type: \"morning\",\n      date: today,\n      completed: false,\n      days: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"🍯 Malai + Honey + Haldi Face Pack\",\n      time: \"06:15\",\n      duration: 20,\n      type: \"morning\",\n      date: today,\n      completed: false,\n      days: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"☀️ Moisturize & Sun Protection\",\n      time: \"06:35\",\n      duration: 3,\n      type: \"morning\",\n      date: today,\n      completed: false,\n      days: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    });\n    \n    // Night routine (exact match with user's routine)\n    await storage.createRoutineItem({\n      name: \"🧼 Evening Face & Body Cleansing\",\n      time: \"20:00\",\n      duration: 5,\n      type: \"night\",\n      date: today,\n      completed: false,\n      days: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"💧 Face Serum (Vitamin C/Niacinamide)\",\n      time: \"20:05\",\n      duration: 2,\n      type: \"night\",\n      date: today,\n      completed: false,\n      days: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"🌙 Night Moisturizer\",\n      time: \"20:10\",\n      duration: 2,\n      type: \"night\",\n      date: today,\n      completed: false,\n      days: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"🥛 Milk & Potato Dark Spot Treatment\",\n      time: \"20:15\",\n      duration: 20,\n      type: \"night\",\n      date: today,\n      completed: false,\n      days: [\"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\", \"sunday\"]\n    });\n    \n    // Weekly routines (exact match with user's routine)\n    await storage.createRoutineItem({\n      name: \"👄 Lip Scrub (Honey + Sugar)\",\n      time: \"19:00\",\n      duration: 5,\n      type: \"weekly\",\n      date: today,\n      completed: false,\n      days: [\"tuesday\", \"thursday\", \"saturday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"🧽 Body Exfoliation (Coffee + Curd)\",\n      time: \"19:30\",\n      duration: 10,\n      type: \"weekly\",\n      date: today,\n      completed: false,\n      days: [\"sunday\", \"wednesday\", \"friday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"🌿 Ubtan Body Mask\",\n      time: \"18:00\",\n      duration: 35,\n      type: \"weekly\",\n      date: today,\n      completed: false,\n      days: [\"tuesday\", \"thursday\", \"saturday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"🍋 Lemon & Baking Soda Treatment\",\n      time: \"19:00\",\n      duration: 8,\n      type: \"weekly\",\n      date: today,\n      completed: false,\n      days: [\"monday\", \"friday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"💆‍♀️ Hair Oil Massage\",\n      time: \"17:00\",\n      duration: 70,\n      type: \"weekly\",\n      date: today,\n      completed: false,\n      days: [\"wednesday\", \"saturday\"]\n    });\n    \n    await storage.createRoutineItem({\n      name: \"🧴 Hair Wash (Sulfate-Free)\",\n      time: \"18:30\",\n      duration: 15,\n      type: \"weekly\",\n      date: today,\n      completed: false,\n      days: [\"wednesday\", \"saturday\"]\n    });\n  \n  // Mark as initialized to prevent re-initialization\n  (storage as any).initialized = true;\n  console.log('✅ Server sample data initialized');\n};\n","size_bytes":31562},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\nimport { pgTable, text, integer, boolean, timestamp, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\n\n// Task Management\nexport const taskSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  time: z.string().optional(),\n  duration: z.number().optional(),\n  status: z.enum([\"pending\", \"in-progress\", \"completed\"]).default(\"pending\"),\n  completed: z.boolean().default(false),\n  date: z.string(), // ISO date string\n  createdAt: z.string().default(() => new Date().toISOString()),\n});\n\nexport const insertTaskSchema = taskSchema.omit({ id: true, createdAt: true });\nexport type Task = z.infer<typeof taskSchema>;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\n// Water Intake\nexport const waterIntakeSchema = z.object({\n  id: z.string(),\n  date: z.string(),\n  amount: z.number().default(0), // in ml\n  goal: z.number().default(2400), // daily goal in ml\n});\n\nexport const insertWaterIntakeSchema = waterIntakeSchema.omit({ id: true });\nexport type WaterIntake = z.infer<typeof waterIntakeSchema>;\nexport type InsertWaterIntake = z.infer<typeof insertWaterIntakeSchema>;\n\n// Workout Management\nexport const exerciseSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Exercise name is required\"),\n  sets: z.number().min(1),\n  reps: z.string(), // Can be number or time-based like \"1 min hold\"\n  duration: z.number().optional(), // in minutes\n  completed: z.boolean().default(false),\n  date: z.string(),\n  day: z.enum([\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"]).optional(),\n  workoutType: z.string().optional(),\n  isWeekly: z.boolean().default(false),\n});\n\nexport const insertExerciseSchema = exerciseSchema.omit({ id: true });\nexport type Exercise = z.infer<typeof exerciseSchema>;\nexport type InsertExercise = z.infer<typeof insertExerciseSchema>;\n\nexport const workoutTypeSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Workout type name is required\"),\n  isWeekly: z.boolean().default(false),\n  maxTimeToComplete: z.number().optional(), // in minutes\n});\n\nexport const insertWorkoutTypeSchema = workoutTypeSchema.omit({ id: true });\nexport type WorkoutType = z.infer<typeof workoutTypeSchema>;\nexport type InsertWorkoutType = z.infer<typeof insertWorkoutTypeSchema>;\n\n// Mind Workout\nexport const mindActivitySchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Activity name is required\"),\n  description: z.string(),\n  time: z.string(),\n  chatgptRole: z.string(),\n  completed: z.boolean().default(false),\n  date: z.string(),\n  status: z.enum([\"pending\", \"in-progress\", \"completed\"]).default(\"pending\"),\n});\n\nexport const insertMindActivitySchema = mindActivitySchema.omit({ id: true });\nexport type MindActivity = z.infer<typeof mindActivitySchema>;\nexport type InsertMindActivity = z.infer<typeof insertMindActivitySchema>;\n\n// Daily Routine\nexport const routineItemSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Routine name is required\"),\n  time: z.string(),\n  duration: z.number(), // in minutes\n  type: z.enum([\"morning\", \"night\", \"weekly\", \"skincare\"]),\n  days: z.array(z.enum([\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"])).optional(),\n  completed: z.boolean().default(false),\n  date: z.string(),\n});\n\nexport const insertRoutineItemSchema = routineItemSchema.omit({ id: true });\nexport type RoutineItem = z.infer<typeof routineItemSchema>;\nexport type InsertRoutineItem = z.infer<typeof insertRoutineItemSchema>;\n\n\n\n// Development Tracker\nexport const goalSchema = z.object({\n  id: z.string(),\n  title: z.string().min(1, \"Goal title is required\"),\n  description: z.string().optional(),\n  type: z.enum([\"weekly\", \"monthly\", \"yearly\"]),\n  targetDate: z.string(),\n  completed: z.boolean().default(false),\n  progress: z.number().min(0).max(100).default(0),\n  parentGoalId: z.string().optional(), // for linking weekly to monthly, monthly to yearly\n});\n\nexport const insertGoalSchema = goalSchema.omit({ id: true });\nexport type Goal = z.infer<typeof goalSchema>;\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\n\n// Performance Tracking\nexport const performanceSchema = z.object({\n  id: z.string(),\n  date: z.string(),\n  tasks: z.number().min(0).max(100).default(0),\n  workout: z.number().min(0).max(100).default(0),\n  mindWorkout: z.number().min(0).max(100).default(0),\n  routine: z.number().min(0).max(100).default(0),\n  overall: z.number().min(0).max(100).default(0),\n});\n\nexport const insertPerformanceSchema = performanceSchema.omit({ id: true });\nexport type Performance = z.infer<typeof performanceSchema>;\nexport type InsertPerformance = z.infer<typeof insertPerformanceSchema>;\n\n// Streak Tracking\nexport const streakSchema = z.object({\n  id: z.string(),\n  current: z.number().default(0),\n  highest: z.number().default(0),\n  lastActiveDate: z.string().optional(),\n});\n\nexport const insertStreakSchema = streakSchema.omit({ id: true });\nexport type Streak = z.infer<typeof streakSchema>;\nexport type InsertStreak = z.infer<typeof insertStreakSchema>;\n\n// Drizzle Table Definitions\nexport const tasksTable = pgTable(\"tasks\", {\n  id: text(\"id\").primaryKey().default(\"nanoid()\"),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  time: text(\"time\"),\n  duration: integer(\"duration\"),\n  status: text(\"status\").default(\"pending\"),\n  completed: boolean(\"completed\").default(false),\n  date: text(\"date\").notNull(),\n  createdAt: text(\"created_at\").default(\"now()\"),\n});\n\nexport const waterIntakeTable = pgTable(\"water_intake\", {\n  id: text(\"id\").primaryKey().default(\"nanoid()\"),\n  date: text(\"date\").notNull().unique(),\n  amount: integer(\"amount\").default(0),\n  goal: integer(\"goal\").default(2400),\n});\n\nexport const exercisesTable = pgTable(\"exercises\", {\n  id: text(\"id\").primaryKey().default(\"nanoid()\"),\n  name: text(\"name\").notNull(),\n  sets: integer(\"sets\").notNull(),\n  reps: text(\"reps\").notNull(),\n  duration: integer(\"duration\"),\n  completed: boolean(\"completed\").default(false),\n  date: text(\"date\").notNull(),\n  day: text(\"day\"),\n  workoutType: text(\"workout_type\"),\n  isWeekly: boolean(\"is_weekly\").default(false),\n});\n\nexport const workoutTypesTable = pgTable(\"workout_types\", {\n  id: text(\"id\").primaryKey().default(\"nanoid()\"),\n  name: text(\"name\").notNull(),\n  isWeekly: boolean(\"is_weekly\").default(false),\n  maxTimeToComplete: integer(\"max_time_to_complete\"),\n});\n\nexport const mindActivitiesTable = pgTable(\"mind_activities\", {\n  id: text(\"id\").primaryKey().default(\"nanoid()\"),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  time: text(\"time\").notNull(),\n  chatgptRole: text(\"chatgpt_role\").notNull(),\n  completed: boolean(\"completed\").default(false),\n  date: text(\"date\").notNull(),\n  status: text(\"status\").default(\"pending\"),\n});\n\nexport const routineItemsTable = pgTable(\"routine_items\", {\n  id: text(\"id\").primaryKey().default(\"nanoid()\"),\n  name: text(\"name\").notNull(),\n  time: text(\"time\").notNull(),\n  duration: integer(\"duration\").notNull(),\n  type: text(\"type\").notNull(),\n  days: text(\"days\"), // JSON array as text\n  completed: boolean(\"completed\").default(false),\n  date: text(\"date\").notNull(),\n});\n\nexport const goalsTable = pgTable(\"goals\", {\n  id: text(\"id\").primaryKey().default(\"nanoid()\"),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(),\n  targetDate: text(\"target_date\").notNull(),\n  completed: boolean(\"completed\").default(false),\n  progress: integer(\"progress\").default(0),\n  parentGoalId: text(\"parent_goal_id\"),\n});\n\nexport const performanceTable = pgTable(\"performance\", {\n  id: text(\"id\").primaryKey().default(\"nanoid()\"),\n  date: text(\"date\").notNull(),\n  type: text(\"type\").notNull(),\n  tasks: integer(\"tasks\").default(0),\n  workout: integer(\"workout\").default(0),\n  mindWorkout: integer(\"mind_workout\").default(0),\n  routine: integer(\"routine\").default(0),\n  overall: integer(\"overall\").default(0),\n});\n\nexport const streakTable = pgTable(\"streak\", {\n  id: text(\"id\").primaryKey().default(\"default\"),\n  current: integer(\"current\").default(0),\n  highest: integer(\"highest\").default(0),\n  lastActiveDate: text(\"last_active_date\"),\n});\n\n// Drizzle inferred types\nexport type TaskTable = typeof tasksTable.$inferSelect;\nexport type InsertTaskTable = typeof tasksTable.$inferInsert;\n","size_bytes":8428},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/layout/theme-provider\";\nimport { Navigation } from \"@/components/layout/navigation\";\nimport { OfflineIndicator, PWAStatusBar } from \"@/components/ui/offline-indicator\";\nimport Dashboard from \"@/pages/dashboard\";\nimport DailyTask from \"@/pages/daily-task\";\nimport Workout from \"@/pages/workout\";\nimport MindWorkout from \"@/pages/mind-workout\";\nimport DailyRoutine from \"@/pages/daily-routine\";\nimport DevTracker from \"@/pages/dev-tracker\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/daily-task\" component={DailyTask} />\n      <Route path=\"/workout\" component={Workout} />\n      <Route path=\"/mind-workout\" component={MindWorkout} />\n      <Route path=\"/daily-routine\" component={DailyRoutine} />\n      <Route path=\"/dev-tracker\" component={DevTracker} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"system\" storageKey=\"metabuild-ui-theme\">\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-background\">\n            <Navigation />\n            <Router />\n            <Toaster />\n            <OfflineIndicator />\n            <PWAStatusBar />\n          </div>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1718},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 98%);\n  --foreground: hsl(220, 8.9%, 6.9%);\n  --muted: hsl(220, 14.3%, 95.9%);\n  --muted-foreground: hsl(220, 8.9%, 46.1%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 8.9%, 6.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 8.9%, 6.9%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --primary: hsl(262, 83%, 58%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(355, 100%, 97%);\n  --accent: hsl(199, 89%, 48%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --warning: hsl(38, 92%, 50%);\n  --success: hsl(142, 76%, 36%);\n  --ring: hsl(262, 83%, 58%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32.6%, 17.5%);\n  --input: hsl(217, 32.6%, 17.5%);\n  --primary: hsl(262, 83%, 68%);\n  --primary-foreground: hsl(222, 84%, 4.9%);\n  --secondary: hsl(142, 76%, 46%);\n  --secondary-foreground: hsl(222, 84%, 4.9%);\n  --accent: hsl(199, 89%, 58%);\n  --accent-foreground: hsl(222, 84%, 4.9%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --warning: hsl(38, 92%, 60%);\n  --success: hsl(142, 76%, 46%);\n  --ring: hsl(262, 83%, 68%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    font-family: 'Inter', system-ui, -apple-system, sans-serif;\n    background: hsl(var(--background));\n    color: hsl(var(--foreground));\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold text-foreground;\n    line-height: 1.2;\n  }\n\n  .text-gradient-primary {\n    @apply bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent font-semibold;\n  }\n\n  .text-gradient-secondary {\n    @apply bg-gradient-to-r from-secondary to-accent bg-clip-text text-transparent font-semibold;\n  }\n}\n\n@layer components {\n  /* Clean Card Style */\n  .card-clean {\n    @apply bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 rounded-lg shadow-sm p-4 sm:p-6;\n  }\n\n  .card-clean:hover {\n    @apply shadow-md;\n  }\n\n  /* Button Styles */\n  .btn-primary {\n    @apply bg-primary hover:bg-primary/90 text-white font-medium rounded-lg px-3 py-2 sm:px-4 transition-colors text-sm sm:text-base;\n  }\n\n  .btn-secondary {\n    @apply bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 text-gray-900 dark:text-gray-100 font-medium rounded-lg px-3 py-2 sm:px-4 transition-colors text-sm sm:text-base;\n  }\n\n  /* Navigation */\n  .nav-clean {\n    @apply bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm border-b border-gray-200 dark:border-gray-800;\n  }\n\n  .nav-link-clean {\n    @apply px-2 py-2 lg:px-3 rounded-md text-xs sm:text-sm font-medium transition-colors block w-full md:w-auto;\n  }\n\n  .nav-link-clean.active {\n    @apply bg-primary text-white;\n  }\n\n  .nav-link-clean:not(.active) {\n    @apply text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800;\n  }\n\n  /* Progress Bar */\n  .progress-clean {\n    @apply bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden;\n  }\n\n  .progress-fill {\n    @apply bg-gradient-to-r from-primary to-accent h-full transition-all duration-500 ease-out;\n  }\n\n  /* Badges */\n  .badge-clean {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n  }\n\n  .badge-success {\n    @apply bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300;\n  }\n\n  .badge-warning {\n    @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300;\n  }\n\n  .badge-secondary {\n    @apply bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-300;\n  }\n\n  /* Input */\n  .input-clean {\n    @apply block w-full rounded-lg border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-900 px-3 py-2 text-sm placeholder-gray-500 dark:placeholder-gray-400 focus:border-primary focus:outline-none focus:ring-1 focus:ring-primary;\n  }\n\n  /* Typography */\n  .section-title {\n    @apply text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4;\n  }\n\n  .page-title {\n    @apply text-2xl font-bold text-gray-900 dark:text-gray-100 mb-6;\n  }\n\n  /* Floating Button */\n  .floating-btn-clean {\n    @apply fixed bottom-20 right-4 sm:bottom-6 sm:right-6 bg-gradient-to-r from-primary to-accent hover:opacity-90 text-white rounded-full w-12 h-12 sm:w-14 sm:h-14 shadow-lg hover:shadow-xl transition-all z-50 flex items-center justify-center;\n  }\n\n  /* Performance Bars */\n  .performance-bar {\n    @apply h-4 rounded-full overflow-hidden bg-gray-200 dark:bg-gray-800;\n  }\n\n  .performance-fill {\n    @apply h-full transition-all duration-500 ease-out;\n  }\n\n  .performance-excellent {\n    @apply bg-green-500;\n  }\n\n  .performance-good {\n    @apply bg-yellow-500;\n  }\n\n  .performance-poor {\n    @apply bg-red-500;\n  }\n\n  /* Mobile optimizations */\n  @media (max-width: 768px) {\n    .card-clean {\n      @apply mx-3 my-2 p-4;\n    }\n    \n    .page-title {\n      @apply text-xl mb-4;\n    }\n    \n    .section-title {\n      @apply text-lg mb-3;\n    }\n\n    .floating-btn-clean {\n      @apply bottom-20 right-3 w-12 h-12;\n    }\n\n    .nav-link-clean {\n      @apply px-4 py-3;\n    }\n  }\n\n  /* Touch targets for mobile */\n  @media (hover: none) and (pointer: coarse) {\n    .btn-primary, .btn-secondary {\n      @apply py-3;\n    }\n    \n    /* Better touch targets for checkboxes and buttons */\n    button, [role=\"button\"], input[type=\"checkbox\"] {\n      @apply min-h-10 min-w-10;\n    }\n  }\n\n  /* Item Clean - Mobile Optimizations */\n  .item-clean {\n    @apply bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 rounded-lg p-3 sm:p-4 hover:shadow-sm transition-shadow;\n  }\n}","size_bytes":6226},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { initializePWA } from \"./lib/pwa-utils\";\nimport { initializeSampleData } from \"./lib/init-data\";\n\n// Initialize PWA features\ninitializePWA();\n\n// Initialize sample data for offline use\ninitializeSampleData();\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":374},"client/src/hooks/use-local-storage.ts":{"content":"import { useState, useEffect } from 'react';\nimport { LocalStorage } from '@/lib/storage';\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = LocalStorage.get<T>(key);\n      return item !== null ? item : initialValue;\n    } catch {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      LocalStorage.set(key, valueToStore);\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}\n","size_bytes":754},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/date-utils.ts":{"content":"import { format, startOfWeek, endOfWeek, eachDayOfInterval, isToday, isSameMonth } from \"date-fns\";\n\nexport function formatDate(date: Date): string {\n  return format(date, 'yyyy-MM-dd');\n}\n\nexport function formatTime(date: Date): string {\n  return format(date, 'HH:mm');\n}\n\nexport function formatDateDisplay(date: Date): string {\n  return format(date, 'MMM d, yyyy');\n}\n\nexport function getWeekDates(date: Date = new Date()) {\n  const start = startOfWeek(date, { weekStartsOn: 0 }); // Sunday\n  const end = endOfWeek(date, { weekStartsOn: 0 });\n  return eachDayOfInterval({ start, end });\n}\n\nexport function getDaysOfWeek() {\n  return ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n}\n\nexport function getCurrentDayName(): string {\n  return getDaysOfWeek()[new Date().getDay()];\n}\n\nexport function isCurrentDay(dayName: string): boolean {\n  return getCurrentDayName() === dayName;\n}\n\nexport function getTodayString(): string {\n  return formatDate(new Date());\n}\n\nexport function calculatePerformance(completed: number, total: number): number {\n  if (total === 0) return 0;\n  return Math.round((completed / total) * 100);\n}\n\nexport function getPerformanceColor(percentage: number): string {\n  if (percentage >= 80) return 'performance-excellent';\n  if (percentage >= 60) return 'performance-good';\n  if (percentage > 0) return 'performance-poor';\n  return 'performance-no-data';\n}\n\nexport function generateCalendarDates(year: number, month: number) {\n  const firstDay = new Date(year, month, 1);\n  const lastDay = new Date(year, month + 1, 0);\n  const daysInMonth = lastDay.getDate();\n  const startDay = firstDay.getDay(); // 0 = Sunday\n\n  const dates = [];\n  \n  // Add empty cells for days before the first day of the month\n  for (let i = 0; i < startDay; i++) {\n    dates.push(null);\n  }\n\n  // Add all days of the month\n  for (let day = 1; day <= daysInMonth; day++) {\n    const date = new Date(year, month, day);\n    dates.push({\n      date,\n      day,\n      isToday: isToday(date),\n      isCurrentMonth: isSameMonth(date, firstDay),\n      dateString: formatDate(date)\n    });\n  }\n\n  return dates;\n}\n","size_bytes":2134},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { ApiClient } from \"./api-client\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Try to use offline-capable API client for supported endpoints\n  try {\n    if (method === 'POST' && url.includes('/api/tasks')) {\n      const result = await ApiClient.createTask(data as any);\n      return { json: () => Promise.resolve(result) } as Response;\n    }\n    \n    if (method === 'PATCH' && url.includes('/api/tasks/')) {\n      const id = url.split('/').pop()!;\n      const result = await ApiClient.updateTask(id, data as any);\n      return { json: () => Promise.resolve(result) } as Response;\n    }\n    \n    if (method === 'DELETE' && url.includes('/api/tasks/')) {\n      const id = url.split('/').pop()!;\n      await ApiClient.deleteTask(id);\n      return { json: () => Promise.resolve() } as Response;\n    }\n    \n    if (method === 'POST' && url.includes('/api/water-intake')) {\n      const result = await ApiClient.createOrUpdateWaterIntake(data as any);\n      return { json: () => Promise.resolve(result) } as Response;\n    }\n    \n    if (method === 'PATCH' && url.includes('/api/streak')) {\n      const result = await ApiClient.updateStreak(data as any);\n      return { json: () => Promise.resolve(result) } as Response;\n    }\n    \n  } catch (error) {\n    console.log('Falling back to server API:', error);\n  }\n\n  // Fallback to server API\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const endpoint = queryKey.join(\"/\") as string;\n    \n    // Use offline-capable API client for common endpoints\n    try {\n      if (endpoint.includes('/api/tasks')) {\n        const params = new URLSearchParams(endpoint.split('?')[1] || '');\n        const date = params.get('date') || undefined;\n        return await ApiClient.getTasks(date);\n      }\n      \n      if (endpoint.includes('/api/water-intake')) {\n        const params = new URLSearchParams(endpoint.split('?')[1] || '');\n        const date = params.get('date');\n        if (date) {\n          return await ApiClient.getWaterIntake(date);\n        }\n      }\n      \n      if (endpoint.includes('/api/exercises')) {\n        const params = new URLSearchParams(endpoint.split('?')[1] || '');\n        const date = params.get('date') || undefined;\n        const isWeekly = params.get('isWeekly') ? params.get('isWeekly') === 'true' : undefined;\n        return await ApiClient.getExercises(date, isWeekly);\n      }\n      \n      if (endpoint.includes('/api/mind-activities')) {\n        const params = new URLSearchParams(endpoint.split('?')[1] || '');\n        const date = params.get('date') || undefined;\n        return await ApiClient.getMindActivities(date);\n      }\n      \n      if (endpoint.includes('/api/routine-items')) {\n        const params = new URLSearchParams(endpoint.split('?')[1] || '');\n        const type = params.get('type') || undefined;\n        return await ApiClient.getRoutineItems(type);\n      }\n      \n      if (endpoint.includes('/api/goals')) {\n        const params = new URLSearchParams(endpoint.split('?')[1] || '');\n        const type = params.get('type') || undefined;\n        return await ApiClient.getGoals(type);\n      }\n      \n      if (endpoint.includes('/api/performance')) {\n        const params = new URLSearchParams(endpoint.split('?')[1] || '');\n        const date = params.get('date') || undefined;\n        return await ApiClient.getPerformance(date);\n      }\n      \n      if (endpoint.includes('/api/streak')) {\n        return await ApiClient.getStreak();\n      }\n    } catch (error) {\n      console.log('Falling back to server for query:', endpoint);\n    }\n    \n    // Fallback to server API\n    const res = await fetch(endpoint, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":4853},"client/src/lib/storage.ts":{"content":"// Client-side localStorage utilities for data persistence\nexport class LocalStorage {\n  private static prefix = 'metabuild_';\n\n  static get<T>(key: string): T | null {\n    try {\n      const item = localStorage.getItem(this.prefix + key);\n      return item ? JSON.parse(item) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static set<T>(key: string, value: T): void {\n    try {\n      localStorage.setItem(this.prefix + key, JSON.stringify(value));\n    } catch (error) {\n      console.error('Failed to save to localStorage:', error);\n    }\n  }\n\n  static remove(key: string): void {\n    localStorage.removeItem(this.prefix + key);\n  }\n\n  static clear(): void {\n    const keys = Object.keys(localStorage);\n    keys.forEach(key => {\n      if (key.startsWith(this.prefix)) {\n        localStorage.removeItem(key);\n      }\n    });\n  }\n}\n","size_bytes":837},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/daily-routine.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { PieChart } from \"@/components/charts/pie-chart\";\nimport { FloatingButton } from \"@/components/ui/floating-button\";\nimport { ThreeDotMenu } from \"@/components/ui/three-dot-menu\";\nimport { RoutineModal } from \"@/components/modals/routine-modal\";\nimport { RoutineItem, InsertRoutineItem } from \"@shared/schema\";\nimport { getTodayString, calculatePerformance } from \"@/lib/date-utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function DailyRoutine() {\n  const [showRoutineModal, setShowRoutineModal] = useState(false);\n  const [editingRoutine, setEditingRoutine] = useState<RoutineItem | undefined>();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const today = getTodayString();\n\n  // Fetch routine items\n  const { data: morningRoutines = [] } = useQuery({\n    queryKey: [\"/api/routine-items\", \"morning\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/routine-items?type=morning\");\n      return response.json();\n    },\n  });\n\n  const { data: nightRoutines = [] } = useQuery({\n    queryKey: [\"/api/routine-items\", \"night\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/routine-items?type=night\");\n      return response.json();\n    },\n  });\n\n  // Get current day for weekly filtering\n  const currentDay = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();\n  \n  const { data: allWeeklyRoutines = [] } = useQuery({\n    queryKey: [\"/api/routine-items\", \"weekly\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/routine-items?type=weekly\");\n      return response.json();\n    },\n  });\n  \n  // Filter weekly routines to show only current day tasks\n  const weeklyRoutines = allWeeklyRoutines.filter((r: RoutineItem) => \n    r.days && r.days.includes(currentDay as any)\n  );\n\n  // Note: Skincare routine initialization removed - server handles all sample data\n\n  // Note: Server-side initialization now handles sample data, so client-side initialization is disabled\n\n  // Create routine mutation\n  const createRoutineMutation = useMutation({\n    mutationFn: async (newRoutine: InsertRoutineItem) => {\n      const response = await apiRequest(\"POST\", \"/api/routine-items\", newRoutine);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/routine-items\"] });\n      toast({ title: \"Routine created successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create routine\", variant: \"destructive\" });\n    },\n  });\n\n  // Update routine mutation\n  const updateRoutineMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<RoutineItem> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/routine-items/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/routine-items\"] });\n      toast({ title: \"Routine updated successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update routine\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete routine mutation\n  const deleteRoutineMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/routine-items/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/routine-items\"] });\n      toast({ title: \"Routine deleted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete routine\", variant: \"destructive\" });\n    },\n  });\n\n  // Calculate completion rates\n  const allRoutines = [...morningRoutines, ...nightRoutines, ...weeklyRoutines];\n  const completedRoutines = allRoutines.filter((routine: RoutineItem) => routine.completed).length;\n  const overallCompletionRate = calculatePerformance(completedRoutines, allRoutines.length);\n\n  const completedMorning = morningRoutines.filter((r: RoutineItem) => r.completed).length;\n  const morningCompletionRate = calculatePerformance(completedMorning, morningRoutines.length);\n\n  const completedNight = nightRoutines.filter((r: RoutineItem) => r.completed).length;\n  const nightCompletionRate = calculatePerformance(completedNight, nightRoutines.length);\n\n  const completedWeekly = weeklyRoutines.filter((r: RoutineItem) => r.completed).length;\n  const weeklyCompletionRate = calculatePerformance(completedWeekly, weeklyRoutines.length);\n\n  const handleRoutineToggle = (routine: RoutineItem) => {\n    updateRoutineMutation.mutate({\n      id: routine.id,\n      updates: { completed: !routine.completed }\n    });\n  };\n\n  const handleEditRoutine = (routine: RoutineItem) => {\n    setEditingRoutine(routine);\n    setShowRoutineModal(true);\n  };\n\n  const handleDeleteRoutine = (routineId: string) => {\n    if (confirm(\"Are you sure you want to delete this routine?\")) {\n      deleteRoutineMutation.mutate(routineId);\n    }\n  };\n\n  const handleSaveRoutine = (routineData: InsertRoutineItem) => {\n    if (editingRoutine) {\n      updateRoutineMutation.mutate({\n        id: editingRoutine.id,\n        updates: routineData\n      });\n    } else {\n      createRoutineMutation.mutate(routineData);\n    }\n    setEditingRoutine(undefined);\n  };\n\n  const RoutineSection = ({ \n    title, \n    icon, \n    routines, \n    emptyMessage \n  }: { \n    title: string; \n    icon: string; \n    routines: RoutineItem[]; \n    emptyMessage: string;\n  }) => (\n    <Card className=\"premium-card relative overflow-hidden\">\n      <div className=\"absolute top-0 right-0 w-24 h-24 bg-gradient-to-bl from-primary/5 to-transparent rounded-bl-full\"></div>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-3 text-2xl text-gradient-primary\">\n          <span className=\"text-3xl\">{icon}</span>\n          <span>{title}</span>\n          <span className=\"bg-gradient-to-r from-primary/20 to-accent/20 text-primary dark:text-accent text-sm font-bold px-3 py-1 rounded-full\">\n            {routines.length} activities\n          </span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {routines.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-primary/10 to-accent/10 rounded-2xl flex items-center justify-center\">\n              <span className=\"text-4xl\">{icon}</span>\n            </div>\n            <p className=\"text-lg text-gray-600 dark:text-gray-400 font-medium\">{emptyMessage.split('.')[0]}</p>\n            <p className=\"text-sm text-gray-500 dark:text-gray-500 mt-2\">Click the + button to add your first activity!</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {routines.map((routine: RoutineItem) => (\n              <div\n                key={routine.id}\n                className=\"routine-item premium-card p-3 sm:p-4 lg:p-6 hover:shadow-lg transition-all duration-300 group relative overflow-hidden\"\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-accent/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-4 lg:gap-6 relative z-10\">\n                  <div className=\"flex items-center space-x-3 sm:space-x-4 flex-1 w-full\">\n                    <Checkbox\n                      checked={routine.completed}\n                      onCheckedChange={() => handleRoutineToggle(routine)}\n                      className=\"w-5 h-5 sm:w-6 sm:h-6 border-2 border-primary/30 data-[state=checked]:bg-gradient-to-br data-[state=checked]:from-primary data-[state=checked]:to-accent mt-1 sm:mt-0\"\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <div className={`text-sm sm:text-base lg:text-lg font-semibold ${routine.completed ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-900 dark:text-white'} transition-colors mb-1 sm:mb-2`}>\n                        {routine.name}\n                      </div>\n                      <div className=\"flex flex-wrap items-center gap-2 sm:gap-3 text-xs sm:text-sm text-gray-600 dark:text-gray-400 font-medium\">\n                        <span className=\"bg-gradient-to-r from-primary/20 to-accent/20 text-primary dark:text-accent px-2 py-1 rounded-lg font-bold\">\n                          ⏰ {routine.time}\n                        </span>\n                        <span className=\"bg-gradient-to-r from-secondary/20 to-accent/20 text-secondary dark:text-accent px-2 py-1 rounded-lg font-bold\">\n                          ⏱️ {routine.duration} min\n                        </span>\n                        {routine.days && routine.days.length > 0 && (\n                          <div className=\"flex flex-wrap gap-1\">\n                            {routine.days.map((day) => (\n                              <Badge key={day} className=\"bg-gradient-to-r from-gray-500 to-slate-600 text-white text-xs font-semibold px-1.5 py-0.5 sm:px-2 sm:py-1\">\n                                {day.charAt(0).toUpperCase() + day.slice(1, 3)}\n                              </Badge>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2 sm:space-x-3 self-end sm:self-center\">\n                    <Badge className={routine.completed \n                      ? \"bg-gradient-to-r from-green-500 to-emerald-600 text-white shadow-lg border-0 font-semibold px-2 py-1 sm:px-3 sm:py-1.5 lg:px-4 lg:py-2 text-xs sm:text-sm\" \n                      : \"bg-gradient-to-r from-gray-500 to-slate-600 text-white shadow-lg border-0 font-semibold px-2 py-1 sm:px-3 sm:py-1.5 lg:px-4 lg:py-2 text-xs sm:text-sm\"\n                    }>\n                      {routine.completed ? \"✅ Done\" : \"⏸️ Pending\"}\n                    </Badge>\n                    <ThreeDotMenu\n                      onEdit={() => handleEditRoutine(routine)}\n                      onDelete={() => handleDeleteRoutine(routine.id)}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 py-4 sm:py-6 lg:py-12\">\n        {/* Header */}\n        <div className=\"mb-6 sm:mb-8 lg:mb-12 text-center\">\n          <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-2 sm:mb-4\">Daily Routine</h2>\n          <p className=\"text-sm sm:text-base lg:text-lg text-gray-600 dark:text-gray-300 max-w-3xl mx-auto px-4\">\n            Manage your morning, night, and weekly routines including skincare, haircare & hygiene\n          </p>\n        </div>\n\n        {/* Skincare & Diet Tips Section */}\n        <Card className=\"premium-card mb-6 sm:mb-8 lg:mb-12\">\n          <CardHeader>\n            <CardTitle className=\"text-lg sm:text-xl font-semibold flex items-center space-x-2 sm:space-x-3\">\n              <span className=\"text-xl sm:text-2xl\">✨</span>\n              <span>Skincare & Health Tips</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 lg:gap-8\">\n              {/* Diet Tips */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold text-green-600 dark:text-green-400 text-lg\">🥗 Foods for Glowing Skin & Strong Hair</h4>\n                <div className=\"space-y-3 text-sm\">\n                  <div><strong>Vitamin C:</strong> Orange, Lemon, Amla, Papaya, Tomato</div>\n                  <div><strong>Carotene:</strong> Carrots, Spinach, Sweet Potatoes</div>\n                  <div><strong>Collagen:</strong> Almonds, Walnuts, Coconut Water, Cucumber</div>\n                  <div><strong>Iron & Biotin:</strong> Spinach, Almonds, Walnuts, Eggs</div>\n                  <div><strong>Hydration:</strong> 3-4 liters of water daily</div>\n                </div>\n                <div className=\"bg-green-50 dark:bg-green-900/20 p-3 rounded-lg\">\n                  <p className=\"text-sm font-medium text-green-700 dark:text-green-300\">\n                    💪 Daily Hair Drink: Amla Juice or Coconut Water every morning\n                  </p>\n                </div>\n              </div>\n\n              {/* What to Avoid */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-semibold text-red-600 dark:text-red-400 text-lg\">❌ Avoid These</h4>\n                <div className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400\">\n                  <p>• Too much sugar & junk food (causes dull skin & hair fall)</p>\n                  <p>• Oily & fried food (clogs pores & weakens hair roots)</p>\n                  <p>• Excess caffeine - Switch to Green Tea instead</p>\n                </div>\n                <div className=\"bg-orange-50 dark:bg-orange-900/20 p-3 rounded-lg\">\n                  <p className=\"text-sm font-medium text-orange-700 dark:text-orange-300\">\n                    🔥 Expected Results: 2-4 weeks for glowing skin, no tan, fresh smell, thick hair\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Routine Completion Chart */}\n        <Card className=\"premium-card relative overflow-hidden mb-6 sm:mb-8 lg:mb-12\">\n          <div className=\"absolute top-0 left-0 w-20 h-20 sm:w-32 sm:h-32 lg:w-40 lg:h-40 bg-gradient-to-br from-accent/10 to-transparent rounded-br-full\"></div>\n          <CardHeader>\n            <CardTitle className=\"text-lg sm:text-xl lg:text-2xl text-gradient-primary\">🔁 Routine Completion</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4 sm:gap-6 md:gap-8 items-center\">\n              <div className=\"text-center\">\n                <div className=\"relative w-full max-w-[200px] mx-auto aspect-square\">\n                  <PieChart\n                    data={[overallCompletionRate, 100 - overallCompletionRate]}\n                    colors={['#EF4444', '#E2E8F0']}\n                  />\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <span className=\"text-lg sm:text-2xl lg:text-3xl font-black text-gradient-primary block\">{overallCompletionRate}%</span>\n                      <span className=\"text-xs text-gray-600 dark:text-gray-400\">Complete</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl sm:text-4xl lg:text-5xl font-black text-gradient-secondary mb-3 sm:mb-4\">{overallCompletionRate}%</div>\n                <div className=\"text-sm sm:text-base lg:text-lg font-semibold text-gray-700 dark:text-gray-300 mb-6 sm:mb-8\">Overall Completion Rate</div>\n                <div className=\"grid grid-cols-3 gap-2 sm:gap-3 lg:gap-4\">\n                  <div className=\"premium-card p-2 sm:p-3 lg:p-4\">\n                    <div className=\"text-lg sm:text-xl lg:text-2xl font-black text-gradient-primary mb-1\">{morningCompletionRate}%</div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-400 font-medium\">☀️ Morning</div>\n                  </div>\n                  <div className=\"premium-card p-2 sm:p-3 lg:p-4\">\n                    <div className=\"text-lg sm:text-xl lg:text-2xl font-black text-gradient-secondary mb-1\">{nightCompletionRate}%</div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-400 font-medium\">🌙 Night</div>\n                  </div>\n                  <div className=\"premium-card p-2 sm:p-3 lg:p-4\">\n                    <div className=\"text-lg sm:text-xl lg:text-2xl font-black text-gradient-primary mb-1\">{weeklyCompletionRate}%</div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-400 font-medium\">📆 Weekly</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Routine Sections */}\n        <div className=\"space-y-12\">\n          <RoutineSection\n            title=\"Morning Routine\"\n            icon=\"☀️\"\n            routines={morningRoutines}\n            emptyMessage=\"No morning routines set up. Click the + button to add your first morning activity!\"\n          />\n\n          <RoutineSection\n            title=\"Night Routine\"\n            icon=\"🌙\"\n            routines={nightRoutines}\n            emptyMessage=\"No night routines set up. Click the + button to add your first night activity!\"\n          />\n\n          <RoutineSection\n            title=\"Weekly Routine\"\n            icon=\"📆\"\n            routines={weeklyRoutines}\n            emptyMessage=\"No weekly routines set up. Click the + button to add your first weekly activity!\"\n          />\n        </div>\n\n        {/* Floating Add Button */}\n        <FloatingButton\n          onClick={() => {\n            setEditingRoutine(undefined);\n            setShowRoutineModal(true);\n          }}\n        />\n\n        {/* Routine Modal */}\n        <RoutineModal\n          open={showRoutineModal}\n          onOpenChange={setShowRoutineModal}\n          onSave={handleSaveRoutine}\n          routine={editingRoutine}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":17885},"client/src/pages/daily-task.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { PieChart } from \"@/components/charts/pie-chart\";\nimport { FloatingButton } from \"@/components/ui/floating-button\";\nimport { ThreeDotMenu } from \"@/components/ui/three-dot-menu\";\nimport { TaskModal } from \"@/components/modals/task-modal\";\nimport { Task, InsertTask } from \"@shared/schema\";\nimport { getTodayString, calculatePerformance } from \"@/lib/date-utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function DailyTask() {\n  const [showTaskModal, setShowTaskModal] = useState(false);\n  const [editingTask, setEditingTask] = useState<Task | undefined>();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const today = getTodayString();\n\n  // Fetch tasks for today\n  const { data: tasks = [] } = useQuery({\n    queryKey: [\"/api/tasks\", today],\n    queryFn: async () => {\n      const response = await fetch(`/api/tasks?date=${today}`);\n      return response.json();\n    },\n  });\n\n  // Fetch water intake for today\n  const { data: waterIntake = { date: today, amount: 0, goal: 2400 } } = useQuery({\n    queryKey: [\"/api/water-intake\", today],\n    queryFn: async () => {\n      const response = await fetch(`/api/water-intake?date=${today}`);\n      return response.json();\n    },\n  });\n\n  // Create task mutation\n  const createTaskMutation = useMutation({\n    mutationFn: async (newTask: InsertTask) => {\n      const response = await apiRequest(\"POST\", \"/api/tasks\", newTask);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"Task created successfully!\" });\n    },\n    onError: (error) => {\n      const errorMessage = error instanceof Error ? error.message : \"Failed to create task\";\n      toast({ \n        title: \"Failed to create task\", \n        description: errorMessage,\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Update task mutation\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Task> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/tasks/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"Task updated successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update task\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete task mutation\n  const deleteTaskMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/tasks/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"Task deleted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete task\", variant: \"destructive\" });\n    },\n  });\n\n  // Water intake mutation\n  const updateWaterMutation = useMutation({\n    mutationFn: async (amount: number) => {\n      const response = await apiRequest(\"POST\", \"/api/water-intake\", {\n        date: today,\n        amount,\n        goal: waterIntake.goal || 2400\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/water-intake\"] });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update water intake\", variant: \"destructive\" });\n    },\n  });\n\n  // Update streak mutation\n  const updateStreakMutation = useMutation({\n    mutationFn: async (updates: { current: number; highest: number }) => {\n      const response = await apiRequest(\"PATCH\", \"/api/streak\", updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/streak\"] });\n    },\n    onError: () => {\n      // Don't show error toast for streak updates to avoid spam\n    },\n  });\n\n  // Calculate completion rates\n  const completedTasks = tasks.filter((task: Task) => task.completed).length;\n  const taskCompletionRate = calculatePerformance(completedTasks, tasks.length);\n\n  const waterPercentage = waterIntake \n    ? calculatePerformance(waterIntake.amount, waterIntake.goal)\n    : 0;\n\n  // Water tracking functions\n  const addWater = (ml: number) => {\n    const newAmount = (waterIntake?.amount || 0) + ml;\n    updateWaterMutation.mutate(newAmount);\n  };\n\n  const removeWater = (ml: number) => {\n    const newAmount = Math.max(0, (waterIntake?.amount || 0) - ml);\n    updateWaterMutation.mutate(newAmount);\n  };\n\n  const glassesConsumed = Math.floor((waterIntake?.amount || 0) / 250); // 250ml per glass\n  const totalGlasses = Math.ceil((waterIntake?.goal || 2400) / 250);\n\n  const handleTaskToggle = (task: Task) => {\n    updateTaskMutation.mutate({\n      id: task.id,\n      updates: { \n        completed: !task.completed,\n        status: !task.completed ? \"completed\" : \"pending\"\n      }\n    });\n\n    // Update streak when completing a task\n    if (!task.completed) {\n      // Calculate new completion rate after this task is completed\n      const newCompletedCount = completedTasks + 1;\n      const newCompletionRate = calculatePerformance(newCompletedCount, tasks.length);\n      \n      // If completion rate reaches 100%, increment streak\n      if (newCompletionRate === 100) {\n        // For now, just increment by 1. In a real app, you'd have more complex logic\n        const newCurrent = 1; // This should be calculated based on previous days\n        const newHighest = Math.max(newCurrent, 1);\n        updateStreakMutation.mutate({ current: newCurrent, highest: newHighest });\n      }\n    }\n  };\n\n  const handleEditTask = (task: Task) => {\n    setEditingTask(task);\n    setShowTaskModal(true);\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    if (confirm(\"Are you sure you want to delete this task?\")) {\n      deleteTaskMutation.mutate(taskId);\n    }\n  };\n\n  const handleSaveTask = (taskData: InsertTask) => {\n    if (editingTask) {\n      updateTaskMutation.mutate({\n        id: editingTask.id,\n        updates: taskData\n      });\n    } else {\n      createTaskMutation.mutate(taskData);\n    }\n    setEditingTask(undefined);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      completed: \"bg-gradient-to-r from-green-500 to-emerald-600 text-white shadow-lg border-0 font-semibold px-2 py-1 sm:px-4 sm:py-2 text-xs sm:text-sm\",\n      \"in-progress\": \"bg-gradient-to-r from-yellow-500 to-orange-500 text-white shadow-lg border-0 font-semibold px-2 py-1 sm:px-4 sm:py-2 text-xs sm:text-sm\",\n      pending: \"bg-gradient-to-r from-gray-500 to-slate-600 text-white shadow-lg border-0 font-semibold px-2 py-1 sm:px-4 sm:py-2 text-xs sm:text-sm\"\n    };\n    \n    const labels = {\n      completed: \"✓ Completed\",\n      \"in-progress\": \"⏳ In Progress\", \n      pending: \"⏸️ Pending\"\n    };\n\n    return (\n      <Badge className={variants[status as keyof typeof variants] || variants.pending}>\n        {labels[status as keyof typeof labels] || \"⏸️ Pending\"}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 py-4 sm:py-6 lg:py-8\">\n        {/* Header */}\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"page-title text-gradient-primary\">Daily Tasks</h1>\n          <p className=\"text-sm sm:text-base text-gray-600 dark:text-gray-400\">Manage your daily tasks and track your progress</p>\n        </div>\n\n        {/* Top Charts */}\n        <div className=\"grid grid-cols-2 gap-3 sm:gap-4 md:gap-6 mb-6 sm:mb-8\">\n          {/* Task Completion Chart */}\n          <div className=\"card-clean\">\n            <h2 className=\"section-title text-sm sm:text-base\">📋 Tasks</h2>\n            <div className=\"h-32 sm:h-48 md:h-64\">\n              <PieChart\n                data={[taskCompletionRate, 100 - taskCompletionRate]}\n                colors={['#8B5DFF', '#E2E8F0']}\n              />\n            </div>\n            <div className=\"text-center mt-2 sm:mt-3 md:mt-4\">\n              <span className=\"text-lg sm:text-2xl md:text-3xl font-bold text-gradient-primary\">{taskCompletionRate}%</span>\n              <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400\">Completed</div>\n            </div>\n          </div>\n\n          {/* Water Intake Chart */}\n          <div className=\"card-clean\">\n            <h2 className=\"section-title text-sm sm:text-base\">💧 Water</h2>\n            <div className=\"h-32 sm:h-48 md:h-64\">\n              <PieChart\n                data={[waterPercentage, 100 - waterPercentage]}\n                colors={['#22C55E', '#E2E8F0']}\n              />\n            </div>\n            <div className=\"text-center mt-2 sm:mt-3 md:mt-4\">\n              <span className=\"text-lg sm:text-2xl md:text-3xl font-bold text-gradient-secondary\">{waterPercentage}%</span>\n              <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400\">\n                of {waterIntake?.goal || 2400}ml\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Water Tracker */}\n        <div className=\"card-clean mb-6 sm:mb-8\">\n          <h2 className=\"section-title\">💧 Water Tracker</h2>\n          \n          {/* Current Status */}\n          <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4 sm:gap-6 mb-6\">\n            <div className=\"text-center sm:text-left\">\n              <div className=\"text-2xl sm:text-3xl font-bold text-gradient-secondary mb-2\">\n                {waterIntake?.amount || 0}ml / {waterIntake?.goal || 2400}ml\n              </div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {glassesConsumed} of {totalGlasses} glasses (250ml each)\n              </div>\n            </div>\n            \n            {/* Progress Bar */}\n            <div className=\"w-full sm:w-64\">\n              <div className=\"bg-gray-200 dark:bg-gray-700 rounded-full h-3 sm:h-4 overflow-hidden\">\n                <div \n                  className=\"bg-gradient-to-r from-blue-400 to-cyan-500 h-full transition-all duration-500 ease-out\"\n                  style={{ width: `${Math.min(100, waterPercentage)}%` }}\n                ></div>\n              </div>\n              <div className=\"text-xs text-center mt-1 text-gray-500\">\n                {waterPercentage >= 100 ? \"🎉 Goal Reached!\" : `${100 - waterPercentage}% to go`}\n              </div>\n            </div>\n          </div>\n\n          {/* Glass Visualization */}\n          <div className=\"flex flex-wrap justify-center items-center gap-2 mb-6\">\n            {Array.from({ length: totalGlasses }, (_, i) => (\n              <div\n                key={i}\n                className={`w-8 h-10 sm:w-10 sm:h-12 border-2 rounded-b-lg flex items-end justify-center text-xs font-bold transition-all duration-300 ${\n                  i < glassesConsumed\n                    ? 'border-blue-400 bg-gradient-to-t from-blue-200 to-blue-100 dark:from-blue-600 dark:to-blue-400 text-blue-700'\n                    : 'border-gray-300 dark:border-gray-600 bg-transparent text-gray-400'\n                }`}\n              >\n                {i < glassesConsumed ? '💧' : ''}\n              </div>\n            ))}\n          </div>\n\n          {/* Quick Add Buttons */}\n          <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-2 sm:gap-3 mb-4\">\n            <button\n              onClick={() => addWater(250)}\n              className=\"bg-gradient-to-r from-blue-500 to-cyan-500 hover:from-blue-600 hover:to-cyan-600 text-white font-semibold px-3 py-2 sm:px-4 sm:py-3 rounded-lg shadow-lg transition-all duration-200 text-xs sm:text-sm\"\n              disabled={updateWaterMutation.isPending}\n            >\n              +1 Glass\n              <div className=\"text-xs opacity-80\">(250ml)</div>\n            </button>\n            \n            <button\n              onClick={() => addWater(500)}\n              className=\"bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 text-white font-semibold px-3 py-2 sm:px-4 sm:py-3 rounded-lg shadow-lg transition-all duration-200 text-xs sm:text-sm\"\n              disabled={updateWaterMutation.isPending}\n            >\n              +1 Bottle\n              <div className=\"text-xs opacity-80\">(500ml)</div>\n            </button>\n            \n            <button\n              onClick={() => addWater(1000)}\n              className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-semibold px-3 py-2 sm:px-4 sm:py-3 rounded-lg shadow-lg transition-all duration-200 text-xs sm:text-sm\"\n              disabled={updateWaterMutation.isPending}\n            >\n              +Big Bottle\n              <div className=\"text-xs opacity-80\">(1000ml)</div>\n            </button>\n            \n            <button\n              onClick={() => removeWater(250)}\n              className=\"bg-gradient-to-r from-red-500 to-orange-500 hover:from-red-600 hover:to-orange-600 text-white font-semibold px-3 py-2 sm:px-4 sm:py-3 rounded-lg shadow-lg transition-all duration-200 text-xs sm:text-sm\"\n              disabled={updateWaterMutation.isPending || (waterIntake?.amount || 0) === 0}\n            >\n              -1 Glass\n              <div className=\"text-xs opacity-80\">(250ml)</div>\n            </button>\n          </div>\n\n          {/* Motivational Messages */}\n          <div className=\"text-center\">\n            {waterPercentage >= 100 && (\n              <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border border-green-200 dark:border-green-700/50 rounded-lg p-3 sm:p-4\">\n                <div className=\"text-green-700 dark:text-green-300 font-semibold text-sm sm:text-base\">\n                  🎉 Excellent! You've reached your daily water goal!\n                </div>\n                <div className=\"text-green-600 dark:text-green-400 text-xs sm:text-sm mt-1\">\n                  Great job staying hydrated! Your body thanks you.\n                </div>\n              </div>\n            )}\n            \n            {waterPercentage >= 75 && waterPercentage < 100 && (\n              <div className=\"bg-gradient-to-r from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 border border-blue-200 dark:border-blue-700/50 rounded-lg p-3 sm:p-4\">\n                <div className=\"text-blue-700 dark:text-blue-300 font-semibold text-sm sm:text-base\">\n                  💪 Almost there! Just {(waterIntake?.goal || 2400) - (waterIntake?.amount || 0)}ml to go!\n                </div>\n              </div>\n            )}\n            \n            {waterPercentage < 50 && (\n              <div className=\"bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border border-yellow-200 dark:border-yellow-700/50 rounded-lg p-3 sm:p-4\">\n                <div className=\"text-yellow-700 dark:text-yellow-300 font-semibold text-sm sm:text-base\">\n                  💧 Stay hydrated! Remember to drink water regularly throughout the day.\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Tasks List */}\n        <div className=\"card-clean\">\n          <h2 className=\"section-title\">✅ Today's Tasks</h2>\n          {tasks.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-4xl mb-4\">📝</div>\n              <p className=\"text-gray-600 dark:text-gray-400\">No tasks for today</p>\n              <p className=\"text-sm text-gray-500 dark:text-gray-500 mt-2\">Click the + button to add your first task!</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {tasks.map((task: Task) => (\n                <div\n                  key={task.id}\n                  className=\"item-clean\"\n                >\n                  <div className=\"flex items-start sm:items-center flex-col sm:flex-row gap-3 sm:gap-0 sm:justify-between\">\n                    <div className=\"flex items-center space-x-3 sm:space-x-4 flex-1 w-full\">\n                      <Checkbox\n                        checked={task.completed}\n                        onCheckedChange={() => handleTaskToggle(task)}\n                        className=\"w-5 h-5 sm:w-5 sm:h-5 mt-1 sm:mt-0\"\n                      />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className={`text-sm sm:text-base font-medium ${task.completed ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-900 dark:text-white'}`}>\n                          {task.title}\n                        </div>\n                        {task.time && (\n                          <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                            ⏰ {task.time}\n                            {task.duration && ` • ⏱️ ${task.duration} min`}\n                          </div>\n                        )}\n                        {task.description && (\n                          <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                            {task.description}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2 sm:space-x-3 self-end sm:self-center\">\n                      {getStatusBadge(task.status)}\n                      <ThreeDotMenu\n                        onEdit={() => handleEditTask(task)}\n                        onDelete={() => handleDeleteTask(task.id)}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Floating Add Button */}\n        <FloatingButton\n          onClick={() => {\n            setEditingTask(undefined);\n            setShowTaskModal(true);\n          }}\n        />\n\n        {/* Task Modal */}\n        <TaskModal\n          open={showTaskModal}\n          onOpenChange={setShowTaskModal}\n          onSave={handleSaveTask}\n          task={editingTask}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":18447},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PieChart } from \"@/components/charts/pie-chart\";\nimport { BarChart } from \"@/components/charts/bar-chart\";\nimport { MonthlyCalendar } from \"@/components/calendar/monthly-calendar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useState } from \"react\";\nimport { getTodayString, calculatePerformance } from \"@/lib/date-utils\";\n\nexport default function Dashboard() {\n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  const [showPerformanceModal, setShowPerformanceModal] = useState(false);\n\n  // Fetch data for today\n  const today = getTodayString();\n\n  const { data: tasks = [] } = useQuery({\n    queryKey: [\"/api/tasks\", today],\n    queryFn: async () => {\n      const response = await fetch(`/api/tasks?date=${today}`);\n      return response.json();\n    },\n  });\n\n  const { data: dailyExercises = [] } = useQuery({\n    queryKey: [\"/api/exercises\", today, false],\n    queryFn: async () => {\n      const response = await fetch(`/api/exercises?date=${today}&isWeekly=false`);\n      return response.json();\n    },\n  });\n\n  const { data: weeklyExercises = [] } = useQuery({\n    queryKey: [\"/api/exercises\", \"weekly\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/exercises?isWeekly=true\");\n      return response.json();\n    },\n  });\n\n  const { data: mindActivities = [] } = useQuery({\n    queryKey: [\"/api/mind-activities\", today],\n    queryFn: async () => {\n      const response = await fetch(`/api/mind-activities?date=${today}`);\n      return response.json();\n    },\n  });\n\n  const { data: routineItems = [] } = useQuery({\n    queryKey: [\"/api/routine-items\", today],\n    queryFn: async () => {\n      const response = await fetch(`/api/routine-items?date=${today}`);\n      return response.json();\n    },\n  });\n\n  const { data: weeklyGoals = [] } = useQuery({\n    queryKey: [\"/api/goals\", \"weekly\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/goals?type=weekly\");\n      return response.json();\n    },\n  });\n\n  const { data: monthlyGoals = [] } = useQuery({\n    queryKey: [\"/api/goals\", \"monthly\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/goals?type=monthly\");\n      return response.json();\n    },\n  });\n\n  const { data: yearlyGoals = [] } = useQuery({\n    queryKey: [\"/api/goals\", \"yearly\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/goals?type=yearly\");\n      return response.json();\n    },\n  });\n\n  const { data: streak = { current: 0, highest: 0 } } = useQuery({\n    queryKey: [\"/api/streak\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/streak\");\n      return response.json();\n    },\n  });\n\n  const { data: performanceData = [] } = useQuery({\n    queryKey: [\"/api/performance\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/performance\");\n      return response.json();\n    },\n  });\n\n  // Calculate today's performance\n  const completedTasks = tasks.filter((task: any) => task.completed).length;\n  const taskPerformance = calculatePerformance(completedTasks, tasks.length);\n\n  // Combine daily and today's weekly exercises for workout performance\n  const getCurrentDayName = () => {\n    const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    return days[new Date().getDay()];\n  };\n  \n  const currentDayName = getCurrentDayName();\n  const todayWeeklyExercises = weeklyExercises.filter((ex: any) => ex.day === currentDayName);\n  const allTodayExercises = [...dailyExercises, ...todayWeeklyExercises];\n  \n  const completedExercises = allTodayExercises.filter((ex: any) => ex.completed).length;\n  const workoutPerformance = calculatePerformance(completedExercises, allTodayExercises.length);\n\n  // Handle mindset performance with default activities\n  const getStoredMindActivityStates = () => {\n    const stored = localStorage.getItem(`mindActivityStates_${today}`);\n    return stored ? JSON.parse(stored) : {};\n  };\n\n  const defaultMindActivities = [\n    { id: \"default-1\", name: \"Morning Reflection & Goal Setting\", time: \"08:00\", completed: false },\n    { id: \"default-2\", name: \"Creative Problem Solving Session\", time: \"11:00\", completed: false },\n    { id: \"default-3\", name: \"Afternoon Mindfulness Break\", time: \"15:00\", completed: false },\n    { id: \"default-4\", name: \"Learning & Skill Development\", time: \"18:00\", completed: false },\n    { id: \"default-5\", name: \"Evening Reflection & Tomorrow Planning\", time: \"21:00\", completed: false }\n  ];\n\n  const displayMindActivities = mindActivities.length > 0 ? mindActivities : \n    defaultMindActivities.map(activity => ({\n      ...activity,\n      completed: getStoredMindActivityStates()[activity.id] || false\n    }));\n\n  const completedMindActivities = displayMindActivities.filter((act: any) => act.completed).length;\n  const mindPerformance = calculatePerformance(completedMindActivities, displayMindActivities.length);\n\n  const completedRoutines = routineItems.filter((item: any) => item.completed).length;\n  const routinePerformance = calculatePerformance(completedRoutines, routineItems.length);\n\n  // Filter weekly goals for current week only\n  const getCurrentWeekStart = () => {\n    const today = new Date();\n    const currentWeekStart = new Date(today.setDate(today.getDate() - today.getDay()));\n    return currentWeekStart.toISOString().split('T')[0];\n  };\n  \n  const getCurrentWeekEnd = () => {\n    const today = new Date();\n    const currentWeekEnd = new Date(today.setDate(today.getDate() - today.getDay() + 6));\n    return currentWeekEnd.toISOString().split('T')[0];\n  };\n\n  const currentWeekStart = getCurrentWeekStart();\n  const currentWeekEnd = getCurrentWeekEnd();\n  \n  const currentWeekGoals = weeklyGoals.filter((goal: any) => {\n    const goalDate = goal.targetDate;\n    return goalDate >= currentWeekStart && goalDate <= currentWeekEnd;\n  });\n\n  const completedWeeklyGoals = currentWeekGoals.filter((goal: any) => goal.completed).length;\n  const devPerformance = calculatePerformance(completedWeeklyGoals, currentWeekGoals.length);\n\n  const todayPerformanceData = [taskPerformance, workoutPerformance, mindPerformance, routinePerformance];\n  const todayPerformanceLabels = ['Tasks', 'Workout', 'Mind', 'Routine'];\n\n  // Generate sample weekly data (in real app, this would come from API)\n  const weeklyData = [85, 78, 92, 85, 88, 76, 90];\n  const weeklyLabels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n\n  // Convert performance data for calendar\n  const calendarPerformanceData = performanceData.reduce((acc: any, perf: any) => {\n    acc[perf.date] = perf.overall;\n    return acc;\n  }, {});\n\n  const handleDateClick = (date: string) => {\n    setSelectedDate(date);\n    setShowPerformanceModal(true);\n  };\n\n  // Calculate totals for performance score calculation\n  const totalTasks = tasks.length;\n  const totalWorkouts = allTodayExercises.length;\n  const completedWorkouts = completedExercises;\n  const totalMindActivities = displayMindActivities.length;\n  const totalRoutines = routineItems.length;\n  const totalDevGoals = currentWeekGoals.length;\n  const completedDevGoals = completedWeeklyGoals;\n\n  // Helper function to calculate performance score for each category\n  const getPerformanceScore = (category: string) => {\n    switch (category) {\n      case \"Tasks\":\n        return totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\n      case \"Workout\":\n        return totalWorkouts > 0 ? Math.round((completedWorkouts / totalWorkouts) * 100) : 0;\n      case \"Mind\":\n        return totalMindActivities > 0 ? Math.round((completedMindActivities / totalMindActivities) * 100) : 0;\n      case \"Routine\":\n        return totalRoutines > 0 ? Math.round((completedRoutines / totalRoutines) * 100) : 0;\n      case \"Dev\":\n        return totalDevGoals > 0 ? Math.round((completedDevGoals / totalDevGoals) * 100) : 0;\n      default:\n        return 0;\n    }\n  };\n\n  const selectedDatePerformance = performanceData.find((p: any) => p.date === selectedDate);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 py-4 sm:py-6 lg:py-8\">\n        {/* Header */}\n        <div className=\"mb-6 sm:mb-8\">\n          <h1 className=\"page-title text-gradient-primary\">Dashboard</h1>\n          <p className=\"text-sm sm:text-base text-gray-600 dark:text-gray-400\">Track your overall progress and maintain your streaks</p>\n        </div>\n\n        {/* Top Section - Streaks and Performance */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          {/* Streak Cards */}\n          <div className=\"card-clean\">\n            <h2 className=\"section-title flex items-center\">\n              🔥 Streak Tracking\n            </h2>\n            <div className=\"grid grid-cols-2 gap-3 sm:gap-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl sm:text-3xl font-bold text-gradient-primary mb-1 sm:mb-2\">{streak.current}</div>\n                <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400\">Current Streak</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl sm:text-3xl font-bold text-gradient-secondary mb-1 sm:mb-2\">{streak.highest}</div>\n                <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400\">Highest Streak</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Today's Performance */}\n          <div className=\"card-clean\">\n            <h2 className=\"section-title\">📊 Today's Performance</h2>\n            <div className=\"grid grid-cols-2 sm:grid-cols-5 gap-3 sm:gap-4\">\n              {[\"Tasks\", \"Workout\", \"Mind\", \"Routine\", \"Dev\"].map((category, index) => {\n                const percentage = getPerformanceScore(category);\n                return (\n                  <div key={category} className=\"text-center\">\n                    <div className=\"text-lg sm:text-2xl font-bold text-gradient-primary mb-1\">{percentage}%</div>\n                    <div className=\"text-xs text-gray-600 dark:text-gray-400\">{category}</div>\n                    <div className=\"progress-clean h-2 mt-1 sm:mt-2\">\n                      <div \n                        className=\"progress-fill h-full\"\n                        style={{ width: `${percentage}%` }}\n                      />\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        {/* Charts Section */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          <div className=\"card-clean\">\n            <h2 className=\"section-title\">Today's Progress</h2>\n            <div className=\"h-64 sm:h-80\">\n              <BarChart\n                data={todayPerformanceData}\n                labels={todayPerformanceLabels}\n                colors={['#8B5DFF', '#22C55E', '#3B82F6', '#EF4444', '#F59E0B']}\n              />\n            </div>\n          </div>\n          <div className=\"card-clean\">\n            <h2 className=\"section-title\">Weekly Trend</h2>\n            <div className=\"h-64 sm:h-80\">\n              <BarChart\n                data={weeklyData}\n                labels={weeklyLabels}\n                type=\"line\"\n                colors={['#8B5DFF']}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Monthly Calendar */}\n        <div className=\"mb-6 sm:mb-8\">\n          <div className=\"card-clean\">\n            <h2 className=\"section-title\">📅 Monthly Progress</h2>\n            <MonthlyCalendar \n              performanceData={calendarPerformanceData}\n              onDateClick={handleDateClick}\n            />\n          </div>\n        </div>\n\n        {/* Development Progress */}\n        <div className=\"card-clean\">\n          <h2 className=\"section-title\">💻 Development Progress</h2>\n          <div className=\"space-y-4\">\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Weekly Goal</span>\n                <span className=\"text-sm font-semibold text-gradient-primary\">{devPerformance}%</span>\n              </div>\n              <div className=\"progress-clean h-3\">\n                <div \n                  className=\"progress-fill h-full\" \n                  style={{ width: `${devPerformance}%` }}\n                />\n              </div>\n            </div>\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Monthly Goal</span>\n                <span className=\"text-sm font-semibold text-gradient-secondary\">67%</span>\n              </div>\n              <div className=\"progress-clean h-3\">\n                <div \n                  className=\"h-full bg-gradient-to-r from-yellow-500 to-yellow-600\"\n                  style={{ width: '67%' }}\n                />\n              </div>\n            </div>\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Yearly Goal</span>\n                <span className=\"text-sm font-semibold text-blue-500\">42%</span>\n              </div>\n              <div className=\"progress-clean h-3\">\n                <div \n                  className=\"h-full bg-gradient-to-r from-blue-500 to-blue-600\"\n                  style={{ width: '42%' }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Performance Breakdown Modal */}\n        <Dialog open={showPerformanceModal} onOpenChange={setShowPerformanceModal}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Performance Breakdown</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold\">Performance for {selectedDate}</h4>\n              {selectedDatePerformance ? (\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Tasks</span>\n                    <span className=\"font-medium\">{selectedDatePerformance.tasks}%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Workout</span>\n                    <span className=\"font-medium\">{selectedDatePerformance.workout}%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Mind Workout</span>\n                    <span className=\"font-medium\">{selectedDatePerformance.mindWorkout}%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Routine</span>\n                    <span className=\"font-medium\">{selectedDatePerformance.routine}%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Development</span>\n                    <span className=\"font-medium\">{selectedDatePerformance.dev}%</span>\n                  </div>\n                  <div className=\"border-t pt-2 mt-2\">\n                    <div className=\"flex justify-between font-semibold\">\n                      <span>Overall</span>\n                      <span>{selectedDatePerformance.overall}%</span>\n                    </div>\n                  </div>\n                </div>\n              ) : (\n                <p className=\"text-gray-600 dark:text-gray-400\">No data available for this date.</p>\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15949},"client/src/pages/dev-tracker.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { FloatingButton } from \"@/components/ui/floating-button\";\nimport { ThreeDotMenu } from \"@/components/ui/three-dot-menu\";\nimport { GoalModal } from \"@/components/modals/goal-modal\";\nimport { Goal, InsertGoal } from \"@shared/schema\";\nimport { calculatePerformance } from \"@/lib/date-utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\n\nexport default function DevTracker() {\n  const [showGoalModal, setShowGoalModal] = useState(false);\n  const [editingGoal, setEditingGoal] = useState<Goal | undefined>();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch all goals first, then filter for current week/month\n  const { data: allGoals = [] } = useQuery({\n    queryKey: [\"/api/goals\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/goals\");\n      return response.json();\n    },\n  });\n\n  // Filter goals by type\n  const weeklyGoals = allGoals.filter((goal: Goal) => goal.type === \"weekly\");\n  const monthlyGoals = allGoals.filter((goal: Goal) => goal.type === \"monthly\");\n  const yearlyGoals = allGoals.filter((goal: Goal) => goal.type === \"yearly\");\n\n  // Create goal mutation\n  const createGoalMutation = useMutation({\n    mutationFn: async (newGoal: InsertGoal) => {\n      const response = await apiRequest(\"POST\", \"/api/goals\", newGoal);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      toast({ title: \"Goal created successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create goal\", variant: \"destructive\" });\n    },\n  });\n\n  // Update goal mutation\n  const updateGoalMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Goal> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/goals/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      toast({ title: \"Goal updated successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update goal\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete goal mutation\n  const deleteGoalMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/goals/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      toast({ title: \"Goal deleted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete goal\", variant: \"destructive\" });\n    },\n  });\n\n  // Initialize development goals based on your roadmap\n  const initializeDevGoals = useMutation({\n    mutationFn: async () => {\n      const getWeekStart = (weeksFromNow: number) => {\n        const today = new Date();\n        const thisWeekStart = new Date(today.setDate(today.getDate() - today.getDay()));\n        const weekStart = new Date(thisWeekStart);\n        weekStart.setDate(thisWeekStart.getDate() + (weeksFromNow * 7));\n        return weekStart.toISOString().split('T')[0];\n      };\n\n      const getMonthEnd = (monthsFromNow: number) => {\n        const today = new Date();\n        // For April (0), May (1), June (2), July (3), August (4)\n        // We want to get the end of the target month, not months from today\n        const baseMonth = 3; // April is month 3 (0-indexed)\n        const targetMonth = new Date(2025, baseMonth + monthsFromNow + 1, 0);\n        return targetMonth.toISOString().split('T')[0];\n      };\n\n      const devGoals: InsertGoal[] = [\n        // Yearly Goals (2025-2030 Roadmap)\n        {\n          title: \"2025: Hit ₹60K/month as Full-Stack Developer\",\n          description: \"Master HTML, CSS, JS, React, Node.js, MongoDB. Build real-world projects, GitHub presence, freelance ₹60K-₹1L/month\",\n          type: \"yearly\",\n          targetDate: \"2025-12-31\",\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"2026: ₹1L-₹2L/month Income + Recognition\",\n          description: \"TypeScript, Next.js, PostgreSQL, GraphQL, Docker. Freelance portfolio, paid SaaS, weekly content, open source contributions\",\n          type: \"yearly\",\n          targetDate: \"2026-12-31\",\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"2027: 6-Figure Year (₹1 Cr Club)\",\n          description: \"Break ₹8L-₹10L/month via remote job, micro-SaaS, or freelancing+YouTube. 20K+ GitHub stars, 50K+ audience\",\n          type: \"yearly\",\n          targetDate: \"2027-12-31\",\n          completed: false,\n          progress: 0,\n        },\n\n        // Monthly Goals for 2025\n        {\n          title: \"April 2025 - Foundation & Setup\",\n          description: \"Master JavaScript (promises, async/await, array methods), Learn React.js basics to hooks, Start Node.js + Express, Build portfolio, Setup GitHub/LinkedIn/resume\",\n          type: \"monthly\",\n          targetDate: getMonthEnd(0),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"May 2025 - Full Stack Fundamentals\", \n          description: \"Deep dive React + Express.js, Learn MongoDB with Mongoose, Build 2 full-stack projects, Start blogs + LinkedIn posts, Master Postman + Git\",\n          type: \"monthly\",\n          targetDate: getMonthEnd(1),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"June 2025 - Real World Projects\",\n          description: \"Make 2 major real-world projects, Use JWT authentication, Role-based dashboards (Admin/User), Host on Vercel/Render, Start Upwork/Freelancer profiles\",\n          type: \"monthly\",\n          targetDate: getMonthEnd(2),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"July 2025 - Freelancing + Interviews\",\n          description: \"Get small freelance gigs (₹2-10k), Apply to internships, Practice coding interviews (DSA), Create payment project (Razorpay), Start cold emailing startups\",\n          type: \"monthly\",\n          targetDate: getMonthEnd(3),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"August 2025 - Advanced Development & Job Search\",\n          description: \"Master advanced React concepts, Build complex full-stack projects, Start applying to jobs, Get first paid freelance project, Improve DSA skills\",\n          type: \"monthly\",\n          targetDate: getMonthEnd(4),\n          completed: false,\n          progress: 0,\n        },\n\n        // August 2025 Weekly Goals (Current Month)\n        {\n          title: \"Week 1: Advanced JavaScript Mastery\",\n          description: \"3 Days: Deep dive promises, async/await, array methods, closures. 2 Days: Build calculator + todo app. 1 Day: GitHub pushes + LinkedIn post. 1 Day: Practice DSA problems.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(0),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"Week 2: React.js Foundation\",\n          description: \"3 Days: Components, props, state, hooks, event handling. 2 Days: Build weather app + portfolio site. 1 Day: Deploy to Vercel + write blog. 1 Day: Review + UI/UX study.\",\n          type: \"weekly\", \n          targetDate: getWeekStart(1),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"Week 3: Node.js & Backend Setup\", \n          description: \"3 Days: Node.js, Express, middleware, routing. 2 Days: Build REST API with CRUD operations. 1 Day: Connect to MongoDB + test with Postman. 1 Day: Git workflow practice.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(2),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"Week 4: Full-Stack Integration\",\n          description: \"3 Days: Connect React frontend to Node backend. 2 Days: Add authentication (JWT), user registration/login. 1 Day: Deploy full-stack app. 1 Day: Portfolio update + networking.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(3),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"Week 4: Portfolio Website\",\n          description: \"Build personal portfolio with React. Deploy on Vercel. Setup GitHub profile.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(3),\n          completed: false,\n          progress: 0,\n        },\n\n        // Next Month Weekly Goals (May 2025)\n        {\n          title: \"Week 5: React Hooks & State\",\n          description: \"Master useState, useEffect, custom hooks. Build 2 interactive apps.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(4),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"Week 6: Backend + Database\",\n          description: \"Learn MongoDB, Mongoose. Build full-stack app with database connection.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(5),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"Week 7: Authentication System\",\n          description: \"Implement JWT auth, user login/signup. Add role-based access control.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(6),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"Week 8: First Full-Stack Project\",\n          description: \"Build complete task management app. Deploy frontend and backend.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(7),\n          completed: false,\n          progress: 0,\n        },\n\n        // June 2025 Goals\n        {\n          title: \"Week 9: E-commerce Project Start\",\n          description: \"Plan and start building e-commerce site. Setup product catalog and cart.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(8),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"Week 10: Payment Integration\",\n          description: \"Add Razorpay payment gateway. Implement order management system.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(9),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"Week 11: Admin Dashboard\",\n          description: \"Build admin panel with charts, user management, order tracking.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(10),\n          completed: false,\n          progress: 0,\n        },\n        {\n          title: \"Week 12: Freelance Platform Setup\",\n          description: \"Create Upwork/Freelancer profiles. Apply to 10 small projects. Start networking.\",\n          type: \"weekly\",\n          targetDate: getWeekStart(11),\n          completed: false,\n          progress: 0,\n        },\n      ];\n\n      const promises = devGoals.map(goal => \n        apiRequest(\"POST\", \"/api/goals\", goal)\n      );\n      await Promise.all(promises);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      toast({ title: \"Development roadmap goals added successfully! 🚀\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to initialize goals\", variant: \"destructive\" });\n    },\n  });\n\n  // Clear duplicate goals mutation\n  const clearDuplicateGoals = useMutation({\n    mutationFn: async () => {\n      // Get all goals first\n      const weeklyResponse = await fetch(\"/api/goals?type=weekly\");\n      const monthlyResponse = await fetch(\"/api/goals?type=monthly\");\n      const yearlyResponse = await fetch(\"/api/goals?type=yearly\");\n      \n      const allWeeklyGoals = await weeklyResponse.json();\n      const allMonthlyGoals = await monthlyResponse.json();\n      const allYearlyGoals = await yearlyResponse.json();\n      \n      const allGoals = [...allWeeklyGoals, ...allMonthlyGoals, ...allYearlyGoals];\n      \n      // Find duplicates by title\n      const titleCounts: Record<string, Goal[]> = {};\n      allGoals.forEach((goal: Goal) => {\n        if (!titleCounts[goal.title]) {\n          titleCounts[goal.title] = [];\n        }\n        titleCounts[goal.title].push(goal);\n      });\n      \n      // Delete all but the first occurrence of each duplicate\n      const deletePromises: Promise<any>[] = [];\n      Object.values(titleCounts).forEach((duplicates) => {\n        if (duplicates.length > 1) {\n          // Keep the first, delete the rest\n          for (let i = 1; i < duplicates.length; i++) {\n            deletePromises.push(apiRequest(\"DELETE\", `/api/goals/${duplicates[i].id}`));\n          }\n        }\n      });\n      \n      if (deletePromises.length > 0) {\n        await Promise.all(deletePromises);\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      toast({ title: \"Duplicate goals cleaned up!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to clean duplicates\", variant: \"destructive\" });\n    },\n  });\n\n  // Note: Server-side initialization now handles sample data, so client-side initialization is disabled\n  // Cleanup duplicates if they exist (more than 10 total)\n  useEffect(() => {\n    const totalGoals = weeklyGoals.length + monthlyGoals.length + yearlyGoals.length;\n    \n    if (totalGoals > 10) {\n      clearDuplicateGoals.mutate();\n    }\n  }, [weeklyGoals.length, monthlyGoals.length, yearlyGoals.length]);\n\n  // Clear all goals mutation\n  const clearAllGoals = useMutation({\n    mutationFn: async () => {\n      const weeklyResponse = await fetch(\"/api/goals?type=weekly\");\n      const monthlyResponse = await fetch(\"/api/goals?type=monthly\");\n      const yearlyResponse = await fetch(\"/api/goals?type=yearly\");\n      \n      const allWeeklyGoals = await weeklyResponse.json();\n      const allMonthlyGoals = await monthlyResponse.json();\n      const allYearlyGoals = await yearlyResponse.json();\n      \n      const allGoals = [...allWeeklyGoals, ...allMonthlyGoals, ...allYearlyGoals];\n      \n      const deletePromises = allGoals.map((goal: Goal) => \n        apiRequest(\"DELETE\", `/api/goals/${goal.id}`)\n      );\n      \n      await Promise.all(deletePromises);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      localStorage.removeItem('devGoalsInitialized');\n      toast({ title: \"All goals cleared!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to clear goals\", variant: \"destructive\" });\n    },\n  });\n\n  // Manual reinitialize function for debugging\n  const handleReinitialize = () => {\n    clearAllGoals.mutate();\n  };\n\n  // Filter weekly goals for current week only\n  const getCurrentWeekStart = () => {\n    const today = new Date();\n    const currentWeekStart = new Date(today.setDate(today.getDate() - today.getDay()));\n    return currentWeekStart.toISOString().split('T')[0];\n  };\n  \n  const getCurrentWeekEnd = () => {\n    const today = new Date();\n    const currentWeekEnd = new Date(today.setDate(today.getDate() - today.getDay() + 6));\n    return currentWeekEnd.toISOString().split('T')[0];\n  };\n\n  const currentWeekStart = getCurrentWeekStart();\n  const currentWeekEnd = getCurrentWeekEnd();\n  \n  const currentWeeklyGoals = weeklyGoals.filter((goal: Goal) => {\n    const goalDate = goal.targetDate;\n    return goalDate >= currentWeekStart && goalDate <= currentWeekEnd;\n  });\n\n  // Filter monthly goals for current month only\n  const getCurrentMonthStart = () => {\n    const today = new Date();\n    return new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0];\n  };\n  \n  const getCurrentMonthEnd = () => {\n    const today = new Date();\n    return new Date(today.getFullYear(), today.getMonth() + 1, 0).toISOString().split('T')[0];\n  };\n\n  const currentMonthStart = getCurrentMonthStart();\n  const currentMonthEnd = getCurrentMonthEnd();\n  \n  const currentMonthlyGoals = monthlyGoals.filter((goal: Goal) => {\n    const goalDate = goal.targetDate;\n    const goalDateObj = new Date(goalDate);\n    const currentMonth = new Date().getMonth();\n    const currentYear = new Date().getFullYear();\n    \n    // Check if the goal's target date is in the current month and year\n    return goalDateObj.getMonth() === currentMonth && goalDateObj.getFullYear() === currentYear;\n  });\n\n  // Fetch daily performance data for progress calculation\n  const { data: tasks = [] } = useQuery({\n    queryKey: [\"/api/tasks\", format(new Date(), 'yyyy-MM-dd')],\n    queryFn: async () => {\n      const response = await fetch(`/api/tasks?date=${format(new Date(), 'yyyy-MM-dd')}`);\n      return response.json();\n    },\n  });\n\n  const { data: dailyExercises = [] } = useQuery({\n    queryKey: [\"/api/exercises\", format(new Date(), 'yyyy-MM-dd'), false],\n    queryFn: async () => {\n      const response = await fetch(`/api/exercises?date=${format(new Date(), 'yyyy-MM-dd')}&isWeekly=false`);\n      return response.json();\n    },\n  });\n\n  const { data: weeklyExercises = [] } = useQuery({\n    queryKey: [\"/api/exercises\", \"weekly\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/exercises?isWeekly=true\");\n      return response.json();\n    },\n  });\n\n  const { data: mindActivities = [] } = useQuery({\n    queryKey: [\"/api/mind-activities\", format(new Date(), 'yyyy-MM-dd')],\n    queryFn: async () => {\n      const response = await fetch(`/api/mind-activities?date=${format(new Date(), 'yyyy-MM-dd')}`);\n      return response.json();\n    },\n  });\n\n  const { data: routineItems = [] } = useQuery({\n    queryKey: [\"/api/routine-items\", format(new Date(), 'yyyy-MM-dd')],\n    queryFn: async () => {\n      const response = await fetch(`/api/routine-items?date=${format(new Date(), 'yyyy-MM-dd')}`);\n      return response.json();\n    },\n  });\n\n  // Calculate daily performance metrics\n  const calculateDailyPerformance = () => {\n    const completedTasks = tasks.filter((task: any) => task.completed).length;\n    const taskPerformance = calculatePerformance(completedTasks, tasks.length);\n\n    // Combine daily and today's weekly exercises\n    const getCurrentDayName = () => {\n      const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n      return days[new Date().getDay()];\n    };\n    \n    const currentDayName = getCurrentDayName();\n    const todayWeeklyExercises = weeklyExercises.filter((ex: any) => ex.day === currentDayName);\n    const allTodayExercises = [...dailyExercises, ...todayWeeklyExercises];\n    \n    const completedExercises = allTodayExercises.filter((ex: any) => ex.completed).length;\n    const workoutPerformance = calculatePerformance(completedExercises, allTodayExercises.length);\n\n    // Handle mindset performance with default activities\n    const getStoredMindActivityStates = () => {\n      const stored = localStorage.getItem(`mindActivityStates_${format(new Date(), 'yyyy-MM-dd')}`);\n      return stored ? JSON.parse(stored) : {};\n    };\n\n    const defaultMindActivities = [\n      { id: \"default-1\", name: \"Morning Reflection & Goal Setting\", time: \"08:00\", completed: false },\n      { id: \"default-2\", name: \"Creative Problem Solving Session\", time: \"11:00\", completed: false },\n      { id: \"default-3\", name: \"Afternoon Mindfulness Break\", time: \"15:00\", completed: false },\n      { id: \"default-4\", name: \"Learning & Skill Development\", time: \"18:00\", completed: false },\n      { id: \"default-5\", name: \"Evening Reflection & Tomorrow Planning\", time: \"21:00\", completed: false }\n    ];\n\n    const displayMindActivities = mindActivities.length > 0 ? mindActivities : \n      defaultMindActivities.map(activity => ({\n        ...activity,\n        completed: getStoredMindActivityStates()[activity.id] || false\n      }));\n\n    const completedMindActivities = displayMindActivities.filter((act: any) => act.completed).length;\n    const mindPerformance = calculatePerformance(completedMindActivities, displayMindActivities.length);\n\n    const completedRoutines = routineItems.filter((item: any) => item.completed).length;\n    const routinePerformance = calculatePerformance(completedRoutines, routineItems.length);\n\n    // Average of all daily performance metrics\n    const dailyMetrics = [taskPerformance, workoutPerformance, mindPerformance, routinePerformance];\n    const validMetrics = dailyMetrics.filter(metric => !isNaN(metric) && metric >= 0);\n    return validMetrics.length > 0 ? Math.round(validMetrics.reduce((a, b) => a + b, 0) / validMetrics.length) : 0;\n  };\n\n  const dailyPerformanceScore = calculateDailyPerformance();\n\n  // Calculate progress based on daily performance AND goal completion\n  const completedWeeklyGoals = currentWeeklyGoals.filter((goal: Goal) => goal.completed).length;\n  const weeklyGoalCompletion = calculatePerformance(completedWeeklyGoals, currentWeeklyGoals.length);\n  // Combine goal completion (70%) with daily performance (30%) for weekly progress\n  const weeklyProgress = Math.round((weeklyGoalCompletion * 0.7) + (dailyPerformanceScore * 0.3));\n\n  const completedMonthlyGoals = currentMonthlyGoals.filter((goal: Goal) => goal.completed).length;\n  const monthlyGoalCompletion = calculatePerformance(completedMonthlyGoals, currentMonthlyGoals.length);\n  // Combine goal completion (70%) with daily performance (30%) for monthly progress\n  const monthlyProgress = Math.round((monthlyGoalCompletion * 0.7) + (dailyPerformanceScore * 0.3));\n\n  const yearlyGoalProgress = yearlyGoals.length > 0 ? yearlyGoals[0].progress : 0;\n\n  const handleGoalToggle = (goal: Goal) => {\n    updateGoalMutation.mutate({\n      id: goal.id,\n      updates: { completed: !goal.completed }\n    });\n  };\n\n  const handleEditGoal = (goal: Goal) => {\n    setEditingGoal(goal);\n    setShowGoalModal(true);\n  };\n\n  const handleDeleteGoal = (goalId: string) => {\n    if (confirm(\"Are you sure you want to delete this goal?\")) {\n      deleteGoalMutation.mutate(goalId);\n    }\n  };\n\n  const handleSaveGoal = (goalData: InsertGoal) => {\n    if (editingGoal) {\n      updateGoalMutation.mutate({\n        id: editingGoal.id,\n        updates: goalData\n      });\n    } else {\n      createGoalMutation.mutate(goalData);\n    }\n    setEditingGoal(undefined);\n  };\n\n  const getStatusBadge = (goal: Goal) => {\n    if (goal.completed) {\n      return <Badge className=\"bg-gradient-to-r from-green-500 to-emerald-600 text-white shadow-lg border-0 font-semibold px-2 py-1 sm:px-3 sm:py-1.5 lg:px-4 lg:py-2 text-xs sm:text-sm\">✓ Done</Badge>;\n    }\n    if (goal.progress > 0) {\n      return <Badge className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white shadow-lg border-0 font-semibold px-2 py-1 sm:px-3 sm:py-1.5 lg:px-4 lg:py-2 text-xs sm:text-sm\">⏳ Progress</Badge>;\n    }\n    return <Badge className=\"bg-gradient-to-r from-gray-500 to-slate-600 text-white shadow-lg border-0 font-semibold px-2 py-1 sm:px-3 sm:py-1.5 lg:px-4 lg:py-2 text-xs sm:text-sm\">⏸️ Pending</Badge>;\n  };\n\n  const getCurrentWeekRange = () => {\n    const today = new Date();\n    const start = new Date(today);\n    start.setDate(today.getDate() - today.getDay());\n    const end = new Date(start);\n    end.setDate(start.getDate() + 6);\n    return `${format(start, 'MMM d')}-${format(end, 'd, yyyy')}`;\n  };\n\n  const getCurrentMonth = () => {\n    return format(new Date(), 'MMMM yyyy');\n  };\n\n  const getCurrentYear = () => {\n    return new Date().getFullYear().toString();\n  };\n\n  const GoalSection = ({ \n    title, \n    icon, \n    goals, \n    progress, \n    dateRange,\n    emptyMessage \n  }: { \n    title: string; \n    icon: string; \n    goals: Goal[]; \n    progress: number;\n    dateRange: string;\n    emptyMessage: string;\n  }) => (\n    <Card className=\"premium-card relative overflow-hidden\">\n      <div className=\"absolute top-0 right-0 w-16 h-16 sm:w-24 sm:h-24 lg:w-32 lg:h-32 bg-gradient-to-bl from-primary/5 to-transparent rounded-bl-full\"></div>\n      <CardHeader>\n        <div className=\"flex flex-col sm:flex-row items-center sm:justify-between gap-4 mb-4 sm:mb-6\">\n          <div className=\"flex items-center space-x-3 sm:space-x-4\">\n            <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-br from-primary to-accent rounded-xl flex items-center justify-center shadow-lg\">\n              <span className=\"text-lg sm:text-2xl\">{icon}</span>\n            </div>\n            <div className=\"text-center sm:text-left\">\n              <CardTitle className=\"text-lg sm:text-xl lg:text-2xl text-gradient-primary\">{title}</CardTitle>\n              <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400 font-medium mt-1\">{dateRange}</p>\n            </div>\n          </div>\n          <div className=\"premium-card p-2 sm:p-3 text-center\">\n            <div className=\"text-lg sm:text-xl lg:text-2xl font-black text-gradient-primary\">{goals.filter(g => g.completed).length}<span className=\"text-gray-400 mx-1\">/</span>{goals.length}</div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400 font-medium\">goals completed</div>\n          </div>\n        </div>\n        <div className=\"relative\">\n          <Progress value={progress} className=\"w-full h-4 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\" />\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <span className=\"text-xs font-bold text-white drop-shadow-lg\">{progress}%</span>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {goals.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-primary/10 to-accent/10 rounded-2xl flex items-center justify-center\">\n              <span className=\"text-4xl\">{icon}</span>\n            </div>\n            <p className=\"text-lg text-gray-600 dark:text-gray-400 font-medium\">{emptyMessage.split('.')[0]}</p>\n            <p className=\"text-sm text-gray-500 dark:text-gray-500 mt-2\">Click the + button to add your first goal!</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {goals.map((goal: Goal) => (\n              <div\n                key={goal.id}\n                className=\"goal-item premium-card p-3 sm:p-4 lg:p-6 hover:shadow-lg transition-all duration-300 group relative overflow-hidden\"\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-accent/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-4 lg:gap-6 relative z-10\">\n                  <div className=\"flex items-start space-x-3 sm:space-x-4 flex-1 w-full\">\n                    <Checkbox\n                      checked={goal.completed}\n                      onCheckedChange={() => handleGoalToggle(goal)}\n                      className=\"w-5 h-5 sm:w-6 sm:h-6 border-2 border-primary/30 data-[state=checked]:bg-gradient-to-br data-[state=checked]:from-primary data-[state=checked]:to-accent mt-1 sm:mt-0\"\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <div className={`text-sm sm:text-base lg:text-lg font-semibold ${goal.completed ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-900 dark:text-white'} transition-colors mb-1 sm:mb-2`}>\n                        {goal.title}\n                      </div>\n                      {goal.description && (\n                        <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400 mb-2 sm:mb-3 font-medium\">\n                          📝 {goal.description}\n                        </div>\n                      )}\n                      <div className=\"bg-gradient-to-r from-primary/20 to-accent/20 text-primary dark:text-accent text-xs font-bold px-2 py-1 sm:px-3 rounded-lg inline-block\">\n                        🎯 Target: {format(new Date(goal.targetDate), 'MMM d, yyyy')}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2 sm:space-x-3 self-end sm:self-center\">\n                    <div className=\"text-xs sm:text-sm\">\n                      {getStatusBadge(goal)}\n                    </div>\n                    <ThreeDotMenu\n                      onEdit={() => handleEditGoal(goal)}\n                      onDelete={() => handleDeleteGoal(goal.id)}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 py-4 sm:py-6 lg:py-8\">\n        {/* Header */}\n        <div className=\"mb-6 sm:mb-8 text-center sm:text-left\">\n          <h1 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-gradient-primary mb-2 sm:mb-4\">Dev Tracker</h1>\n          <p className=\"text-sm sm:text-base text-gray-600 dark:text-gray-400 mb-4 sm:mb-6 px-4 sm:px-0\">Track your development goals from weekly to yearly objectives</p>\n          \n          {/* Daily Performance Score */}\n          <div className=\"card-clean max-w-sm mx-auto sm:mx-0\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl sm:text-3xl font-bold text-gradient-primary mb-2\">{dailyPerformanceScore}%</div>\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">Today's Performance Impact</div>\n              <div className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">\n                (Tasks + Workouts + Mind + Routines)\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Goal Sections */}\n        <div className=\"space-y-12\">\n          <GoalSection\n            title=\"Weekly Plan\"\n            icon=\"🗓️\"\n            goals={currentWeeklyGoals}\n            progress={weeklyProgress}\n            dateRange={getCurrentWeekRange()}\n            emptyMessage=\"No weekly goals set. Click the + button to add your first weekly goal!\"\n          />\n\n          <GoalSection\n            title=\"Monthly Plan\"\n            icon=\"📅\"\n            goals={currentMonthlyGoals}\n            progress={monthlyProgress}\n            dateRange={getCurrentMonth()}\n            emptyMessage=\"No monthly goals set. Click the + button to add your first monthly goal!\"\n          />\n\n          {/* Yearly Goal - Special Layout */}\n          <Card className=\"premium-card relative overflow-hidden\">\n            <div className=\"absolute bottom-0 left-0 w-20 h-20 sm:w-32 sm:h-32 lg:w-40 lg:h-40 bg-gradient-to-tr from-secondary/10 to-transparent rounded-tr-full\"></div>\n            <CardHeader>\n              <div className=\"flex flex-col sm:flex-row items-center sm:justify-between gap-4 mb-4 sm:mb-6\">\n                <div className=\"flex items-center space-x-3 sm:space-x-4\">\n                  <div className=\"w-12 h-12 sm:w-14 sm:h-14 lg:w-16 lg:h-16 bg-gradient-to-br from-secondary to-accent rounded-xl sm:rounded-2xl flex items-center justify-center shadow-xl\">\n                    <span className=\"text-2xl sm:text-2xl lg:text-3xl\">📈</span>\n                  </div>\n                  <div className=\"text-center sm:text-left\">\n                    <CardTitle className=\"text-xl sm:text-2xl lg:text-3xl text-gradient-secondary mb-1 sm:mb-2\">Yearly Goal</CardTitle>\n                    <p className=\"text-sm sm:text-base lg:text-lg font-semibold text-gray-600 dark:text-gray-400\">{getCurrentYear()}</p>\n                  </div>\n                </div>\n                <div className=\"premium-card p-3 sm:p-4 text-center\">\n                  <div className=\"text-2xl sm:text-2xl lg:text-3xl font-black text-gradient-secondary\">{yearlyGoalProgress}%</div>\n                  <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400 font-medium\">progress</div>\n                </div>\n              </div>\n              <div className=\"relative\">\n                <Progress value={yearlyGoalProgress} className=\"w-full h-6 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\" />\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"text-sm font-bold text-white drop-shadow-lg\">{yearlyGoalProgress}%</span>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {yearlyGoals.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-32 h-32 mx-auto mb-8 bg-gradient-to-br from-secondary/10 to-accent/10 rounded-3xl flex items-center justify-center\">\n                    <span className=\"text-6xl\">📈</span>\n                  </div>\n                  <p className=\"text-xl text-gray-600 dark:text-gray-400 font-medium mb-2\">No yearly goal set</p>\n                  <p className=\"text-sm text-gray-500 dark:text-gray-500\">Click the + button to set your yearly development goal!</p>\n                </div>\n              ) : (\n                <div className=\"space-y-6\">\n                  {yearlyGoals.map((goal: Goal) => (\n                    <div\n                      key={goal.id}\n                      className=\"goal-item premium-card p-4 sm:p-6 lg:p-8 bg-gradient-to-br from-blue-50/50 to-purple-50/50 dark:from-blue-900/20 dark:to-purple-900/20 border-l-4 border-secondary\"\n                    >\n                      <div className=\"flex flex-col sm:flex-row items-start gap-4 sm:gap-6\">\n                        <div className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-xl sm:rounded-2xl bg-gradient-to-br from-secondary to-accent flex items-center justify-center flex-shrink-0 shadow-lg\">\n                          <span className=\"text-white text-lg sm:text-xl\">🎯</span>\n                        </div>\n                        <div className=\"flex-1 w-full sm:w-auto\">\n                          <div className=\"flex flex-col sm:flex-row items-start sm:items-center sm:justify-between gap-2 sm:gap-4 mb-3 sm:mb-4\">\n                            <div className=\"text-lg sm:text-xl lg:text-2xl font-bold text-gradient-secondary\">\n                              {goal.title}\n                            </div>\n                            <ThreeDotMenu\n                              onEdit={() => handleEditGoal(goal)}\n                              onDelete={() => handleDeleteGoal(goal.id)}\n                            />\n                          </div>\n                          {goal.description && (\n                            <div className=\"text-gray-700 dark:text-gray-300 mb-6 text-lg font-medium\">\n                              📝 {goal.description}\n                            </div>\n                          )}\n                          \n                          {/* Sub-goals progress - This would be calculated from related goals */}\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                            <div className=\"premium-card p-4 text-center\">\n                              <div className=\"text-2xl font-black text-gradient-primary mb-1\">{weeklyProgress}%</div>\n                              <div className=\"text-xs text-gray-600 dark:text-gray-400 font-medium\">📅 Weekly Goals</div>\n                            </div>\n                            <div className=\"premium-card p-4 text-center\">\n                              <div className=\"text-2xl font-black text-gradient-secondary mb-1\">{monthlyProgress}%</div>\n                              <div className=\"text-xs text-gray-600 dark:text-gray-400 font-medium\">🗓️ Monthly Goals</div>\n                            </div>\n                            <div className=\"premium-card p-4 text-center\">\n                              <div className=\"text-2xl font-black text-gradient-primary mb-1\">{goal.progress}%</div>\n                              <div className=\"text-xs text-gray-600 dark:text-gray-400 font-medium\">🎯 Overall Progress</div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n        </div>\n\n        {/* Floating Add Button */}\n        <FloatingButton\n          onClick={() => {\n            setEditingGoal(undefined);\n            setShowGoalModal(true);\n          }}\n        />\n\n        {/* Goal Modal */}\n        <GoalModal\n          open={showGoalModal}\n          onOpenChange={setShowGoalModal}\n          onSave={handleSaveGoal}\n          goal={editingGoal}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":36856},"client/src/pages/mind-workout.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { PieChart } from \"@/components/charts/pie-chart\";\nimport { FloatingButton } from \"@/components/ui/floating-button\";\nimport { ThreeDotMenu } from \"@/components/ui/three-dot-menu\";\nimport { MindActivityModal } from \"@/components/modals/mind-activity-modal\";\nimport { MindActivity, InsertMindActivity } from \"@shared/schema\";\nimport { getTodayString, calculatePerformance } from \"@/lib/date-utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function MindWorkout() {\n  const [showActivityModal, setShowActivityModal] = useState(false);\n  const [editingActivity, setEditingActivity] = useState<MindActivity | undefined>();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const today = getTodayString();\n\n  // Fetch mind activities for today\n  const { data: mindActivities = [] } = useQuery({\n    queryKey: [\"/api/mind-activities\", today],\n    queryFn: async () => {\n      const response = await fetch(`/api/mind-activities?date=${today}`);\n      return response.json();\n    },\n  });\n\n  // Create activity mutation\n  const createActivityMutation = useMutation({\n    mutationFn: async (newActivity: InsertMindActivity) => {\n      const response = await apiRequest(\"POST\", \"/api/mind-activities\", newActivity);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mind-activities\"] });\n      toast({ title: \"Mind activity created successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create activity\", variant: \"destructive\" });\n    },\n  });\n\n  // Update activity mutation\n  const updateActivityMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<MindActivity> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/mind-activities/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mind-activities\"] });\n      toast({ title: \"Mind activity updated successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update activity\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete activity mutation\n  const deleteActivityMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/mind-activities/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/mind-activities\"] });\n      toast({ title: \"Mind activity deleted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete activity\", variant: \"destructive\" });\n    },\n  });\n\n  // Calculate completion rate\n  const completedActivities = mindActivities.filter((activity: MindActivity) => activity.completed).length;\n  const completionRate = calculatePerformance(completedActivities, mindActivities.length);\n\n  const handleActivityToggle = (activity: MindActivity) => {\n    updateActivityMutation.mutate({\n      id: activity.id,\n      updates: { \n        completed: !activity.completed,\n        status: !activity.completed ? \"completed\" : \"pending\"\n      }\n    });\n  };\n\n  const handleEditActivity = (activity: MindActivity) => {\n    setEditingActivity(activity);\n    setShowActivityModal(true);\n  };\n\n  const handleDeleteActivity = (activityId: string) => {\n    if (confirm(\"Are you sure you want to delete this mind activity?\")) {\n      deleteActivityMutation.mutate(activityId);\n    }\n  };\n\n  const handleSaveActivity = (activityData: InsertMindActivity) => {\n    if (editingActivity) {\n      updateActivityMutation.mutate({\n        id: editingActivity.id,\n        updates: activityData\n      });\n    } else {\n      createActivityMutation.mutate(activityData);\n    }\n    setEditingActivity(undefined);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      completed: \"bg-gradient-to-r from-green-500 to-emerald-600 text-white shadow-lg border-0 font-semibold px-4 py-2\",\n      \"in-progress\": \"bg-gradient-to-r from-yellow-500 to-orange-500 text-white shadow-lg border-0 font-semibold px-4 py-2\",\n      pending: \"bg-gradient-to-r from-gray-500 to-slate-600 text-white shadow-lg border-0 font-semibold px-4 py-2\"\n    };\n    \n    const labels = {\n      completed: \"✓ Completed\",\n      \"in-progress\": \"⏳ In Progress\", \n      pending: \"⏸️ Pending\"\n    };\n\n    return (\n      <Badge className={variants[status as keyof typeof variants] || variants.pending}>\n        {labels[status as keyof typeof labels] || \"⏸️ Pending\"}\n      </Badge>\n    );\n  };\n\n  // Default mind activities that users can interact with\n  const defaultActivities = [\n    {\n      id: \"default-1\",\n      name: \"Box Breathing + Sense Drill\",\n      description: \"4-4-4-4 breathing pattern + 5-4-3-2-1 grounding technique\",\n      time: \"05:40\",\n      chatgptRole: \"ChatGPT: Guide through breathing patterns\",\n      completed: false,\n      date: today,\n      status: \"pending\" as const\n    },\n    {\n      id: \"default-2\",\n      name: \"Memory Palace Practice\",\n      description: \"Memorize 5 items using visual story technique, rate memory strength\",\n      time: \"06:00\",\n      chatgptRole: \"ChatGPT: Generate items & review performance\",\n      completed: false,\n      date: today,\n      status: \"pending\" as const\n    },\n    {\n      id: \"default-3\",\n      name: \"Micro Brain Challenge\",\n      description: \"Daily hard riddle or logic puzzle to stimulate problem-solving\",\n      time: \"08:00\",\n      chatgptRole: \"ChatGPT: Provide challenge & hints\",\n      completed: false,\n      date: today,\n      status: \"pending\" as const\n    },\n    {\n      id: \"default-4\",\n      name: \"Pattern Recognition Task\",\n      description: \"Visual or scene-based pattern identification challenge\",\n      time: \"12:00\",\n      chatgptRole: \"ChatGPT: Provide pattern task\",\n      completed: false,\n      date: today,\n      status: \"pending\" as const\n    },\n    {\n      id: \"default-5\",\n      name: \"Recall & Visualization\",\n      description: \"Recall 3 sounds, 2 visual scenes, 1 specific feeling from today\",\n      time: \"16:00\",\n      chatgptRole: \"ChatGPT: Quiz & evaluate recall\",\n      completed: false,\n      date: today,\n      status: \"pending\" as const\n    },\n    {\n      id: \"default-6\",\n      name: \"Mental Map Review\",\n      description: \"Recall and review everything learned throughout the day\",\n      time: \"19:00\",\n      chatgptRole: \"ChatGPT: Quiz knowledge & score performance\",\n      completed: false,\n      date: today,\n      status: \"pending\" as const\n    },\n    {\n      id: \"default-7\",\n      name: \"Mind Wind-down\",\n      description: \"Self-reflection questions and mental preparation for rest\",\n      time: \"21:30\",\n      chatgptRole: \"ChatGPT: Guide reflection process\",\n      completed: false,\n      date: today,\n      status: \"pending\" as const\n    }\n  ];\n\n  // State to track default activity completion with localStorage persistence\n  const getStoredActivityStates = () => {\n    const stored = localStorage.getItem(`mindActivityStates_${today}`);\n    return stored ? JSON.parse(stored) : {};\n  };\n\n  const [defaultActivityStates, setDefaultActivityStates] = useState<{[key: string]: boolean}>(getStoredActivityStates);\n  \n  // Handle default activity toggle\n  const handleDefaultActivityToggle = (activityId: string) => {\n    const newStates = {\n      ...defaultActivityStates,\n      [activityId]: !defaultActivityStates[activityId]\n    };\n    setDefaultActivityStates(newStates);\n    localStorage.setItem(`mindActivityStates_${today}`, JSON.stringify(newStates));\n  };\n\n  // Merge real activities with default activities with current state\n  const displayActivities = mindActivities.length > 0 ? mindActivities : \n    defaultActivities.map(activity => ({\n      ...activity,\n      completed: defaultActivityStates[activity.id] || false,\n      status: defaultActivityStates[activity.id] ? \"completed\" as const : \"pending\" as const\n    }));\n  \n  const completedCount = displayActivities.filter((activity: any) => activity.completed).length;\n  const displayCompletionRate = calculatePerformance(completedCount, displayActivities.length);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-950\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 py-4 sm:py-6 lg:py-12\">\n        {/* Header */}\n        <div className=\"mb-6 sm:mb-8 lg:mb-12 text-center\">\n          <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-2 sm:mb-4\">Mind Workout</h2>\n          <p className=\"text-sm sm:text-base lg:text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto px-4\">Structured mental exercises to enhance cognitive performance</p>\n        </div>\n\n        {/* Mind Exercise Completion Chart */}\n        <Card className=\"premium-card relative overflow-hidden mb-6 sm:mb-8 lg:mb-12\">\n          <div className=\"absolute top-0 right-0 w-20 h-20 sm:w-32 sm:h-32 lg:w-40 lg:h-40 bg-gradient-to-bl from-primary/10 to-transparent rounded-bl-full\"></div>\n          <CardHeader>\n            <CardTitle className=\"text-lg sm:text-xl font-semibold\">🧠 Mind Exercise Completion</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4 sm:gap-6 md:gap-8 items-center\">\n              <div className=\"text-center\">\n                <div className=\"relative w-full max-w-[200px] mx-auto aspect-square\">\n                  <PieChart\n                    data={[displayCompletionRate, 100 - displayCompletionRate]}\n                    colors={['#8B5DFF', '#E2E8F0']}\n                  />\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <span className=\"text-lg sm:text-2xl lg:text-3xl font-black text-gradient-primary block\">{displayCompletionRate}%</span>\n                      <span className=\"text-xs text-gray-600 dark:text-gray-400\">Complete</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-3xl sm:text-4xl lg:text-5xl font-black text-gradient-secondary mb-3 sm:mb-4\">{displayCompletionRate}%</div>\n                <div className=\"text-sm sm:text-base lg:text-lg font-semibold text-gray-700 dark:text-gray-300 mb-4 sm:mb-6\">Daily Completion Rate</div>\n                <div className=\"premium-card p-3 sm:p-4 inline-block\">\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    <span className=\"text-lg sm:text-xl lg:text-2xl font-bold text-gradient-primary\">{completedCount}</span>\n                    <span className=\"mx-1 sm:mx-2 text-gray-400\">/</span>\n                    <span className=\"text-lg sm:text-xl lg:text-2xl font-bold text-gradient-secondary\">{displayActivities.length}</span>\n                  </div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">exercises completed</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Structured Schedule */}\n        <Card className=\"premium-card relative overflow-hidden\">\n          <div className=\"absolute bottom-0 left-0 w-20 h-20 sm:w-24 sm:h-24 lg:w-32 lg:h-32 bg-gradient-to-tr from-accent/5 to-transparent rounded-tr-full\"></div>\n          <CardHeader>\n            <CardTitle className=\"text-lg sm:text-xl lg:text-2xl text-gradient-primary\">🕐 Daily Mind Schedule</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4 sm:space-y-6\">\n              {displayActivities.map((activity: any) => (\n                <div\n                  key={activity.id}\n                  className=\"mind-activity premium-card p-3 sm:p-4 lg:p-6 hover:shadow-lg transition-all duration-300 group relative overflow-hidden\"\n                >\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-accent/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                  <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-3 sm:gap-4 lg:gap-6 relative z-10\">\n                    <div className=\"flex items-start space-x-3 sm:space-x-4 flex-1 w-full\">\n                      <Checkbox\n                        checked={activity.completed}\n                        onCheckedChange={() => {\n                          if (mindActivities.length > 0) {\n                            handleActivityToggle(activity);\n                          } else {\n                            handleDefaultActivityToggle(activity.id);\n                          }\n                        }}\n                        className=\"w-5 h-5 sm:w-6 sm:h-6 border-2 border-primary/30 data-[state=checked]:bg-gradient-to-br data-[state=checked]:from-primary data-[state=checked]:to-accent mt-1 sm:mt-0\"\n                      />\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4 mb-2 sm:mb-3\">\n                          <div className=\"bg-gradient-to-r from-primary to-accent text-white text-xs sm:text-sm font-bold px-2 py-1 sm:px-3 sm:py-1.5 lg:px-4 lg:py-2 rounded-lg sm:rounded-xl shadow-lg\">\n                            ⏰ {activity.time}\n                          </div>\n                          <div className={`text-sm sm:text-base lg:text-lg font-semibold ${activity.completed ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-900 dark:text-white'} transition-colors`}>\n                            {activity.name}\n                          </div>\n                        </div>\n                        <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400 mb-2 sm:mb-3 font-medium\">\n                          📝 {activity.description}\n                        </div>\n                        <div className=\"bg-gradient-to-r from-purple-500/10 to-pink-500/10 text-purple-700 dark:text-purple-300 text-xs font-semibold px-2 py-1 sm:px-3 sm:py-2 rounded-lg inline-block border border-purple-200/50 dark:border-purple-700/50\">\n                          🤖 {activity.chatgptRole}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2 sm:space-x-3 self-end sm:self-center\">\n                      <div className=\"text-xs sm:text-sm\">\n                        {getStatusBadge(activity.status)}\n                      </div>\n                      <ThreeDotMenu\n                        onEdit={() => {\n                          if (mindActivities.length > 0) {\n                            handleEditActivity(activity);\n                          } else {\n                            // For default activities, create a new activity based on the default\n                            setEditingActivity(undefined);\n                            setShowActivityModal(true);\n                          }\n                        }}\n                        onDelete={() => {\n                          if (mindActivities.length > 0) {\n                            handleDeleteActivity(activity.id);\n                          } else {\n                            // Reset default activity state\n                            setDefaultActivityStates(prev => {\n                              const newState = { ...prev };\n                              delete newState[activity.id];\n                              return newState;\n                            });\n                          }\n                        }}\n                      />\n                    </div>\n                  </div>\n                </div>\n            ))}\n          </div>\n            \n            {mindActivities.length === 0 && (\n              <div className=\"premium-card p-6 mt-8 border-l-4 border-blue-500 bg-gradient-to-r from-blue-50/50 to-cyan-50/50 dark:from-blue-900/20 dark:to-cyan-900/20\">\n                <div className=\"flex items-center space-x-3 mb-2\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-lg flex items-center justify-center\">\n                    <span className=\"text-white text-sm\">💡</span>\n                  </div>\n                  <h4 className=\"font-bold text-blue-700 dark:text-blue-300\">Default Activities</h4>\n                </div>\n                <p className=\"text-sm text-blue-600 dark:text-blue-400 font-medium\">\n                  Above are premium mind workout activities designed by experts. Click the + button to create your own custom activities!\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Floating Add Button */}\n        <FloatingButton\n          onClick={() => {\n            setEditingActivity(undefined);\n            setShowActivityModal(true);\n          }}\n        />\n\n        {/* Mind Activity Modal */}\n        <MindActivityModal\n          open={showActivityModal}\n          onOpenChange={setShowActivityModal}\n          onSave={handleSaveActivity}\n          activity={editingActivity}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":17456},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/workout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { PieChart } from \"@/components/charts/pie-chart\";\nimport { FloatingButton } from \"@/components/ui/floating-button\";\nimport { ThreeDotMenu } from \"@/components/ui/three-dot-menu\";\nimport { WorkoutModal } from \"@/components/modals/workout-modal\";\nimport { Exercise, InsertExercise } from \"@shared/schema\";\nimport { getTodayString, getCurrentDayName, calculatePerformance, isCurrentDay } from \"@/lib/date-utils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Workout() {\n  const [showWorkoutModal, setShowWorkoutModal] = useState(false);\n  const [editingExercise, setEditingExercise] = useState<Exercise | undefined>();\n  const [isWeeklyMode, setIsWeeklyMode] = useState(false);\n  const [selectedDay, setSelectedDay] = useState(getCurrentDayName());\n  const [selectedWorkoutType, setSelectedWorkoutType] = useState<string>(\"Full Body\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const today = getTodayString();\n\n  // Initialize 7-day Full Body workout routine\n  const initializeFullBodyRoutine = useMutation({\n    mutationFn: async () => {\n      const workoutRoutines: InsertExercise[] = [\n        // Day 1 – Push (Chest, Shoulders, Triceps, Abs)\n        { name: \"Normal Push-Ups\", sets: 4, reps: \"25\", day: \"monday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Incline Push-Ups\", sets: 3, reps: \"25\", day: \"monday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Pike Push-Ups\", sets: 3, reps: \"15\", day: \"monday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Diamond Push-Ups\", sets: 2, reps: \"15\", day: \"monday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Bench Dips\", sets: 3, reps: \"25\", day: \"monday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Russian Twists\", sets: 3, reps: \"30\", day: \"monday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Plank\", sets: 1, reps: \"5 min\", day: \"monday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n\n        // Day 2 – Pull (Back, Biceps, Forearms, Grip)\n        { name: \"Pull-Ups / Assisted\", sets: 4, reps: \"12\", day: \"tuesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Towel Rows\", sets: 3, reps: \"20\", day: \"tuesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Towel Bicep Curls\", sets: 3, reps: \"20\", day: \"tuesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Reverse Curls\", sets: 3, reps: \"15\", day: \"tuesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Gripper Fast\", sets: 3, reps: \"40\", day: \"tuesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Farmer Hold\", sets: 2, reps: \"45 sec\", day: \"tuesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Wrist Rolls\", sets: 2, reps: \"20\", day: \"tuesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n\n        // Day 3 – Legs (Quads, Glutes, Calves)\n        { name: \"Squats\", sets: 4, reps: \"25\", day: \"wednesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Jump Squats\", sets: 3, reps: \"20\", day: \"wednesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Lunges\", sets: 3, reps: \"20 steps\", day: \"wednesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Calf Raises\", sets: 4, reps: \"30\", day: \"wednesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Wall Sit\", sets: 2, reps: \"45 sec\", day: \"wednesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Broad Jumps\", sets: 2, reps: \"15\", day: \"wednesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"High Knees\", sets: 2, reps: \"30\", day: \"wednesday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n\n        // Day 4 – Core + Abs (Six-Pack, Obliques, Stability)\n        { name: \"Crunches\", sets: 3, reps: \"25\", day: \"thursday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Leg Raises\", sets: 3, reps: \"25\", day: \"thursday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Mountain Climbers\", sets: 3, reps: \"30\", day: \"thursday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Plank\", sets: 3, reps: \"1 min\", day: \"thursday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Side Plank\", sets: 2, reps: \"1 min each\", day: \"thursday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"V-Ups\", sets: 3, reps: \"20\", day: \"thursday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Russian Twists\", sets: 3, reps: \"30\", day: \"thursday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n\n        // Day 5 – Power + Explosive + Grip Veins (Short, Strong)\n        { name: \"Clap Pushups\", sets: 3, reps: \"15\", day: \"friday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Skipping\", sets: 1, reps: \"5 min\", day: \"friday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"High Knees\", sets: 3, reps: \"30\", day: \"friday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Towel Bicep Curls\", sets: 2, reps: \"25\", day: \"friday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Wrist Rolls\", sets: 2, reps: \"20\", day: \"friday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Gripper Slow Squeeze\", sets: 2, reps: \"15\", day: \"friday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Hanging\", sets: 3, reps: \"1 min\", day: \"friday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n\n        // Day 6 – BONUS Stretch + Pump Day (Light Sculpting + Relaxing)\n        { name: \"Archer Pushups\", sets: 2, reps: \"12\", day: \"saturday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Incline Pushups\", sets: 2, reps: \"20\", day: \"saturday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Squats\", sets: 2, reps: \"25\", day: \"saturday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Plank\", sets: 2, reps: \"1 min\", day: \"saturday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Neck + Spine + Toe Touch Stretch\", sets: 3, reps: \"30 sec\", day: \"saturday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Hanging\", sets: 2, reps: \"1 min\", day: \"saturday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n\n        // Day 7 – Rest Day (Optional Light Activities)\n        { name: \"Hanging\", sets: 1, reps: \"1 min\", day: \"sunday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Cobra Stretch\", sets: 2, reps: \"30 sec\", day: \"sunday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n        { name: \"Light Walk\", sets: 1, reps: \"10 min\", day: \"sunday\", workoutType: \"Full Body\", isWeekly: true, date: today, completed: false },\n      ];\n      \n      const promises = workoutRoutines.map(workout => \n        apiRequest(\"POST\", \"/api/exercises\", workout)\n      );\n      await Promise.all(promises);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      toast({ title: \"Full Body workout routine added successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to add Full Body routine\", variant: \"destructive\" });\n    },\n  });\n\n  // Initialize Arms & Grip workout routine \n  const initializeArmsRoutine = useMutation({\n    mutationFn: async () => {\n      const armsRoutines: InsertExercise[] = [\n        // Monday – High-Volume Gripper\n        { name: \"Gripper Fast Reps\", sets: 4, reps: \"50 each hand\", day: \"monday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Slow Squeeze Gripper\", sets: 3, reps: \"15 (3 sec hold)\", day: \"monday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Towel Twist\", sets: 2, reps: \"1 min\", day: \"monday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Wrist Rotations with Bottle\", sets: 2, reps: \"15\", day: \"monday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n\n        // Tuesday – Strength + Static Hold\n        { name: \"Heavy Gripper\", sets: 3, reps: \"10 slow\", day: \"tuesday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Gripper Close-Hold\", sets: 3, reps: \"30 sec hold\", day: \"tuesday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Pinch Grip Hold\", sets: 3, reps: \"30 sec\", day: \"tuesday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Wrist Curl\", sets: 3, reps: \"15\", day: \"tuesday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Reverse Curl\", sets: 3, reps: \"15\", day: \"tuesday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Finger Wall Pushups\", sets: 2, reps: \"20 sec hold\", day: \"tuesday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n\n        // Wednesday – Recovery + Light Pump\n        { name: \"Easy Gripper\", sets: 2, reps: \"30\", day: \"wednesday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Towel Squeeze Light\", sets: 1, reps: \"1 min\", day: \"wednesday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Wrist Mobility Circles\", sets: 1, reps: \"2 min\", day: \"wednesday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Finger Flex-Extend\", sets: 1, reps: \"50\", day: \"wednesday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n\n        // Thursday – Mixed Monster Circuit\n        { name: \"Gripper Explosives\", sets: 3, reps: \"20\", day: \"thursday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Gripper Slow Hold\", sets: 3, reps: \"15\", day: \"thursday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Wrist Curl Circuit\", sets: 3, reps: \"15\", day: \"thursday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Reverse Curl Circuit\", sets: 3, reps: \"15\", day: \"thursday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Pinch Grip Circuit\", sets: 3, reps: \"30 sec\", day: \"thursday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Farmer Carry\", sets: 3, reps: \"1 min walk\", day: \"thursday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Towel Twists Finish\", sets: 2, reps: \"1 min\", day: \"thursday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n\n        // Friday – Reverse Focus\n        { name: \"Rubber Band Finger Opens\", sets: 3, reps: \"20\", day: \"friday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Wall Finger Push\", sets: 3, reps: \"15\", day: \"friday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Reverse Wrist Curl\", sets: 3, reps: \"20\", day: \"friday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Forearm Extensor Stretch\", sets: 1, reps: \"1 min each arm\", day: \"friday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Light Gripper Recovery\", sets: 2, reps: \"20\", day: \"friday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n\n        // Saturday – Max Test & Burnout\n        { name: \"Gripper Max Reps Test\", sets: 1, reps: \"to failure\", day: \"saturday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Close & Hold Max\", sets: 1, reps: \"45 sec\", day: \"saturday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Farmer's Hold Max\", sets: 1, reps: \"1 min\", day: \"saturday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Pinch Hold Max\", sets: 1, reps: \"45 sec\", day: \"saturday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Bucket Walk\", sets: 2, reps: \"10 steps\", day: \"saturday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Gripper Burnout\", sets: 1, reps: \"to failure\", day: \"saturday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n\n        // Sunday – Rest/Recovery\n        { name: \"Light Hand Circles\", sets: 1, reps: \"2 min\", day: \"sunday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n        { name: \"Forearm Stretch\", sets: 1, reps: \"3 min\", day: \"sunday\", workoutType: \"Arms & Grip\", isWeekly: true, date: today, completed: false },\n      ];\n      \n      const promises = armsRoutines.map(workout => \n        apiRequest(\"POST\", \"/api/exercises\", workout)\n      );\n      await Promise.all(promises);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      toast({ title: \"Arms & Grip workout routine added successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to add Arms routine\", variant: \"destructive\" });\n    },\n  });\n\n  // Fetch daily exercises\n  const { data: dailyExercises = [] } = useQuery({\n    queryKey: [\"/api/exercises\", today, false],\n    queryFn: async () => {\n      const response = await fetch(`/api/exercises?date=${today}&isWeekly=false`);\n      return response.json();\n    },\n  });\n\n  // Fetch weekly exercises\n  const { data: weeklyExercises = [] } = useQuery({\n    queryKey: [\"/api/exercises\", \"weekly\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/exercises?isWeekly=true\");\n      return response.json();\n    },\n  });\n\n  // Initialize workout routines only once\n  const [hasInitializedFullBody, setHasInitializedFullBody] = useState(false);\n  const [hasInitializedArms, setHasInitializedArms] = useState(false);\n  \n  useEffect(() => {\n    // Only initialize if no weekly workouts exist and we haven't already initialized\n    const fullBodyWorkouts = weeklyExercises.filter((ex: Exercise) => ex.workoutType === \"Full Body\");\n    const armsWorkouts = weeklyExercises.filter((ex: Exercise) => ex.workoutType === \"Arms & Grip\");\n    \n    if (fullBodyWorkouts.length === 0 && !hasInitializedFullBody && !initializeFullBodyRoutine.isPending) {\n      setHasInitializedFullBody(true);\n      initializeFullBodyRoutine.mutate();\n    }\n    \n    if (armsWorkouts.length === 0 && !hasInitializedArms && !initializeArmsRoutine.isPending) {\n      setHasInitializedArms(true);\n      initializeArmsRoutine.mutate();\n    }\n  }, [weeklyExercises.length, hasInitializedFullBody, hasInitializedArms]);\n\n  // Create exercise mutation\n  const createExerciseMutation = useMutation({\n    mutationFn: async (newExercise: InsertExercise) => {\n      const response = await apiRequest(\"POST\", \"/api/exercises\", newExercise);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      toast({ title: \"Exercise created successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to create exercise\", variant: \"destructive\" });\n    },\n  });\n\n  // Update exercise mutation\n  const updateExerciseMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Exercise> }) => {\n      const response = await apiRequest(\"PATCH\", `/api/exercises/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      toast({ title: \"Exercise updated successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update exercise\", variant: \"destructive\" });\n    },\n  });\n\n  // Delete exercise mutation\n  const deleteExerciseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/exercises/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n      toast({ title: \"Exercise deleted successfully!\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to delete exercise\", variant: \"destructive\" });\n    },\n  });\n\n  // Calculate performance metrics\n  const completedDailyExercises = dailyExercises.filter((ex: Exercise) => ex.completed).length;\n  const dailyExercisePerformance = calculatePerformance(completedDailyExercises, dailyExercises.length);\n\n  // Filter weekly exercises for today only\n  const currentDayName = getCurrentDayName();\n  const todayWeeklyExercises = weeklyExercises.filter((ex: Exercise) => ex.day === currentDayName);\n  const completedTodayWeeklyExercises = todayWeeklyExercises.filter((ex: Exercise) => ex.completed).length;\n  const weeklyProgressPerformance = calculatePerformance(completedTodayWeeklyExercises, todayWeeklyExercises.length);\n\n  // Filter exercises by selected day and workout type for weekly view\n  const selectedDayExercises = weeklyExercises.filter((ex: Exercise) => \n    ex.day === selectedDay && ex.workoutType === selectedWorkoutType\n  );\n\n\n  const handleExerciseToggle = (exercise: Exercise) => {\n    updateExerciseMutation.mutate({\n      id: exercise.id,\n      updates: { completed: !exercise.completed }\n    });\n  };\n\n  const handleEditExercise = (exercise: Exercise) => {\n    setEditingExercise(exercise);\n    setShowWorkoutModal(true);\n  };\n\n  const handleDeleteExercise = (exerciseId: string) => {\n    if (confirm(\"Are you sure you want to delete this exercise?\")) {\n      deleteExerciseMutation.mutate(exerciseId);\n    }\n  };\n\n  const handleSaveExercise = (exerciseData: InsertExercise) => {\n    if (editingExercise) {\n      updateExerciseMutation.mutate({\n        id: editingExercise.id,\n        updates: exerciseData\n      });\n    } else {\n      createExerciseMutation.mutate(exerciseData);\n    }\n    setEditingExercise(undefined);\n  };\n\n  const days = [\n    { value: \"sunday\", label: \"Sun\" },\n    { value: \"monday\", label: \"Mon\" },\n    { value: \"tuesday\", label: \"Tue\" },\n    { value: \"wednesday\", label: \"Wed\" },\n    { value: \"thursday\", label: \"Thu\" },\n    { value: \"friday\", label: \"Fri\" },\n    { value: \"saturday\", label: \"Sat\" },\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8 py-4 sm:py-8 lg:py-12\">\n        {/* Header */}\n        <div className=\"mb-6 sm:mb-8 lg:mb-12 text-center\">\n          <h2 className=\"text-2xl sm:text-3xl lg:text-5xl font-black text-gradient-primary mb-2 sm:mb-4\">Workout Tracker</h2>\n          <p className=\"text-sm sm:text-lg lg:text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto px-4\">Track your daily and weekly workout progress with beautiful insights</p>\n          <div className=\"w-16 sm:w-20 lg:w-24 h-0.5 sm:h-1 bg-gradient-to-r from-primary to-accent rounded-full mx-auto mt-3 sm:mt-6\"></div>\n        </div>\n\n        {/* Workout Performance Chart */}\n        <Card className=\"premium-card relative overflow-hidden mb-6 sm:mb-8 lg:mb-12\">\n          <div className=\"absolute top-0 right-0 w-20 h-20 sm:w-32 sm:h-32 lg:w-40 lg:h-40 bg-gradient-to-bl from-accent/10 to-transparent rounded-bl-full\"></div>\n          <CardHeader>\n            <CardTitle className=\"text-lg sm:text-xl lg:text-2xl text-gradient-primary\">🏋️‍♂️ Workout Performance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4 sm:gap-6 md:gap-8\">\n              <div className=\"text-center\">\n                <h4 className=\"text-sm sm:text-base lg:text-lg font-bold text-gradient-primary mb-3 sm:mb-4\">Daily Exercises</h4>\n                <div className=\"relative w-full max-w-[200px] mx-auto aspect-square\">\n                  <PieChart\n                    data={[dailyExercisePerformance, 100 - dailyExercisePerformance]}\n                    colors={['#F59E0B', '#E2E8F0']}\n                  />\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <span className=\"text-lg sm:text-2xl lg:text-3xl font-black text-gradient-secondary block\">{dailyExercisePerformance}%</span>\n                      <span className=\"text-xs text-gray-600 dark:text-gray-400\">Complete</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <h4 className=\"text-sm sm:text-base lg:text-lg font-bold text-gradient-primary mb-3 sm:mb-4\">Weekly Progress</h4>\n                <div className=\"relative w-full max-w-[200px] mx-auto aspect-square\">\n                  <PieChart\n                    data={[weeklyProgressPerformance, 100 - weeklyProgressPerformance]}\n                    colors={['#22C55E', '#E2E8F0']}\n                  />\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <span className=\"text-lg sm:text-2xl lg:text-3xl font-black text-gradient-primary block\">{weeklyProgressPerformance}%</span>\n                      <span className=\"text-xs text-gray-600 dark:text-gray-400\">Complete</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Workout Tabs */}\n        <Card className=\"premium-card relative overflow-hidden\">\n          <div className=\"absolute bottom-0 left-0 w-32 h-32 bg-gradient-to-tr from-primary/5 to-transparent rounded-tr-full\"></div>\n          <Tabs defaultValue=\"daily\" className=\"w-full\">\n            <div className=\"border-b border-gray-200/20 dark:border-gray-700/20\">\n              <TabsList className=\"grid w-full grid-cols-2 bg-gradient-to-r from-primary/5 to-accent/5 p-2 rounded-xl\">\n                <TabsTrigger value=\"daily\" className=\"flex items-center space-x-2 premium-button text-lg font-semibold py-3\">\n                  <span>🟢</span>\n                  <span>Daily Workout</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"weekly\" className=\"flex items-center space-x-2 premium-button text-lg font-semibold py-3\">\n                  <span>🔵</span>\n                  <span>Weekly Workout</span>\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            {/* Daily Workout Tab */}\n            <TabsContent value=\"daily\" className=\"p-8\">\n              {/* Daily Workout Type Selection */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n                {/* Full Body Daily Workouts */}\n                <Card className=\"premium-card\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className=\"w-10 h-10 bg-gradient-to-br from-green-500 to-green-600 rounded-xl flex items-center justify-center\">\n                        <span className=\"text-white text-lg\">💪</span>\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-bold\">Full Body Daily</h3>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Today's routine</p>\n                      </div>\n                    </div>\n                    <div className=\"space-y-3\">\n                      {dailyExercises.filter((ex: Exercise) => ex.workoutType === \"Full Body\").length === 0 ? (\n                        <p className=\"text-sm text-gray-500\">No Full Body exercises today</p>\n                      ) : (\n                        dailyExercises.filter((ex: Exercise) => ex.workoutType === \"Full Body\").map((exercise: Exercise) => (\n                          <div key={exercise.id} className=\"flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                            <Checkbox\n                              checked={exercise.completed}\n                              onCheckedChange={() => handleExerciseToggle(exercise)}\n                              className=\"w-5 h-5\"\n                            />\n                            <div className=\"flex-1\">\n                              <div className={`font-medium ${exercise.completed ? 'line-through text-gray-500' : ''}`}>\n                                {exercise.name}\n                              </div>\n                              <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                                {exercise.sets} sets × {exercise.reps}\n                              </div>\n                            </div>\n                            <ThreeDotMenu\n                              onEdit={() => handleEditExercise(exercise)}\n                              onDelete={() => handleDeleteExercise(exercise.id)}\n                            />\n                          </div>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Arms & Grip Daily Workouts */}\n                <Card className=\"premium-card\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center\">\n                        <span className=\"text-white text-lg\">💥</span>\n                      </div>\n                      <div>\n                        <h3 className=\"text-lg font-bold\">Arms & Grip Daily</h3>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">Today's routine</p>\n                      </div>\n                    </div>\n                    <div className=\"space-y-3\">\n                      {dailyExercises.filter((ex: Exercise) => ex.workoutType === \"Arms & Grip\").length === 0 ? (\n                        <p className=\"text-sm text-gray-500\">No Arms & Grip exercises today</p>\n                      ) : (\n                        dailyExercises.filter((ex: Exercise) => ex.workoutType === \"Arms & Grip\").map((exercise: Exercise) => (\n                          <div key={exercise.id} className=\"flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                            <Checkbox\n                              checked={exercise.completed}\n                              onCheckedChange={() => handleExerciseToggle(exercise)}\n                              className=\"w-5 h-5\"\n                            />\n                            <div className=\"flex-1\">\n                              <div className={`font-medium ${exercise.completed ? 'line-through text-gray-500' : ''}`}>\n                                {exercise.name}\n                              </div>\n                              <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                                {exercise.sets} sets × {exercise.reps}\n                              </div>\n                            </div>\n                            <ThreeDotMenu\n                              onEdit={() => handleEditExercise(exercise)}\n                              onDelete={() => handleDeleteExercise(exercise.id)}\n                            />\n                          </div>\n                        ))\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Other Daily Exercises */}\n              {dailyExercises.filter((ex: Exercise) => !ex.workoutType || (ex.workoutType !== \"Full Body\" && ex.workoutType !== \"Arms & Grip\")).length > 0 && (\n                <Card className=\"premium-card\">\n                  <CardHeader>\n                    <CardTitle>Other Daily Exercises</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {dailyExercises.filter((ex: Exercise) => !ex.workoutType || (ex.workoutType !== \"Full Body\" && ex.workoutType !== \"Arms & Grip\")).map((exercise: Exercise) => (\n                        <div\n                          key={exercise.id}\n                          className=\"exercise-item premium-card p-4 hover:shadow-lg transition-all duration-300 group relative overflow-hidden\"\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-4 flex-1\">\n                              <Checkbox\n                                checked={exercise.completed}\n                                onCheckedChange={() => handleExerciseToggle(exercise)}\n                                className=\"w-5 h-5\"\n                              />\n                              <div className=\"flex-1\">\n                                <div className={`font-semibold ${exercise.completed ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-900 dark:text-white'}`}>\n                                  {exercise.name}\n                                </div>\n                                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                                  💪 {exercise.sets} sets × {exercise.reps} • ⏱️ {exercise.duration} min\n                                </div>\n                              </div>\n                            </div>\n                            <ThreeDotMenu\n                              onEdit={() => handleEditExercise(exercise)}\n                              onDelete={() => handleDeleteExercise(exercise.id)}\n                            />\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            {/* Weekly Workout Tab */}\n            <TabsContent value=\"weekly\" className=\"p-8\">\n              {/* Workout Type Selection */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n                {/* Full Body Workout Box */}\n                <Card className=\"premium-card cursor-pointer hover:shadow-lg transition-all duration-300 group\" \n                      onClick={() => setSelectedWorkoutType(\"Full Body\")}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 rounded-xl flex items-center justify-center\">\n                          <span className=\"text-white text-xl\">💪</span>\n                        </div>\n                        <div>\n                          <h3 className=\"text-xl font-bold\">Full Body</h3>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Complete 7-day routine</p>\n                        </div>\n                      </div>\n                      <div className={`w-6 h-6 rounded-full border-2 ${\n                        selectedWorkoutType === \"Full Body\" \n                          ? 'bg-green-500 border-green-500' \n                          : 'border-gray-300 dark:border-gray-600'\n                      }`}>\n                        {selectedWorkoutType === \"Full Body\" && (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <span className=\"text-white text-xs\">✓</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Completed:</span>\n                        <span className=\"font-semibold\">{weeklyExercises.filter((ex: Exercise) => ex.workoutType === \"Full Body\" && ex.completed).length}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Total:</span>\n                        <span className=\"font-semibold\">{weeklyExercises.filter((ex: Exercise) => ex.workoutType === \"Full Body\").length}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Arms & Grip Workout Box */}\n                <Card className=\"premium-card cursor-pointer hover:shadow-lg transition-all duration-300 group\" \n                      onClick={() => setSelectedWorkoutType(\"Arms & Grip\")}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center\">\n                          <span className=\"text-white text-xl\">💥</span>\n                        </div>\n                        <div>\n                          <h3 className=\"text-xl font-bold\">Arms & Grip</h3>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400\">30-day forearm focus</p>\n                        </div>\n                      </div>\n                      <div className={`w-6 h-6 rounded-full border-2 ${\n                        selectedWorkoutType === \"Arms & Grip\" \n                          ? 'bg-blue-500 border-blue-500' \n                          : 'border-gray-300 dark:border-gray-600'\n                      }`}>\n                        {selectedWorkoutType === \"Arms & Grip\" && (\n                          <div className=\"w-full h-full flex items-center justify-center\">\n                            <span className=\"text-white text-xs\">✓</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Completed:</span>\n                        <span className=\"font-semibold\">{weeklyExercises.filter((ex: Exercise) => ex.workoutType === \"Arms & Grip\" && ex.completed).length}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Total:</span>\n                        <span className=\"font-semibold\">{weeklyExercises.filter((ex: Exercise) => ex.workoutType === \"Arms & Grip\").length}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Day Tabs */}\n              {selectedWorkoutType && (\n                <div className=\"border-b border-gray-200/20 dark:border-gray-700/20 mb-8\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"text-2xl font-bold\">\n                      {selectedWorkoutType} - Weekly Schedule\n                    </h3>\n                  </div>\n                  <div className=\"flex space-x-2 overflow-x-auto pb-4\">\n                    {days.map((day) => {\n                      const isToday = isCurrentDay(day.value);\n                      const isSelected = selectedDay === day.value;\n                      \n                      return (\n                        <Button\n                          key={day.value}\n                          variant={isSelected ? \"default\" : \"ghost\"}\n                          size=\"lg\"\n                          onClick={() => setSelectedDay(day.value)}\n                          className={`flex-shrink-0 premium-button font-semibold px-6 py-3 relative ${\n                            isSelected \n                              ? 'bg-gradient-to-r from-primary to-accent text-white shadow-lg' \n                              : 'hover:bg-gradient-to-r hover:from-primary/10 hover:to-accent/10'\n                          } ${\n                            isToday && !isSelected \n                              ? 'ring-2 ring-blue-400 ring-offset-2 ring-offset-background' \n                              : ''\n                          }`}\n                        >\n                          {day.label}\n                          {isToday && (\n                            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-blue-500 rounded-full border-2 border-background\"></span>\n                          )}\n                        </Button>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n\n              {/* Weekly Exercises */}\n              {selectedWorkoutType && (\n                <div className=\"space-y-6 mb-12\">\n                  {selectedDayExercises.length === 0 ? (\n                    <div className=\"text-center py-12\">\n                      <div className=\"w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-primary/10 to-accent/10 rounded-2xl flex items-center justify-center\">\n                        <span className=\"text-4xl\">📅</span>\n                      </div>\n                      <p className=\"text-lg text-gray-600 dark:text-gray-400 font-medium\">\n                        No {selectedWorkoutType} exercises for {days.find(d => d.value === selectedDay)?.label}\n                      </p>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-500 mt-2\">Switch workout type or add new exercises!</p>\n                    </div>\n                  ) : (\n                    selectedDayExercises.map((exercise: Exercise) => (\n                      <div\n                        key={exercise.id}\n                        className=\"exercise-item premium-card p-6 hover:shadow-lg transition-all duration-300 group relative overflow-hidden\"\n                      >\n                        <div className=\"absolute inset-0 bg-gradient-to-r from-primary/5 to-accent/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                        <div className=\"flex items-center justify-between relative z-10\">\n                          <div className=\"flex items-center space-x-6 flex-1\">\n                            <Checkbox\n                              checked={exercise.completed}\n                              onCheckedChange={() => handleExerciseToggle(exercise)}\n                              disabled={selectedDay !== getCurrentDayName()}\n                              className=\"w-6 h-6 border-2 border-primary/30 data-[state=checked]:bg-gradient-to-br data-[state=checked]:from-primary data-[state=checked]:to-accent disabled:opacity-50\"\n                            />\n                            <div className=\"flex-1\">\n                              <div className={`text-lg font-semibold ${exercise.completed ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-900 dark:text-white'} transition-colors`}>\n                                {exercise.name}\n                              </div>\n                              <div className=\"text-sm text-gray-600 dark:text-gray-400 font-medium mt-1\">\n                                💪 {exercise.sets} sets × {exercise.reps} • ⏱️ {exercise.duration} min\n                              </div>\n                            </div>\n                          </div>\n                          <ThreeDotMenu\n                            onEdit={() => handleEditExercise(exercise)}\n                            onDelete={() => handleDeleteExercise(exercise.id)}\n                          />\n                        </div>\n                      </div>\n                  ))\n                )}\n              </div>\n              )}\n\n\n            </TabsContent>\n          </Tabs>\n        </Card>\n\n        {/* Floating Add Button */}\n        <FloatingButton\n          onClick={() => {\n            setEditingExercise(undefined);\n            setIsWeeklyMode(false);\n            setShowWorkoutModal(true);\n          }}\n        />\n\n        {/* Workout Modal */}\n        <WorkoutModal\n          open={showWorkoutModal}\n          onOpenChange={setShowWorkoutModal}\n          onSave={handleSaveExercise}\n          exercise={editingExercise}\n          isWeekly={isWeeklyMode}\n        />\n      </div>\n    </div>\n  );\n}\n","size_bytes":42203},"client/src/components/calendar/monthly-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { generateCalendarDates, getPerformanceColor } from \"@/lib/date-utils\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MonthlyCalendarProps {\n  performanceData?: Record<string, number>;\n  onDateClick?: (date: string) => void;\n}\n\nexport function MonthlyCalendar({ performanceData = {}, onDateClick }: MonthlyCalendarProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  const year = currentDate.getFullYear();\n  const month = currentDate.getMonth();\n  const monthName = currentDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n\n  const calendarDates = generateCalendarDates(year, month);\n\n  const previousMonth = () => {\n    setCurrentDate(new Date(year, month - 1, 1));\n  };\n\n  const nextMonth = () => {\n    setCurrentDate(new Date(year, month + 1, 1));\n  };\n\n  const dayLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  return (\n    <div className=\"premium-card p-3 sm:p-6 lg:p-8 relative overflow-hidden\">\n      <div className=\"absolute top-0 right-0 w-20 h-20 sm:w-32 sm:h-32 lg:w-40 lg:h-40 bg-gradient-to-bl from-accent/5 to-transparent rounded-bl-full\"></div>\n      <div className=\"flex flex-col sm:flex-row items-center justify-between mb-4 sm:mb-6 lg:mb-8 gap-3\">\n        <h3 className=\"text-lg sm:text-xl lg:text-2xl font-bold text-gradient-primary\">📅 Monthly Progress</h3>\n        <div className=\"flex items-center space-x-2 sm:space-x-4\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={previousMonth} className=\"h-8 w-8 sm:h-10 sm:w-10 lg:h-12 lg:w-12 rounded-lg bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700\">\n            <ChevronLeft className=\"h-3 w-3 sm:h-4 sm:w-4 lg:h-5 lg:w-5\" />\n          </Button>\n          <span className=\"text-sm sm:text-lg lg:text-xl font-bold text-gradient-primary px-2 sm:px-4 lg:px-6\">{monthName}</span>\n          <Button variant=\"ghost\" size=\"icon\" onClick={nextMonth} className=\"h-8 w-8 sm:h-10 sm:w-10 lg:h-12 lg:w-12 rounded-lg bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700\">\n            <ChevronRight className=\"h-3 w-3 sm:h-4 sm:w-4 lg:h-5 lg:w-5\" />\n          </Button>\n        </div>\n      </div>\n\n      {/* Day Headers */}\n      <div className=\"grid grid-cols-7 gap-1 sm:gap-2 lg:gap-3 mb-3 sm:mb-4 lg:mb-6\">\n        {dayLabels.map((day) => (\n          <div key={day} className=\"text-center font-bold text-gray-700 dark:text-gray-300 py-1 sm:py-2 lg:py-3 text-xs sm:text-sm\">\n            {day}\n          </div>\n        ))}\n      </div>\n\n      {/* Calendar Grid */}\n      <div className=\"grid grid-cols-7 gap-1 sm:gap-2 lg:gap-3\">\n        {calendarDates.map((dateObj, index) => {\n          if (!dateObj) {\n            return <div key={index} className=\"w-8 h-8 sm:w-12 sm:h-12 lg:w-14 lg:h-14\" />;\n          }\n\n          const performance = performanceData[dateObj.dateString] || 0;\n\n          return (\n            <button\n              key={dateObj.dateString}\n              onClick={() => onDateClick?.(dateObj.dateString)}\n              className={cn(\n                \"w-8 h-8 sm:w-12 sm:h-12 lg:w-14 lg:h-14 flex items-center justify-center rounded-lg sm:rounded-xl lg:rounded-2xl cursor-pointer transition-all duration-300 font-bold text-xs sm:text-sm relative overflow-hidden group hover:scale-110 hover:shadow-lg\",\n                dateObj.isToday\n                  ? \"bg-gradient-to-br from-primary to-accent text-white ring-2 sm:ring-4 ring-primary/30 ring-offset-1 sm:ring-offset-2 dark:ring-offset-gray-800 shadow-lg scale-105\"\n                  : performance > 0\n                  ? performance >= 80\n                    ? \"bg-gradient-to-br from-green-400 to-green-600 text-white shadow-md\"\n                    : performance >= 60\n                    ? \"bg-gradient-to-br from-yellow-400 to-yellow-600 text-white shadow-md\"\n                    : \"bg-gradient-to-br from-red-400 to-red-600 text-white shadow-md\"\n                  : \"bg-gradient-to-br from-gray-200 to-gray-300 dark:from-gray-700 dark:to-gray-800 text-gray-600 dark:text-gray-400 hover:from-gray-100 hover:to-gray-200 dark:hover:from-gray-600 dark:hover:to-gray-700\"\n              )}\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-br from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 rounded-lg sm:rounded-xl lg:rounded-2xl\"></div>\n              <span className=\"relative z-10\">{dateObj.day}</span>\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Performance Legend */}\n      <div className=\"flex items-center justify-center flex-wrap gap-2 sm:gap-4 lg:gap-6 mt-4 sm:mt-6 lg:mt-8 text-xs sm:text-sm\">\n        <div className=\"flex items-center space-x-1 sm:space-x-2 bg-white dark:bg-gray-800 px-2 py-1 sm:px-3 sm:py-2 rounded-lg shadow-sm\">\n          <div className=\"w-3 h-3 sm:w-4 sm:h-4 lg:w-5 lg:h-5 rounded-lg bg-gradient-to-br from-green-400 to-green-600 shadow-sm\"></div>\n          <span className=\"text-gray-700 dark:text-gray-300 font-medium\">Excellent</span>\n        </div>\n        <div className=\"flex items-center space-x-1 sm:space-x-2 bg-white dark:bg-gray-800 px-2 py-1 sm:px-3 sm:py-2 rounded-lg shadow-sm\">\n          <div className=\"w-3 h-3 sm:w-4 sm:h-4 lg:w-5 lg:h-5 rounded-lg bg-gradient-to-br from-yellow-400 to-yellow-600 shadow-sm\"></div>\n          <span className=\"text-gray-700 dark:text-gray-300 font-medium\">Good</span>\n        </div>\n        <div className=\"flex items-center space-x-1 sm:space-x-2 bg-white dark:bg-gray-800 px-2 py-1 sm:px-3 sm:py-2 rounded-lg shadow-sm\">\n          <div className=\"w-3 h-3 sm:w-4 sm:h-4 lg:w-5 lg:h-5 rounded-lg bg-gradient-to-br from-red-400 to-red-600 shadow-sm\"></div>\n          <span className=\"text-gray-700 dark:text-gray-300 font-medium\">Poor</span>\n        </div>\n        <div className=\"flex items-center space-x-1 sm:space-x-2 bg-white dark:bg-gray-800 px-2 py-1 sm:px-3 sm:py-2 rounded-lg shadow-sm\">\n          <div className=\"w-3 h-3 sm:w-4 sm:h-4 lg:w-5 lg:h-5 rounded-lg bg-gradient-to-br from-gray-300 to-gray-400 dark:from-gray-600 dark:to-gray-700 shadow-sm\"></div>\n          <span className=\"text-gray-700 dark:text-gray-300 font-medium\">No Data</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6364},"client/src/components/charts/bar-chart.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\n\ninterface BarChartProps {\n  data: number[];\n  labels: string[];\n  colors?: string[];\n  className?: string;\n  type?: 'bar' | 'line';\n  maxValue?: number;\n}\n\nexport function BarChart({ \n  data, \n  labels, \n  colors = ['#8B5DFF', '#22C55E', '#3B82F6', '#EF4444', '#F59E0B'],\n  className = '',\n  type = 'bar',\n  maxValue = 100\n}: BarChartProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<Chart | null>(null);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Destroy existing chart\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    const ctx = canvasRef.current.getContext('2d');\n    if (!ctx) return;\n\n    // Create gradients for each bar\n    const gradients = colors.map((color, index) => {\n      const gradient = ctx.createLinearGradient(0, 0, 0, 300);\n      gradient.addColorStop(0, color);\n      gradient.addColorStop(1, color + '60');\n      return gradient;\n    });\n\n    const lineGradient = ctx.createLinearGradient(0, 0, 0, 300);\n    lineGradient.addColorStop(0, colors[0] + 'AA');\n    lineGradient.addColorStop(1, colors[0] + '20');\n\n    chartRef.current = new Chart(ctx, {\n      type,\n      data: {\n        labels,\n        datasets: [{\n          data,\n          backgroundColor: type === 'bar' ? gradients : lineGradient,\n          borderColor: type === 'line' ? colors[0] : 'rgba(255, 255, 255, 0.1)',\n          borderWidth: type === 'line' ? 4 : 1,\n          borderRadius: type === 'bar' ? 12 : undefined,\n          borderSkipped: false,\n          fill: type === 'line' ? true : undefined,\n          tension: type === 'line' ? 0.4 : undefined,\n          pointBackgroundColor: type === 'line' ? colors[0] : undefined,\n          pointBorderColor: type === 'line' ? '#ffffff' : undefined,\n          pointBorderWidth: type === 'line' ? 3 : undefined,\n          pointRadius: type === 'line' ? 6 : undefined,\n          pointHoverRadius: type === 'line' ? 8 : undefined,\n          pointHoverBackgroundColor: type === 'line' ? colors[0] : undefined,\n          pointHoverBorderColor: type === 'line' ? '#ffffff' : undefined,\n          pointHoverBorderWidth: type === 'line' ? 4 : undefined,\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: false\n          },\n          tooltip: {\n            backgroundColor: 'rgba(0, 0, 0, 0.9)',\n            titleColor: 'white',\n            bodyColor: 'white',\n            borderColor: 'rgba(255, 255, 255, 0.2)',\n            borderWidth: 1,\n            cornerRadius: 12,\n            displayColors: true,\n            padding: 12,\n            titleFont: {\n              size: 14,\n              weight: 'bold'\n            },\n            bodyFont: {\n              size: 13\n            }\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n            max: maxValue,\n            grid: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            },\n            ticks: {\n              color: '#94A3B8',\n              font: {\n                size: 12,\n                weight: 'normal'\n              },\n              padding: 8\n            }\n          },\n          x: {\n            grid: {\n              display: false\n            },\n            ticks: {\n              color: '#94A3B8',\n              font: {\n                size: 12,\n                weight: 'normal'\n              },\n              padding: 8\n            }\n          }\n        },\n        animation: {\n          duration: 1500,\n          easing: 'easeInOutQuart'\n        },\n        interaction: {\n          intersect: false,\n          mode: 'index'\n        }\n      }\n    });\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.destroy();\n      }\n    };\n  }, [data, labels, colors, type, maxValue]);\n\n  return (\n    <div className={`chart-container ${className} relative`}>\n      <canvas ref={canvasRef}></canvas>\n      <div className=\"absolute inset-0 pointer-events-none opacity-30\">\n        <div className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-br from-primary/5 to-accent/5 rounded-xl\"></div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4257},"client/src/components/charts/pie-chart.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport Chart from 'chart.js/auto';\n\ninterface PieChartProps {\n  data: number[];\n  labels?: string[];\n  colors?: string[];\n  cutout?: string;\n  className?: string;\n}\n\nexport function PieChart({ \n  data, \n  labels = [], \n  colors = ['#8B5DFF', '#E2E8F0'],\n  cutout = '70%',\n  className = '' \n}: PieChartProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const chartRef = useRef<Chart | null>(null);\n\n  useEffect(() => {\n    if (!canvasRef.current) return;\n\n    // Destroy existing chart\n    if (chartRef.current) {\n      chartRef.current.destroy();\n    }\n\n    const ctx = canvasRef.current.getContext('2d');\n    if (!ctx) return;\n\n    // Create gradient colors\n    const gradient1 = ctx.createLinearGradient(0, 0, 0, 300);\n    gradient1.addColorStop(0, colors[0]);\n    gradient1.addColorStop(1, colors[0] + '80');\n    \n    const gradient2 = ctx.createLinearGradient(0, 0, 0, 300);\n    gradient2.addColorStop(0, colors[1] || colors[0]);\n    gradient2.addColorStop(1, (colors[1] || colors[0]) + '40');\n\n    chartRef.current = new Chart(ctx, {\n      type: 'doughnut',\n      data: {\n        labels,\n        datasets: [{\n          data,\n          backgroundColor: [gradient1, gradient2],\n          borderWidth: 3,\n          borderColor: 'rgba(255, 255, 255, 0.8)',\n          hoverBorderWidth: 5,\n          hoverBorderColor: 'rgba(255, 255, 255, 1)',\n          hoverBackgroundColor: [colors[0], colors[1] || colors[0]],\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: false\n          },\n          tooltip: {\n            enabled: labels.length > 0,\n            backgroundColor: 'rgba(0, 0, 0, 0.9)',\n            titleColor: 'white',\n            bodyColor: 'white',\n            borderColor: 'rgba(255, 255, 255, 0.2)',\n            borderWidth: 1,\n            cornerRadius: 12,\n            displayColors: true,\n            padding: 12,\n            titleFont: {\n              size: 14,\n              weight: 'bold'\n            },\n            bodyFont: {\n              size: 13\n            }\n          }\n        },\n        cutout,\n        elements: {\n          arc: {\n            borderWidth: 3,\n            borderRadius: 8,\n            hoverBorderWidth: 5\n          }\n        },\n        animation: {\n          animateRotate: true,\n          animateScale: true,\n          duration: 1500,\n          easing: 'easeInOutQuart'\n        }\n      }\n    });\n\n    return () => {\n      if (chartRef.current) {\n        chartRef.current.destroy();\n      }\n    };\n  }, [data, labels, colors, cutout]);\n\n  return (\n    <div className={`chart-container ${className}`}>\n      <canvas ref={canvasRef}></canvas>\n      <div className=\"absolute inset-0 pointer-events-none\">\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2\">\n          <div className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3028},"client/src/components/layout/navigation.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { useTheme } from \"./theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Moon, Sun, Menu } from \"lucide-react\";\nimport { useState } from \"react\";\n\nconst navItems = [\n  { path: \"/\", label: \"Dashboard\", icon: \"✨\" },\n  { path: \"/daily-task\", label: \"Tasks\", icon: \"🎯\" },\n  { path: \"/workout\", label: \"Fitness\", icon: \"💪\" },\n  { path: \"/mind-workout\", label: \"Mindset\", icon: \"🧠\" },\n  { path: \"/daily-routine\", label: \"Routine\", icon: \"⚡\" },\n  { path: \"/dev-tracker\", label: \"Goals\", icon: \"🚀\" },\n];\n\nexport function Navigation() {\n  const [location] = useLocation();\n  const { theme, setTheme } = useTheme();\n  const [mobileOpen, setMobileOpen] = useState(false);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  const NavLink = ({ path, label, onClick }: { path: string; label: string; onClick?: () => void }) => (\n    <Link href={path} onClick={onClick}>\n      <span\n        className={`nav-link-clean ${\n          location === path ? \"active\" : \"\"\n        }`}\n      >\n        {label}\n      </span>\n    </Link>\n  );\n\n  return (\n    <nav className=\"nav-clean sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-4 lg:px-8\">\n        <div className=\"flex justify-between items-center h-14 sm:h-16\">\n          <div className=\"flex items-center space-x-4 sm:space-x-8\">\n            <div className=\"flex-shrink-0\">\n              <h1 className=\"text-lg sm:text-xl font-bold text-gradient-primary\">\n                Meta Build\n              </h1>\n            </div>\n            <div className=\"hidden md:flex items-center space-x-2 lg:space-x-4\">\n              {navItems.map((item) => (\n                <NavLink key={item.path} path={item.path} label={`${item.icon} ${item.label}`} />\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              className=\"h-9 w-9\"\n            >\n              {theme === \"dark\" ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n            </Button>\n            \n            <div className=\"md:hidden\">\n              <Sheet open={mobileOpen} onOpenChange={setMobileOpen}>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"h-10 w-10 hover:bg-gray-100 dark:hover:bg-gray-800\">\n                    <Menu className=\"h-5 w-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-72 sm:w-80 bg-white dark:bg-gray-900 border-l border-gray-200 dark:border-gray-800\">\n                  <div className=\"flex flex-col space-y-6 mt-8\">\n                    <div className=\"text-center\">\n                      <h2 className=\"text-xl font-bold text-gradient-primary mb-2\">Navigation</h2>\n                      <div className=\"w-12 h-0.5 bg-gradient-to-r from-primary to-accent rounded-full mx-auto\"></div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {navItems.map((item) => (\n                        <NavLink \n                          key={item.path} \n                          path={item.path} \n                          label={`${item.icon} ${item.label}`}\n                          onClick={() => setMobileOpen(false)}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3769},"client/src/components/layout/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"metabuild-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1610},"client/src/components/modals/goal-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Goal, InsertGoal } from \"@shared/schema\";\nimport { format, addWeeks, addMonths, addYears } from \"date-fns\";\n\ninterface GoalModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSave: (goal: InsertGoal) => void;\n  goal?: Goal;\n}\n\nexport function GoalModal({ open, onOpenChange, onSave, goal }: GoalModalProps) {\n  const [formData, setFormData] = useState<InsertGoal>({\n    title: goal?.title || \"\",\n    description: goal?.description || \"\",\n    type: goal?.type || \"weekly\",\n    targetDate: goal?.targetDate || getDefaultTargetDate(\"weekly\"),\n    completed: goal?.completed || false,\n    progress: goal?.progress || 0,\n    parentGoalId: goal?.parentGoalId || undefined,\n  });\n\n  function getDefaultTargetDate(type: string): string {\n    const today = new Date();\n    switch (type) {\n      case \"weekly\":\n        return format(addWeeks(today, 1), \"yyyy-MM-dd\");\n      case \"monthly\":\n        return format(addMonths(today, 1), \"yyyy-MM-dd\");\n      case \"yearly\":\n        return format(addYears(today, 1), \"yyyy-MM-dd\");\n      default:\n        return format(addWeeks(today, 1), \"yyyy-MM-dd\");\n    }\n  }\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSave(formData);\n    onOpenChange(false);\n    // Reset form\n    setFormData({\n      title: \"\",\n      description: \"\",\n      type: \"weekly\",\n      targetDate: getDefaultTargetDate(\"weekly\"),\n      completed: false,\n      progress: 0,\n      parentGoalId: undefined,\n    });\n  };\n\n  const handleTypeChange = (type: string) => {\n    setFormData({\n      ...formData,\n      type: type as any,\n      targetDate: getDefaultTargetDate(type),\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>{goal ? \"Edit Goal\" : \"Add New Goal\"}</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"title\">Goal Title</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n              placeholder=\"Enter goal title\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n              placeholder=\"Enter goal description\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"type\">Goal Type</Label>\n            <Select value={formData.type} onValueChange={handleTypeChange}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"weekly\">🗓️ Weekly Goal</SelectItem>\n                <SelectItem value=\"monthly\">📅 Monthly Goal</SelectItem>\n                <SelectItem value=\"yearly\">📈 Yearly Goal</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"targetDate\">Target Date</Label>\n              <Input\n                id=\"targetDate\"\n                type=\"date\"\n                value={formData.targetDate}\n                onChange={(e) => setFormData({ ...formData, targetDate: e.target.value })}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"progress\">Progress (%)</Label>\n              <Input\n                id=\"progress\"\n                type=\"number\"\n                value={formData.progress}\n                onChange={(e) => setFormData({ ...formData, progress: parseInt(e.target.value) || 0 })}\n                min=\"0\"\n                max=\"100\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\">\n              {goal ? \"Update\" : \"Create\"} Goal\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4842},"client/src/components/modals/mind-activity-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { MindActivity, InsertMindActivity } from \"@shared/schema\";\nimport { getTodayString } from \"@/lib/date-utils\";\n\ninterface MindActivityModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSave: (activity: InsertMindActivity) => void;\n  activity?: MindActivity;\n}\n\nexport function MindActivityModal({ open, onOpenChange, onSave, activity }: MindActivityModalProps) {\n  const [formData, setFormData] = useState<InsertMindActivity>({\n    name: activity?.name || \"\",\n    description: activity?.description || \"\",\n    time: activity?.time || \"\",\n    chatgptRole: activity?.chatgptRole || \"\",\n    completed: activity?.completed || false,\n    date: activity?.date || getTodayString(),\n    status: activity?.status || \"pending\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSave(formData);\n    onOpenChange(false);\n    // Reset form\n    setFormData({\n      name: \"\",\n      description: \"\",\n      time: \"\",\n      chatgptRole: \"\",\n      completed: false,\n      date: getTodayString(),\n      status: \"pending\",\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>{activity ? \"Edit Mind Activity\" : \"Add New Mind Activity\"}</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Activity Name</Label>\n            <Input\n              id=\"name\"\n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              placeholder=\"Enter activity name\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n              placeholder=\"Enter activity description\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"time\">Time</Label>\n            <Input\n              id=\"time\"\n              type=\"time\"\n              value={formData.time}\n              onChange={(e) => setFormData({ ...formData, time: e.target.value })}\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"chatgptRole\">ChatGPT Role</Label>\n            <Textarea\n              id=\"chatgptRole\"\n              value={formData.chatgptRole}\n              onChange={(e) => setFormData({ ...formData, chatgptRole: e.target.value })}\n              placeholder=\"Describe how ChatGPT should assist with this activity\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"status\">Status</Label>\n            <Select value={formData.status} onValueChange={(value: any) => setFormData({ ...formData, status: value })}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\">\n              {activity ? \"Update\" : \"Create\"} Activity\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4248},"client/src/components/modals/routine-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RoutineItem, InsertRoutineItem } from \"@shared/schema\";\nimport { getTodayString, isCurrentDay } from \"@/lib/date-utils\";\n\ninterface RoutineModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSave: (routine: InsertRoutineItem) => void;\n  routine?: RoutineItem;\n}\n\nexport function RoutineModal({ open, onOpenChange, onSave, routine }: RoutineModalProps) {\n  const [formData, setFormData] = useState<InsertRoutineItem>({\n    name: routine?.name || \"\",\n    time: routine?.time || \"\",\n    duration: routine?.duration || 30,\n    type: routine?.type || \"morning\",\n    days: routine?.days || [],\n    completed: routine?.completed || false,\n    date: routine?.date || getTodayString(),\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSave(formData);\n    onOpenChange(false);\n    // Reset form\n    setFormData({\n      name: \"\",\n      time: \"\",\n      duration: 30,\n      type: \"morning\",\n      days: [],\n      completed: false,\n      date: getTodayString(),\n    });\n  };\n\n  const weekDays = [\n    { value: \"sunday\", label: \"Sunday\" },\n    { value: \"monday\", label: \"Monday\" },\n    { value: \"tuesday\", label: \"Tuesday\" },\n    { value: \"wednesday\", label: \"Wednesday\" },\n    { value: \"thursday\", label: \"Thursday\" },\n    { value: \"friday\", label: \"Friday\" },\n    { value: \"saturday\", label: \"Saturday\" },\n  ];\n\n  const handleDayToggle = (day: string, checked: boolean) => {\n    const currentDays = formData.days || [];\n    if (checked) {\n      setFormData({ ...formData, days: [...currentDays, day as any] });\n    } else {\n      setFormData({ ...formData, days: currentDays.filter(d => d !== day) });\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>{routine ? \"Edit Routine\" : \"Add New Routine\"}</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Routine Name</Label>\n            <Input\n              id=\"name\"\n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              placeholder=\"Enter routine name\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"type\">Routine Type</Label>\n            <Select value={formData.type} onValueChange={(value: any) => setFormData({ ...formData, type: value })}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"morning\">☀️ Morning Routine</SelectItem>\n                <SelectItem value=\"night\">🌙 Night Routine</SelectItem>\n                <SelectItem value=\"weekly\">📆 Weekly Routine</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"time\">Time</Label>\n              <Input\n                id=\"time\"\n                type=\"time\"\n                value={formData.time}\n                onChange={(e) => setFormData({ ...formData, time: e.target.value })}\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"duration\">Duration (minutes)</Label>\n              <Input\n                id=\"duration\"\n                type=\"number\"\n                value={formData.duration}\n                onChange={(e) => setFormData({ ...formData, duration: parseInt(e.target.value) || 0 })}\n                min=\"1\"\n                required\n              />\n            </div>\n          </div>\n\n          {formData.type === \"weekly\" && (\n            <div>\n              <Label>Select Days</Label>\n              <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                {weekDays.map((day) => {\n                  const isToday = isCurrentDay(day.value);\n                  return (\n                    <div key={day.value} className={`flex items-center space-x-2 p-2 rounded-lg transition-colors ${\n                      isToday ? 'bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800' : ''\n                    }`}>\n                      <Checkbox\n                        id={`day-${day.value}`}\n                        checked={(formData.days || []).includes(day.value as any)}\n                        onCheckedChange={(checked) => handleDayToggle(day.value, !!checked)}\n                      />\n                      <Label htmlFor={`day-${day.value}`} className={`text-sm cursor-pointer ${\n                        isToday ? 'font-semibold text-blue-700 dark:text-blue-300' : ''\n                      }`}>\n                        {day.label}\n                        {isToday && (\n                          <span className=\"ml-1 text-xs bg-blue-500 text-white px-1 py-0.5 rounded\">Today</span>\n                        )}\n                      </Label>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\">\n              {routine ? \"Update\" : \"Create\"} Routine\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5942},"client/src/components/modals/task-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Task, InsertTask } from \"@shared/schema\";\nimport { getTodayString } from \"@/lib/date-utils\";\n\ninterface TaskModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSave: (task: InsertTask) => void;\n  task?: Task;\n}\n\nexport function TaskModal({ open, onOpenChange, onSave, task }: TaskModalProps) {\n  const [formData, setFormData] = useState<InsertTask>({\n    title: task?.title || \"\",\n    description: task?.description || \"\",\n    time: task?.time || \"\",\n    duration: task?.duration || 60,\n    status: task?.status || \"pending\",\n    completed: task?.completed || false,\n    date: task?.date || getTodayString(),\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Basic validation on frontend\n    if (!formData.title.trim()) {\n      return; // Don't submit if title is empty\n    }\n    \n    onSave(formData);\n    onOpenChange(false);\n    // Reset form\n    setFormData({\n      title: \"\",\n      description: \"\",\n      time: \"\",\n      duration: 60,\n      status: \"pending\",\n      completed: false,\n      date: getTodayString(),\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>{task ? \"Edit Task\" : \"Add New Task\"}</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"title\">Title</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n              placeholder=\"Enter task title\"\n              required\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description}\n              onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n              placeholder=\"Enter task description\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"time\">Time</Label>\n              <Input\n                id=\"time\"\n                type=\"time\"\n                value={formData.time}\n                onChange={(e) => setFormData({ ...formData, time: e.target.value })}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"duration\">Duration (minutes)</Label>\n              <Input\n                id=\"duration\"\n                type=\"number\"\n                value={formData.duration}\n                onChange={(e) => setFormData({ ...formData, duration: parseInt(e.target.value) || 0 })}\n                min=\"1\"\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"status\">Status</Label>\n            <Select value={formData.status} onValueChange={(value: any) => setFormData({ ...formData, status: value })}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\">\n              {task ? \"Update\" : \"Create\"} Task\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4241},"client/src/components/modals/workout-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Exercise, InsertExercise } from \"@shared/schema\";\nimport { getTodayString, getCurrentDayName, isCurrentDay } from \"@/lib/date-utils\";\n\ninterface WorkoutModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSave: (exercise: InsertExercise) => void;\n  exercise?: Exercise;\n  isWeekly?: boolean;\n}\n\nexport function WorkoutModal({ open, onOpenChange, onSave, exercise, isWeekly = false }: WorkoutModalProps) {\n  const [formData, setFormData] = useState<InsertExercise>({\n    name: exercise?.name || \"\",\n    sets: exercise?.sets || 1,\n    reps: exercise?.reps || \"\",\n    duration: exercise?.duration || 30,\n    completed: exercise?.completed || false,\n    date: exercise?.date || getTodayString(),\n    day: exercise?.day || getCurrentDayName() as any,\n    workoutType: exercise?.workoutType || \"\",\n    isWeekly: exercise?.isWeekly || isWeekly,\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSave(formData);\n    onOpenChange(false);\n    // Reset form\n    setFormData({\n      name: \"\",\n      sets: 1,\n      reps: \"\",\n      duration: 30,\n      completed: false,\n      date: getTodayString(),\n      day: getCurrentDayName() as any,\n      workoutType: \"\",\n      isWeekly: isWeekly,\n    });\n  };\n\n  const days = [\n    { value: \"sunday\", label: \"Sunday\" },\n    { value: \"monday\", label: \"Monday\" },\n    { value: \"tuesday\", label: \"Tuesday\" },\n    { value: \"wednesday\", label: \"Wednesday\" },\n    { value: \"thursday\", label: \"Thursday\" },\n    { value: \"friday\", label: \"Friday\" },\n    { value: \"saturday\", label: \"Saturday\" },\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>\n            {exercise ? \"Edit Exercise\" : `Add New ${isWeekly ? \"Weekly\" : \"Daily\"} Exercise`}\n          </DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Exercise Name</Label>\n            <Input\n              id=\"name\"\n              value={formData.name}\n              onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n              placeholder=\"Enter exercise name\"\n              required\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"sets\">Sets</Label>\n              <Input\n                id=\"sets\"\n                type=\"number\"\n                value={formData.sets}\n                onChange={(e) => setFormData({ ...formData, sets: parseInt(e.target.value) || 1 })}\n                min=\"1\"\n                required\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"reps\">Reps</Label>\n              <Input\n                id=\"reps\"\n                value={formData.reps}\n                onChange={(e) => setFormData({ ...formData, reps: e.target.value })}\n                placeholder=\"e.g., 10 or 1 min\"\n                required\n              />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"duration\">Duration (minutes)</Label>\n            <Input\n              id=\"duration\"\n              type=\"number\"\n              value={formData.duration}\n              onChange={(e) => setFormData({ ...formData, duration: parseInt(e.target.value) || 0 })}\n              min=\"1\"\n            />\n          </div>\n\n          {isWeekly && (\n            <div>\n              <Label htmlFor=\"day\">Day</Label>\n              <Select value={formData.day} onValueChange={(value: any) => setFormData({ ...formData, day: value })}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select day\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {days.map((day) => {\n                    const isToday = isCurrentDay(day.value);\n                    return (\n                      <SelectItem key={day.value} value={day.value} className={\n                        isToday ? 'bg-blue-50 dark:bg-blue-900/20 font-semibold text-blue-700 dark:text-blue-300' : ''\n                      }>\n                        {day.label}\n                        {isToday && (\n                          <span className=\"ml-2 text-xs bg-blue-500 text-white px-1 py-0.5 rounded\">Today</span>\n                        )}\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          <div>\n            <Label htmlFor=\"workoutType\">Workout Type (optional)</Label>\n            <Input\n              id=\"workoutType\"\n              value={formData.workoutType}\n              onChange={(e) => setFormData({ ...formData, workoutType: e.target.value })}\n              placeholder=\"e.g., Chest Day, Cardio\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"isWeekly\"\n              checked={formData.isWeekly}\n              onCheckedChange={(checked) => setFormData({ ...formData, isWeekly: !!checked })}\n            />\n            <Label htmlFor=\"isWeekly\">Weekly Exercise</Label>\n          </div>\n\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => onOpenChange(false)}>\n              Cancel\n            </Button>\n            <Button type=\"submit\">\n              {exercise ? \"Update\" : \"Create\"} Exercise\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6021},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/floating-button.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FloatingButtonProps {\n  onClick: () => void;\n  className?: string;\n  icon?: React.ReactNode;\n}\n\nexport function FloatingButton({ onClick, className, icon = <Plus className=\"h-5 w-5\" /> }: FloatingButtonProps) {\n  return (\n    <Button\n      onClick={onClick}\n      className={cn(\"floating-btn-clean\", className)}\n      size=\"icon\"\n    >\n      {icon}\n    </Button>\n  );\n}\n","size_bytes":501},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/three-dot-menu.tsx":{"content":"import {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { MoreVertical, Edit, Trash2 } from \"lucide-react\";\n\ninterface ThreeDotMenuProps {\n  onEdit?: () => void;\n  onDelete?: () => void;\n  className?: string;\n}\n\nexport function ThreeDotMenu({ onEdit, onDelete, className }: ThreeDotMenuProps) {\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className={`three-dot-menu opacity-0 group-hover:opacity-100 transition-opacity p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 ${className}`}\n        >\n          <MoreVertical className=\"h-4 w-4 text-gray-500\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        {onEdit && (\n          <DropdownMenuItem onClick={onEdit} className=\"cursor-pointer\">\n            <Edit className=\"h-4 w-4 mr-2\" />\n            Edit\n          </DropdownMenuItem>\n        )}\n        {onDelete && (\n          <DropdownMenuItem onClick={onDelete} className=\"cursor-pointer text-destructive\">\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            Delete\n          </DropdownMenuItem>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":1352},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/public/sw.js":{"content":"const CACHE_NAME = 'meta-build-v1';\nconst STATIC_CACHE = 'meta-build-static-v1';\n\n// Files to cache for offline use\nconst STATIC_FILES = [\n  '/',\n  '/index.html',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/manifest.json'\n];\n\n// API endpoints that should work offline\nconst API_ENDPOINTS = [\n  '/api/tasks',\n  '/api/water-intake',\n  '/api/exercises',\n  '/api/mind-activities',\n  '/api/routine-items',\n  '/api/goals',\n  '/api/performance',\n  '/api/streak'\n];\n\n// Install event - cache static files\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(STATIC_CACHE)\n      .then((cache) => {\n        return cache.addAll(STATIC_FILES);\n      })\n      .then(() => {\n        return self.skipWaiting();\n      })\n  );\n});\n\n// Activate event - clean up old caches\nself.addEventListener('activate', (event) => {\n  event.waitUntil(\n    caches.keys().then((cacheNames) => {\n      return Promise.all(\n        cacheNames.map((cacheName) => {\n          if (cacheName !== CACHE_NAME && cacheName !== STATIC_CACHE) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    }).then(() => {\n      return self.clients.claim();\n    })\n  );\n});\n\n// Fetch event - serve from cache when offline\nself.addEventListener('fetch', (event) => {\n  const { request } = event;\n  const url = new URL(request.url);\n\n  // Handle API requests\n  if (url.pathname.startsWith('/api/')) {\n    event.respondWith(handleApiRequest(request));\n    return;\n  }\n\n  // Handle static files\n  event.respondWith(\n    caches.match(request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        return response || fetch(request)\n          .then((fetchResponse) => {\n            // Cache successful responses\n            if (fetchResponse.status === 200) {\n              const responseClone = fetchResponse.clone();\n              caches.open(CACHE_NAME)\n                .then((cache) => {\n                  cache.put(request, responseClone);\n                });\n            }\n            return fetchResponse;\n          });\n      })\n      .catch(() => {\n        // Fallback for offline mode\n        if (request.destination === 'document') {\n          return caches.match('/');\n        }\n      })\n  );\n});\n\n// Handle API requests with offline support\nasync function handleApiRequest(request) {\n  const url = new URL(request.url);\n  const method = request.method;\n  \n  try {\n    // Try network first\n    const response = await fetch(request);\n    \n    // Cache successful GET requests\n    if (method === 'GET' && response.status === 200) {\n      const responseClone = response.clone();\n      const cache = await caches.open(CACHE_NAME);\n      cache.put(request, responseClone);\n    }\n    \n    return response;\n  } catch (error) {\n    // Network failed, try cache for GET requests\n    if (method === 'GET') {\n      const cachedResponse = await caches.match(request);\n      if (cachedResponse) {\n        return cachedResponse;\n      }\n    }\n    \n    // For offline POST/PATCH/DELETE, store in IndexedDB for later sync\n    if (['POST', 'PATCH', 'DELETE'].includes(method)) {\n      await storeOfflineRequest(request);\n      return new Response(JSON.stringify({ offline: true, queued: true }), {\n        status: 202,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // Return empty array for GET requests when offline\n    return new Response(JSON.stringify([]), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n\n// Store offline requests for later sync\nasync function storeOfflineRequest(request) {\n  const body = await request.text();\n  const offlineRequest = {\n    url: request.url,\n    method: request.method,\n    headers: Object.fromEntries(request.headers.entries()),\n    body: body,\n    timestamp: Date.now()\n  };\n  \n  // Store in localStorage as fallback (in real app, use IndexedDB)\n  const offlineRequests = JSON.parse(localStorage.getItem('offlineRequests') || '[]');\n  offlineRequests.push(offlineRequest);\n  localStorage.setItem('offlineRequests', JSON.stringify(offlineRequests));\n}\n\n// Background sync for offline requests\nself.addEventListener('sync', (event) => {\n  if (event.tag === 'background-sync') {\n    event.waitUntil(syncOfflineRequests());\n  }\n});\n\n// Sync offline requests when back online\nasync function syncOfflineRequests() {\n  const offlineRequests = JSON.parse(localStorage.getItem('offlineRequests') || '[]');\n  \n  for (const req of offlineRequests) {\n    try {\n      await fetch(req.url, {\n        method: req.method,\n        headers: req.headers,\n        body: req.body\n      });\n    } catch (error) {\n      console.log('Failed to sync request:', error);\n      // Keep failed requests for next sync attempt\n      return;\n    }\n  }\n  \n  // Clear synced requests\n  localStorage.removeItem('offlineRequests');\n}\n\n// Listen for online/offline events\nself.addEventListener('message', (event) => {\n  if (event.data && event.data.type === 'SKIP_WAITING') {\n    self.skipWaiting();\n  }\n  \n  if (event.data && event.data.type === 'SYNC_OFFLINE_REQUESTS') {\n    syncOfflineRequests();\n  }\n});","size_bytes":5128},"client/src/lib/api-client.ts":{"content":"import { OfflineStorage } from './offline-storage';\nimport { \n  Task, InsertTask, \n  WaterIntake, InsertWaterIntake,\n  Exercise, InsertExercise,\n  MindActivity, InsertMindActivity,\n  RoutineItem, InsertRoutineItem,\n  Goal, InsertGoal,\n  Performance, InsertPerformance\n} from \"@shared/schema\";\n\n// API Client that works offline\nexport class ApiClient {\n  private static isOnline(): boolean {\n    return navigator.onLine;\n  }\n\n  // Generic API request function\n  private static async request<T>(\n    method: string,\n    endpoint: string,\n    data?: any\n  ): Promise<T> {\n    try {\n      const response = await fetch(endpoint, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: data ? JSON.stringify(data) : undefined,\n      });\n\n      if (!response.ok) {\n        // For validation errors (400), parse the error message and throw it\n        if (response.status === 400) {\n          const errorData = await response.json();\n          throw new Error(errorData.details || errorData.message || 'Validation error');\n        }\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      // Re-throw validation errors instead of going offline\n      if (error instanceof Error && error.message !== 'OFFLINE' && error.message.includes('Validation') || error instanceof Error && error.message.includes('required')) {\n        throw error;\n      }\n      \n      // If offline or network error, use local storage\n      console.log('API request failed, using offline storage:', error);\n      throw new Error('OFFLINE');\n    }\n  }\n\n  // Tasks API\n  static async getTasks(date?: string): Promise<Task[]> {\n    if (!this.isOnline()) {\n      return OfflineStorage.getTasks(date);\n    }\n\n    try {\n      const url = date ? `/api/tasks?date=${date}` : '/api/tasks';\n      return await this.request<Task[]>('GET', url);\n    } catch (error) {\n      return OfflineStorage.getTasks(date);\n    }\n  }\n\n  static async createTask(task: InsertTask): Promise<Task> {\n    if (!this.isOnline()) {\n      return OfflineStorage.createTask(task);\n    }\n\n    try {\n      return await this.request<Task>('POST', '/api/tasks', task);\n    } catch (error) {\n      // Re-throw validation errors instead of going offline\n      if (error instanceof Error && (error.message.includes('required') || error.message.includes('Validation'))) {\n        throw error;\n      }\n      return OfflineStorage.createTask(task);\n    }\n  }\n\n  static async updateTask(id: string, updates: Partial<Task>): Promise<Task> {\n    if (!this.isOnline()) {\n      return OfflineStorage.updateTask(id, updates);\n    }\n\n    try {\n      return await this.request<Task>('PATCH', `/api/tasks/${id}`, updates);\n    } catch (error) {\n      return OfflineStorage.updateTask(id, updates);\n    }\n  }\n\n  static async deleteTask(id: string): Promise<void> {\n    if (!this.isOnline()) {\n      return OfflineStorage.deleteTask(id);\n    }\n\n    try {\n      await this.request<void>('DELETE', `/api/tasks/${id}`);\n    } catch (error) {\n      OfflineStorage.deleteTask(id);\n    }\n  }\n\n  // Water Intake API\n  static async getWaterIntake(date: string): Promise<WaterIntake | null> {\n    if (!this.isOnline()) {\n      return OfflineStorage.getWaterIntake(date);\n    }\n\n    try {\n      return await this.request<WaterIntake>('GET', `/api/water-intake?date=${date}`);\n    } catch (error) {\n      return OfflineStorage.getWaterIntake(date);\n    }\n  }\n\n  static async createOrUpdateWaterIntake(water: InsertWaterIntake): Promise<WaterIntake> {\n    if (!this.isOnline()) {\n      return OfflineStorage.createOrUpdateWaterIntake(water);\n    }\n\n    try {\n      return await this.request<WaterIntake>('POST', '/api/water-intake', water);\n    } catch (error) {\n      return OfflineStorage.createOrUpdateWaterIntake(water);\n    }\n  }\n\n  // Exercises API\n  static async getExercises(date?: string, isWeekly?: boolean): Promise<Exercise[]> {\n    if (!this.isOnline()) {\n      return OfflineStorage.getExercises(date, isWeekly);\n    }\n\n    try {\n      let url = '/api/exercises';\n      const params = new URLSearchParams();\n      if (date) params.append('date', date);\n      if (isWeekly !== undefined) params.append('isWeekly', isWeekly.toString());\n      if (params.toString()) url += `?${params.toString()}`;\n      \n      return await this.request<Exercise[]>('GET', url);\n    } catch (error) {\n      return OfflineStorage.getExercises(date, isWeekly);\n    }\n  }\n\n  static async createExercise(exercise: InsertExercise): Promise<Exercise> {\n    if (!this.isOnline()) {\n      return OfflineStorage.createExercise(exercise);\n    }\n\n    try {\n      return await this.request<Exercise>('POST', '/api/exercises', exercise);\n    } catch (error) {\n      return OfflineStorage.createExercise(exercise);\n    }\n  }\n\n  static async updateExercise(id: string, updates: Partial<Exercise>): Promise<Exercise> {\n    if (!this.isOnline()) {\n      return OfflineStorage.updateExercise(id, updates);\n    }\n\n    try {\n      return await this.request<Exercise>('PATCH', `/api/exercises/${id}`, updates);\n    } catch (error) {\n      return OfflineStorage.updateExercise(id, updates);\n    }\n  }\n\n  static async deleteExercise(id: string): Promise<void> {\n    if (!this.isOnline()) {\n      return OfflineStorage.deleteExercise(id);\n    }\n\n    try {\n      await this.request<void>('DELETE', `/api/exercises/${id}`);\n    } catch (error) {\n      OfflineStorage.deleteExercise(id);\n    }\n  }\n\n  // Mind Activities API\n  static async getMindActivities(date?: string): Promise<MindActivity[]> {\n    if (!this.isOnline()) {\n      return OfflineStorage.getMindActivities(date);\n    }\n\n    try {\n      const url = date ? `/api/mind-activities?date=${date}` : '/api/mind-activities';\n      return await this.request<MindActivity[]>('GET', url);\n    } catch (error) {\n      return OfflineStorage.getMindActivities(date);\n    }\n  }\n\n  static async createMindActivity(activity: InsertMindActivity): Promise<MindActivity> {\n    if (!this.isOnline()) {\n      return OfflineStorage.createMindActivity(activity);\n    }\n\n    try {\n      return await this.request<MindActivity>('POST', '/api/mind-activities', activity);\n    } catch (error) {\n      return OfflineStorage.createMindActivity(activity);\n    }\n  }\n\n  static async updateMindActivity(id: string, updates: Partial<MindActivity>): Promise<MindActivity> {\n    if (!this.isOnline()) {\n      return OfflineStorage.updateMindActivity(id, updates);\n    }\n\n    try {\n      return await this.request<MindActivity>('PATCH', `/api/mind-activities/${id}`, updates);\n    } catch (error) {\n      return OfflineStorage.updateMindActivity(id, updates);\n    }\n  }\n\n  static async deleteMindActivity(id: string): Promise<void> {\n    if (!this.isOnline()) {\n      return OfflineStorage.deleteMindActivity(id);\n    }\n\n    try {\n      await this.request<void>('DELETE', `/api/mind-activities/${id}`);\n    } catch (error) {\n      OfflineStorage.deleteMindActivity(id);\n    }\n  }\n\n  // Routine Items API\n  static async getRoutineItems(type?: string): Promise<RoutineItem[]> {\n    if (!this.isOnline()) {\n      return OfflineStorage.getRoutineItems(type);\n    }\n\n    try {\n      const url = type ? `/api/routine-items?type=${type}` : '/api/routine-items';\n      return await this.request<RoutineItem[]>('GET', url);\n    } catch (error) {\n      return OfflineStorage.getRoutineItems(type);\n    }\n  }\n\n  static async createRoutineItem(item: InsertRoutineItem): Promise<RoutineItem> {\n    if (!this.isOnline()) {\n      return OfflineStorage.createRoutineItem(item);\n    }\n\n    try {\n      return await this.request<RoutineItem>('POST', '/api/routine-items', item);\n    } catch (error) {\n      return OfflineStorage.createRoutineItem(item);\n    }\n  }\n\n  static async updateRoutineItem(id: string, updates: Partial<RoutineItem>): Promise<RoutineItem> {\n    if (!this.isOnline()) {\n      return OfflineStorage.updateRoutineItem(id, updates);\n    }\n\n    try {\n      return await this.request<RoutineItem>('PATCH', `/api/routine-items/${id}`, updates);\n    } catch (error) {\n      return OfflineStorage.updateRoutineItem(id, updates);\n    }\n  }\n\n  static async deleteRoutineItem(id: string): Promise<void> {\n    if (!this.isOnline()) {\n      return OfflineStorage.deleteRoutineItem(id);\n    }\n\n    try {\n      await this.request<void>('DELETE', `/api/routine-items/${id}`);\n    } catch (error) {\n      OfflineStorage.deleteRoutineItem(id);\n    }\n  }\n\n  // Goals API\n  static async getGoals(type?: string): Promise<Goal[]> {\n    if (!this.isOnline()) {\n      return OfflineStorage.getGoals(type);\n    }\n\n    try {\n      const url = type ? `/api/goals?type=${type}` : '/api/goals';\n      return await this.request<Goal[]>('GET', url);\n    } catch (error) {\n      return OfflineStorage.getGoals(type);\n    }\n  }\n\n  static async createGoal(goal: InsertGoal): Promise<Goal> {\n    if (!this.isOnline()) {\n      return OfflineStorage.createGoal(goal);\n    }\n\n    try {\n      return await this.request<Goal>('POST', '/api/goals', goal);\n    } catch (error) {\n      return OfflineStorage.createGoal(goal);\n    }\n  }\n\n  static async updateGoal(id: string, updates: Partial<Goal>): Promise<Goal> {\n    if (!this.isOnline()) {\n      return OfflineStorage.updateGoal(id, updates);\n    }\n\n    try {\n      return await this.request<Goal>('PATCH', `/api/goals/${id}`, updates);\n    } catch (error) {\n      return OfflineStorage.updateGoal(id, updates);\n    }\n  }\n\n  static async deleteGoal(id: string): Promise<void> {\n    if (!this.isOnline()) {\n      return OfflineStorage.deleteGoal(id);\n    }\n\n    try {\n      await this.request<void>('DELETE', `/api/goals/${id}`);\n    } catch (error) {\n      OfflineStorage.deleteGoal(id);\n    }\n  }\n\n  // Performance API\n  static async getPerformance(date?: string): Promise<Performance[]> {\n    if (!this.isOnline()) {\n      return OfflineStorage.getPerformance(date);\n    }\n\n    try {\n      const url = date ? `/api/performance?date=${date}` : '/api/performance';\n      return await this.request<Performance[]>('GET', url);\n    } catch (error) {\n      return OfflineStorage.getPerformance(date);\n    }\n  }\n\n  static async createOrUpdatePerformance(performance: InsertPerformance): Promise<Performance> {\n    if (!this.isOnline()) {\n      return OfflineStorage.createOrUpdatePerformance(performance);\n    }\n\n    try {\n      return await this.request<Performance>('POST', '/api/performance', performance);\n    } catch (error) {\n      return OfflineStorage.createOrUpdatePerformance(performance);\n    }\n  }\n\n  // Streak API\n  static async getStreak(): Promise<{ id: string; current: number; highest: number }> {\n    if (!this.isOnline()) {\n      return OfflineStorage.getStreak();\n    }\n\n    try {\n      return await this.request<{ id: string; current: number; highest: number }>('GET', '/api/streak');\n    } catch (error) {\n      return OfflineStorage.getStreak();\n    }\n  }\n\n  static async updateStreak(updates: { current: number; highest: number }): Promise<{ id: string; current: number; highest: number }> {\n    if (!this.isOnline()) {\n      return OfflineStorage.updateStreak(updates);\n    }\n\n    try {\n      return await this.request<{ id: string; current: number; highest: number }>('PATCH', '/api/streak', updates);\n    } catch (error) {\n      return OfflineStorage.updateStreak(updates);\n    }\n  }\n}","size_bytes":11352},"client/src/lib/init-data.ts":{"content":"import { OfflineStorage } from './offline-storage';\n\n// Initialize app with sample data for better user experience\nexport const initializeSampleData = () => {\n  // Check if data already exists\n  const existingTasks = OfflineStorage.getTasks();\n  const existingGoals = OfflineStorage.getGoals();\n  const existingRoutines = OfflineStorage.getRoutineItems();\n  \n  // Only initialize if no data exists\n  if (existingTasks.length === 0) {\n    // Add sample tasks for today\n    const today = new Date().toISOString().split('T')[0];\n    \n    OfflineStorage.createTask({\n      title: \"Review daily goals\",\n      description: \"Check and update today's priorities\",\n      date: today,\n      completed: false,\n      status: \"pending\",\n      time: \"09:00\",\n      duration: 15\n    });\n    \n    OfflineStorage.createTask({\n      title: \"Drink 8 glasses of water\",\n      description: \"Stay hydrated throughout the day\",\n      date: today,\n      completed: false,\n      status: \"pending\",\n      time: \"10:00\",\n      duration: undefined\n    });\n    \n    OfflineStorage.createTask({\n      title: \"Complete workout routine\",\n      description: \"Follow today's exercise plan\",\n      date: today,\n      completed: false,\n      status: \"pending\",\n      time: \"18:00\",\n      duration: 45\n    });\n  }\n  \n  // Initialize goals if none exist\n  if (existingGoals.length === 0) {\n    // Add 2025 development goals\n    OfflineStorage.createGoal({\n      title: \"2025: Hit ₹60K/month as Full-Stack Developer\",\n      description: \"Master modern web development stack and land high-paying remote opportunities\",\n      type: \"yearly\",\n      targetDate: \"2025-12-31\",\n      completed: false,\n      progress: 25\n    });\n    \n    OfflineStorage.createGoal({\n      title: \"April 2025 - Foundation & Setup\",\n      description: \"Complete JavaScript fundamentals, setup development environment, and create portfolio foundation\",\n      type: \"monthly\", \n      targetDate: \"2025-04-30\",\n      completed: false,\n      progress: 60\n    });\n    \n    OfflineStorage.createGoal({\n      title: \"Week 1: Advanced JavaScript Mastery\",\n      description: \"Deep dive into ES6+, async/await, closures, prototypes, and modern JavaScript patterns. Complete 3 complex projects.\",\n      type: \"weekly\",\n      targetDate: \"2025-04-07\",\n      completed: false,\n      progress: 80\n    });\n  }\n  \n  // COMPLETELY DISABLED: No client-side routine initialization\n  // Server handles ALL skincare routine data to prevent any duplicates\n  // Do not add any routine creation code here\n  \n  console.log('✅ Sample data initialized for offline use');\n};","size_bytes":2587},"client/src/lib/offline-storage.ts":{"content":"import { \n  Task, InsertTask, \n  WaterIntake, InsertWaterIntake,\n  Exercise, InsertExercise,\n  MindActivity, InsertMindActivity,\n  RoutineItem, InsertRoutineItem,\n  Goal, InsertGoal,\n  Performance, InsertPerformance\n} from \"@shared/schema\";\n\n// Local storage keys\nconst STORAGE_KEYS = {\n  TASKS: 'meta-build-tasks',\n  WATER: 'meta-build-water',\n  EXERCISES: 'meta-build-exercises',\n  MIND_ACTIVITIES: 'meta-build-mind-activities',\n  ROUTINE_ITEMS: 'meta-build-routine-items',\n  GOALS: 'meta-build-goals',\n  PERFORMANCE: 'meta-build-performance',\n  STREAK: 'meta-build-streak',\n  OFFLINE_REQUESTS: 'meta-build-offline-requests'\n};\n\n// Utility functions for local storage\nexport class OfflineStorage {\n  // Generic storage methods\n  private static getItems<T>(key: string): T[] {\n    try {\n      const data = localStorage.getItem(key);\n      return data ? JSON.parse(data) : [];\n    } catch (error) {\n      console.error(`Failed to get ${key}:`, error);\n      return [];\n    }\n  }\n\n  private static setItems<T>(key: string, items: T[]): void {\n    try {\n      localStorage.setItem(key, JSON.stringify(items));\n    } catch (error) {\n      console.error(`Failed to set ${key}:`, error);\n    }\n  }\n\n  private static generateId(): string {\n    return Date.now().toString() + Math.random().toString(36).substr(2, 9);\n  }\n\n  // Tasks\n  static getTasks(date?: string): Task[] {\n    const tasks = this.getItems<Task>(STORAGE_KEYS.TASKS);\n    return date ? tasks.filter(task => task.date === date) : tasks;\n  }\n\n  static createTask(insertTask: InsertTask): Task {\n    const tasks = this.getItems<Task>(STORAGE_KEYS.TASKS);\n    const task: Task = { \n      ...insertTask, \n      id: this.generateId(), \n      createdAt: new Date().toISOString() \n    };\n    tasks.push(task);\n    this.setItems(STORAGE_KEYS.TASKS, tasks);\n    return task;\n  }\n\n  static updateTask(id: string, updates: Partial<Task>): Task {\n    const tasks = this.getItems<Task>(STORAGE_KEYS.TASKS);\n    const index = tasks.findIndex(t => t.id === id);\n    if (index === -1) throw new Error('Task not found');\n    \n    const updatedTask = { ...tasks[index], ...updates };\n    tasks[index] = updatedTask;\n    this.setItems(STORAGE_KEYS.TASKS, tasks);\n    return updatedTask;\n  }\n\n  static deleteTask(id: string): void {\n    const tasks = this.getItems<Task>(STORAGE_KEYS.TASKS);\n    const filtered = tasks.filter(t => t.id !== id);\n    this.setItems(STORAGE_KEYS.TASKS, filtered);\n  }\n\n  // Water Intake\n  static getWaterIntake(date: string): WaterIntake | null {\n    const waterIntakes = this.getItems<WaterIntake>(STORAGE_KEYS.WATER);\n    return waterIntakes.find(w => w.date === date) || null;\n  }\n\n  static createOrUpdateWaterIntake(insertWater: InsertWaterIntake): WaterIntake {\n    const waterIntakes = this.getItems<WaterIntake>(STORAGE_KEYS.WATER);\n    const existingIndex = waterIntakes.findIndex(w => w.date === insertWater.date);\n    \n    if (existingIndex !== -1) {\n      const updated = { ...waterIntakes[existingIndex], ...insertWater };\n      waterIntakes[existingIndex] = updated;\n      this.setItems(STORAGE_KEYS.WATER, waterIntakes);\n      return updated;\n    }\n    \n    const waterIntake: WaterIntake = { ...insertWater, id: this.generateId() };\n    waterIntakes.push(waterIntake);\n    this.setItems(STORAGE_KEYS.WATER, waterIntakes);\n    return waterIntake;\n  }\n\n  // Exercises\n  static getExercises(date?: string, isWeekly?: boolean): Exercise[] {\n    let exercises = this.getItems<Exercise>(STORAGE_KEYS.EXERCISES);\n    \n    if (date !== undefined) {\n      exercises = exercises.filter(ex => ex.date === date);\n    }\n    \n    if (isWeekly !== undefined) {\n      exercises = exercises.filter(ex => ex.isWeekly === isWeekly);\n    }\n    \n    return exercises;\n  }\n\n  static createExercise(insertExercise: InsertExercise): Exercise {\n    const exercises = this.getItems<Exercise>(STORAGE_KEYS.EXERCISES);\n    const exercise: Exercise = { ...insertExercise, id: this.generateId() };\n    exercises.push(exercise);\n    this.setItems(STORAGE_KEYS.EXERCISES, exercises);\n    return exercise;\n  }\n\n  static updateExercise(id: string, updates: Partial<Exercise>): Exercise {\n    const exercises = this.getItems<Exercise>(STORAGE_KEYS.EXERCISES);\n    const index = exercises.findIndex(e => e.id === id);\n    if (index === -1) throw new Error('Exercise not found');\n    \n    const updated = { ...exercises[index], ...updates };\n    exercises[index] = updated;\n    this.setItems(STORAGE_KEYS.EXERCISES, exercises);\n    return updated;\n  }\n\n  static deleteExercise(id: string): void {\n    const exercises = this.getItems<Exercise>(STORAGE_KEYS.EXERCISES);\n    const filtered = exercises.filter(e => e.id !== id);\n    this.setItems(STORAGE_KEYS.EXERCISES, filtered);\n  }\n\n  // Mind Activities\n  static getMindActivities(date?: string): MindActivity[] {\n    const activities = this.getItems<MindActivity>(STORAGE_KEYS.MIND_ACTIVITIES);\n    return date ? activities.filter(a => a.date === date) : activities;\n  }\n\n  static createMindActivity(insertActivity: InsertMindActivity): MindActivity {\n    const activities = this.getItems<MindActivity>(STORAGE_KEYS.MIND_ACTIVITIES);\n    const activity: MindActivity = { ...insertActivity, id: this.generateId() };\n    activities.push(activity);\n    this.setItems(STORAGE_KEYS.MIND_ACTIVITIES, activities);\n    return activity;\n  }\n\n  static updateMindActivity(id: string, updates: Partial<MindActivity>): MindActivity {\n    const activities = this.getItems<MindActivity>(STORAGE_KEYS.MIND_ACTIVITIES);\n    const index = activities.findIndex(a => a.id === id);\n    if (index === -1) throw new Error('Mind activity not found');\n    \n    const updated = { ...activities[index], ...updates };\n    activities[index] = updated;\n    this.setItems(STORAGE_KEYS.MIND_ACTIVITIES, activities);\n    return updated;\n  }\n\n  static deleteMindActivity(id: string): void {\n    const activities = this.getItems<MindActivity>(STORAGE_KEYS.MIND_ACTIVITIES);\n    const filtered = activities.filter(a => a.id !== id);\n    this.setItems(STORAGE_KEYS.MIND_ACTIVITIES, filtered);\n  }\n\n  // Routine Items\n  static getRoutineItems(type?: string): RoutineItem[] {\n    const items = this.getItems<RoutineItem>(STORAGE_KEYS.ROUTINE_ITEMS);\n    return type ? items.filter(i => i.type === type) : items;\n  }\n\n  static createRoutineItem(insertItem: InsertRoutineItem): RoutineItem {\n    const items = this.getItems<RoutineItem>(STORAGE_KEYS.ROUTINE_ITEMS);\n    const item: RoutineItem = { ...insertItem, id: this.generateId() };\n    items.push(item);\n    this.setItems(STORAGE_KEYS.ROUTINE_ITEMS, items);\n    return item;\n  }\n\n  static updateRoutineItem(id: string, updates: Partial<RoutineItem>): RoutineItem {\n    const items = this.getItems<RoutineItem>(STORAGE_KEYS.ROUTINE_ITEMS);\n    const index = items.findIndex(i => i.id === id);\n    if (index === -1) throw new Error('Routine item not found');\n    \n    const updated = { ...items[index], ...updates };\n    items[index] = updated;\n    this.setItems(STORAGE_KEYS.ROUTINE_ITEMS, items);\n    return updated;\n  }\n\n  static deleteRoutineItem(id: string): void {\n    const items = this.getItems<RoutineItem>(STORAGE_KEYS.ROUTINE_ITEMS);\n    const filtered = items.filter(i => i.id !== id);\n    this.setItems(STORAGE_KEYS.ROUTINE_ITEMS, filtered);\n  }\n\n  // Goals\n  static getGoals(type?: string): Goal[] {\n    const goals = this.getItems<Goal>(STORAGE_KEYS.GOALS);\n    return type ? goals.filter(g => g.type === type) : goals;\n  }\n\n  static createGoal(insertGoal: InsertGoal): Goal {\n    const goals = this.getItems<Goal>(STORAGE_KEYS.GOALS);\n    const goal: Goal = { ...insertGoal, id: this.generateId() };\n    goals.push(goal);\n    this.setItems(STORAGE_KEYS.GOALS, goals);\n    return goal;\n  }\n\n  static updateGoal(id: string, updates: Partial<Goal>): Goal {\n    const goals = this.getItems<Goal>(STORAGE_KEYS.GOALS);\n    const index = goals.findIndex(g => g.id === id);\n    if (index === -1) throw new Error('Goal not found');\n    \n    const updated = { ...goals[index], ...updates };\n    goals[index] = updated;\n    this.setItems(STORAGE_KEYS.GOALS, goals);\n    return updated;\n  }\n\n  static deleteGoal(id: string): void {\n    const goals = this.getItems<Goal>(STORAGE_KEYS.GOALS);\n    const filtered = goals.filter(g => g.id !== id);\n    this.setItems(STORAGE_KEYS.GOALS, filtered);\n  }\n\n  // Performance\n  static getPerformance(date?: string): Performance[] {\n    const performances = this.getItems<Performance>(STORAGE_KEYS.PERFORMANCE);\n    return date ? performances.filter(p => p.date === date) : performances;\n  }\n\n  static createOrUpdatePerformance(insertPerformance: InsertPerformance): Performance {\n    const performances = this.getItems<Performance>(STORAGE_KEYS.PERFORMANCE);\n    const existingIndex = performances.findIndex(p => p.date === insertPerformance.date);\n    \n    if (existingIndex !== -1) {\n      const updated = { ...performances[existingIndex], ...insertPerformance };\n      performances[existingIndex] = updated;\n      this.setItems(STORAGE_KEYS.PERFORMANCE, performances);\n      return updated;\n    }\n    \n    const performance: Performance = { ...insertPerformance, id: this.generateId() };\n    performances.push(performance);\n    this.setItems(STORAGE_KEYS.PERFORMANCE, performances);\n    return performance;\n  }\n\n  // Streak\n  static getStreak(): { id: string; current: number; highest: number } {\n    const streak = localStorage.getItem(STORAGE_KEYS.STREAK);\n    return streak ? JSON.parse(streak) : { id: \"default\", current: 0, highest: 0 };\n  }\n\n  static updateStreak(updates: { current: number; highest: number }): { id: string; current: number; highest: number } {\n    const streak = { id: \"default\", ...updates };\n    localStorage.setItem(STORAGE_KEYS.STREAK, JSON.stringify(streak));\n    return streak;\n  }\n\n  // Clear all data (for testing)\n  static clearAll(): void {\n    Object.values(STORAGE_KEYS).forEach(key => {\n      localStorage.removeItem(key);\n    });\n  }\n}","size_bytes":9931},"client/src/lib/pwa-utils.ts":{"content":"// PWA utility functions\n\n// Register service worker\nexport const registerServiceWorker = () => {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker.register('/sw.js')\n        .then((registration) => {\n          console.log('SW registered: ', registration);\n          \n          // Check for updates\n          registration.addEventListener('updatefound', () => {\n            const newWorker = registration.installing;\n            if (newWorker) {\n              newWorker.addEventListener('statechange', () => {\n                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                  // New content is available, prompt user to refresh\n                  if (confirm('New version available! Refresh to update?')) {\n                    newWorker.postMessage({ type: 'SKIP_WAITING' });\n                    window.location.reload();\n                  }\n                }\n              });\n            }\n          });\n        })\n        .catch((registrationError) => {\n          console.log('SW registration failed: ', registrationError);\n        });\n    });\n\n    // Listen for SW messages\n    navigator.serviceWorker.addEventListener('message', (event) => {\n      if (event.data && event.data.type === 'SW_UPDATED') {\n        window.location.reload();\n      }\n    });\n  }\n};\n\n// Check if app is installed as PWA\nexport const isPWA = (): boolean => {\n  return window.matchMedia('(display-mode: standalone)').matches ||\n         (window.navigator as any).standalone === true;\n};\n\n// Show install prompt\nexport const showInstallPrompt = () => {\n  let deferredPrompt: any;\n\n  window.addEventListener('beforeinstallprompt', (e) => {\n    // Prevent Chrome 67 and earlier from automatically showing the prompt\n    e.preventDefault();\n    // Stash the event so it can be triggered later\n    deferredPrompt = e;\n    \n    // Show custom install button\n    const installButton = document.createElement('button');\n    installButton.textContent = 'Install App';\n    installButton.className = 'fixed bottom-4 right-4 bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';\n    installButton.onclick = () => {\n      // Hide the button\n      installButton.style.display = 'none';\n      // Show the prompt\n      deferredPrompt.prompt();\n      // Wait for the user to respond to the prompt\n      deferredPrompt.userChoice.then((choiceResult: any) => {\n        if (choiceResult.outcome === 'accepted') {\n          console.log('User accepted the install prompt');\n        } else {\n          console.log('User dismissed the install prompt');\n        }\n        deferredPrompt = null;\n      });\n    };\n    \n    // Only show if not already installed\n    if (!isPWA()) {\n      document.body.appendChild(installButton);\n      \n      // Auto-hide after 10 seconds\n      setTimeout(() => {\n        if (installButton.parentNode) {\n          installButton.remove();\n        }\n      }, 10000);\n    }\n  });\n\n  // Handle app installation\n  window.addEventListener('appinstalled', () => {\n    console.log('PWA was installed');\n    // Hide any install prompts\n    const installButton = document.querySelector('button');\n    if (installButton && installButton.textContent === 'Install App') {\n      installButton.remove();\n    }\n  });\n};\n\n// Sync offline data when back online\nexport const syncOfflineData = () => {\n  window.addEventListener('online', () => {\n    console.log('Back online, syncing data...');\n    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n      navigator.serviceWorker.controller.postMessage({ type: 'SYNC_OFFLINE_REQUESTS' });\n    }\n    \n    // Show notification that we're back online\n    const notification = document.createElement('div');\n    notification.textContent = '🟢 Back online! Syncing your data...';\n    notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';\n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.remove();\n    }, 3000);\n  });\n\n  window.addEventListener('offline', () => {\n    console.log('Gone offline');\n    \n    // Show offline notification\n    const notification = document.createElement('div');\n    notification.textContent = '🔴 You are offline. Changes will sync when you reconnect.';\n    notification.className = 'fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';\n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.remove();\n    }, 5000);\n  });\n};\n\n// Initialize PWA features\nexport const initializePWA = () => {\n  registerServiceWorker();\n  showInstallPrompt();\n  syncOfflineData();\n  \n  // Add PWA class to body for CSS targeting\n  if (isPWA()) {\n    document.body.classList.add('pwa-installed');\n  }\n};\n\n// Background sync for form data\nexport const requestBackgroundSync = (tag: string) => {\n  if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {\n    navigator.serviceWorker.ready.then((registration) => {\n      return (registration as any).sync.register(tag);\n    }).catch((error) => {\n      console.log('Background sync registration failed:', error);\n    });\n  }\n};\n\n// Check network status\nexport const getNetworkStatus = () => {\n  return {\n    online: navigator.onLine,\n    connection: (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection,\n    effectiveType: ((navigator as any).connection && (navigator as any).connection.effectiveType) || 'unknown'\n  };\n};","size_bytes":5573},"client/src/components/ui/offline-indicator.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { getNetworkStatus } from '@/lib/pwa-utils';\n\nexport function OfflineIndicator() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [showIndicator, setShowIndicator] = useState(false);\n\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      setShowIndicator(true);\n      setTimeout(() => setShowIndicator(false), 3000);\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      setShowIndicator(true);\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Show indicator initially if offline\n    if (!navigator.onLine) {\n      setShowIndicator(true);\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  if (!showIndicator) return null;\n\n  return (\n    <div\n      className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg shadow-lg transition-all duration-300 ${\n        isOnline\n          ? 'bg-green-500 text-white'\n          : 'bg-red-500 text-white'\n      }`}\n    >\n      <div className=\"flex items-center space-x-2 text-sm font-medium\">\n        <div\n          className={`w-2 h-2 rounded-full ${\n            isOnline ? 'bg-green-200' : 'bg-red-200'\n          }`}\n        />\n        <span>\n          {isOnline ? '🟢 Back online! Syncing data...' : '🔴 You are offline. Changes will sync when reconnected.'}\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport function PWAStatusBar() {\n  const [isPWA, setIsPWA] = useState(false);\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n\n  useEffect(() => {\n    // Check if running as PWA\n    const checkPWA = () => {\n      return window.matchMedia('(display-mode: standalone)').matches ||\n             (window.navigator as any).standalone === true;\n    };\n\n    setIsPWA(checkPWA());\n\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  return (\n    <div className=\"fixed bottom-4 left-4 z-40\">\n      <div className=\"bg-gray-900 dark:bg-gray-800 text-white text-xs px-3 py-1 rounded-full shadow-lg opacity-75\">\n        <div className=\"flex items-center space-x-2\">\n          {isPWA && (\n            <span className=\"text-green-400\">📱 PWA</span>\n          )}\n          <span className={isOnline ? 'text-green-400' : 'text-red-400'}>\n            {isOnline ? '🟢 Online' : '🔴 Offline'}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2836},"render.yaml":{"content":"services:\n  - type: web\n    name: metabuild-webapp\n    env: node\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n    region: oregon","size_bytes":219},"server/database-storage.ts":{"content":"import { \n  Task, InsertTask, \n  WaterIntake, InsertWaterIntake,\n  Exercise, InsertExercise,\n  WorkoutType, InsertWorkoutType,\n  MindActivity, InsertMindActivity,\n  RoutineItem, InsertRoutineItem,\n  Goal, InsertGoal,\n  Performance, InsertPerformance,\n  Streak, InsertStreak,\n  tasksTable,\n  waterIntakeTable,\n  exercisesTable,\n  workoutTypesTable,\n  mindActivitiesTable,\n  routineItemsTable,\n  goalsTable,\n  performanceTable,\n  streakTable\n} from \"@shared/schema\";\nimport { eq, and } from 'drizzle-orm';\nimport { getDb } from './db';\nimport { IStorage } from './storage';\n\nexport class DatabaseStorage implements IStorage {\n  private db = getDb();\n\n  // Tasks\n  async getTasks(date?: string): Promise<Task[]> {\n    if (date) {\n      return await this.db.select().from(tasksTable).where(eq(tasksTable.date, date));\n    }\n    return await this.db.select().from(tasksTable);\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    const result = await this.db.select().from(tasksTable).where(eq(tasksTable.id, id));\n    return result[0];\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const result = await this.db.insert(tasksTable).values(task).returning();\n    return result[0];\n  }\n\n  async updateTask(id: string, task: Partial<Task>): Promise<Task> {\n    const result = await this.db.update(tasksTable).set(task).where(eq(tasksTable.id, id)).returning();\n    if (result.length === 0) throw new Error(\"Task not found\");\n    return result[0];\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    await this.db.delete(tasksTable).where(eq(tasksTable.id, id));\n  }\n\n  // Water Intake\n  async getWaterIntake(date: string): Promise<WaterIntake | undefined> {\n    const result = await this.db.select().from(waterIntakeTable).where(eq(waterIntakeTable.date, date));\n    return result[0];\n  }\n\n  async createOrUpdateWaterIntake(waterIntake: InsertWaterIntake): Promise<WaterIntake> {\n    const existing = await this.getWaterIntake(waterIntake.date);\n    \n    if (existing) {\n      const result = await this.db.update(waterIntakeTable)\n        .set(waterIntake)\n        .where(eq(waterIntakeTable.date, waterIntake.date))\n        .returning();\n      return result[0];\n    } else {\n      const result = await this.db.insert(waterIntakeTable).values(waterIntake).returning();\n      return result[0];\n    }\n  }\n\n  // Exercises\n  async getExercises(date?: string, isWeekly?: boolean): Promise<Exercise[]> {\n    let query = this.db.select().from(exercisesTable);\n    \n    const conditions = [];\n    if (date) conditions.push(eq(exercisesTable.date, date));\n    if (isWeekly !== undefined) conditions.push(eq(exercisesTable.isWeekly, isWeekly));\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n    \n    return await query;\n  }\n\n  async getExercise(id: string): Promise<Exercise | undefined> {\n    const result = await this.db.select().from(exercisesTable).where(eq(exercisesTable.id, id));\n    return result[0];\n  }\n\n  async createExercise(exercise: InsertExercise): Promise<Exercise> {\n    const result = await this.db.insert(exercisesTable).values(exercise).returning();\n    return result[0];\n  }\n\n  async updateExercise(id: string, exercise: Partial<Exercise>): Promise<Exercise> {\n    const result = await this.db.update(exercisesTable).set(exercise).where(eq(exercisesTable.id, id)).returning();\n    if (result.length === 0) throw new Error(\"Exercise not found\");\n    return result[0];\n  }\n\n  async deleteExercise(id: string): Promise<void> {\n    await this.db.delete(exercisesTable).where(eq(exercisesTable.id, id));\n  }\n\n  // Workout Types\n  async getWorkoutTypes(): Promise<WorkoutType[]> {\n    return await this.db.select().from(workoutTypesTable);\n  }\n\n  async createWorkoutType(workoutType: InsertWorkoutType): Promise<WorkoutType> {\n    const result = await this.db.insert(workoutTypesTable).values(workoutType).returning();\n    return result[0];\n  }\n\n  async deleteWorkoutType(id: string): Promise<void> {\n    await this.db.delete(workoutTypesTable).where(eq(workoutTypesTable.id, id));\n  }\n\n  // Mind Activities\n  async getMindActivities(date?: string): Promise<MindActivity[]> {\n    if (date) {\n      return await this.db.select().from(mindActivitiesTable).where(eq(mindActivitiesTable.date, date));\n    }\n    return await this.db.select().from(mindActivitiesTable);\n  }\n\n  async getMindActivity(id: string): Promise<MindActivity | undefined> {\n    const result = await this.db.select().from(mindActivitiesTable).where(eq(mindActivitiesTable.id, id));\n    return result[0];\n  }\n\n  async createMindActivity(activity: InsertMindActivity): Promise<MindActivity> {\n    const result = await this.db.insert(mindActivitiesTable).values(activity).returning();\n    return result[0];\n  }\n\n  async updateMindActivity(id: string, activity: Partial<MindActivity>): Promise<MindActivity> {\n    const result = await this.db.update(mindActivitiesTable).set(activity).where(eq(mindActivitiesTable.id, id)).returning();\n    if (result.length === 0) throw new Error(\"Mind activity not found\");\n    return result[0];\n  }\n\n  async deleteMindActivity(id: string): Promise<void> {\n    await this.db.delete(mindActivitiesTable).where(eq(mindActivitiesTable.id, id));\n  }\n\n  // Routine Items\n  async getRoutineItems(type?: string, date?: string): Promise<RoutineItem[]> {\n    let query = this.db.select().from(routineItemsTable);\n    \n    const conditions = [];\n    if (type) conditions.push(eq(routineItemsTable.type, type));\n    if (date) conditions.push(eq(routineItemsTable.date, date));\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n    \n    return await query;\n  }\n\n  async getRoutineItem(id: string): Promise<RoutineItem | undefined> {\n    const result = await this.db.select().from(routineItemsTable).where(eq(routineItemsTable.id, id));\n    return result[0];\n  }\n\n  async createRoutineItem(item: InsertRoutineItem): Promise<RoutineItem> {\n    const result = await this.db.insert(routineItemsTable).values(item).returning();\n    return result[0];\n  }\n\n  async updateRoutineItem(id: string, item: Partial<RoutineItem>): Promise<RoutineItem> {\n    const result = await this.db.update(routineItemsTable).set(item).where(eq(routineItemsTable.id, id)).returning();\n    if (result.length === 0) throw new Error(\"Routine item not found\");\n    return result[0];\n  }\n\n  async deleteRoutineItem(id: string): Promise<void> {\n    await this.db.delete(routineItemsTable).where(eq(routineItemsTable.id, id));\n  }\n\n  // Goals\n  async getGoals(type?: string): Promise<Goal[]> {\n    if (type) {\n      return await this.db.select().from(goalsTable).where(eq(goalsTable.type, type));\n    }\n    return await this.db.select().from(goalsTable);\n  }\n\n  async getGoal(id: string): Promise<Goal | undefined> {\n    const result = await this.db.select().from(goalsTable).where(eq(goalsTable.id, id));\n    return result[0];\n  }\n\n  async createGoal(goal: InsertGoal): Promise<Goal> {\n    const result = await this.db.insert(goalsTable).values(goal).returning();\n    return result[0];\n  }\n\n  async updateGoal(id: string, goal: Partial<Goal>): Promise<Goal> {\n    const result = await this.db.update(goalsTable).set(goal).where(eq(goalsTable.id, id)).returning();\n    if (result.length === 0) throw new Error(\"Goal not found\");\n    return result[0];\n  }\n\n  async deleteGoal(id: string): Promise<void> {\n    await this.db.delete(goalsTable).where(eq(goalsTable.id, id));\n  }\n\n  // Performance\n  async getPerformance(date?: string): Promise<Performance[]> {\n    if (date) {\n      return await this.db.select().from(performanceTable).where(eq(performanceTable.date, date));\n    }\n    return await this.db.select().from(performanceTable);\n  }\n\n  async createOrUpdatePerformance(performance: InsertPerformance): Promise<Performance> {\n    const existing = await this.db.select().from(performanceTable)\n      .where(eq(performanceTable.date, performance.date));\n    \n    if (existing.length > 0) {\n      const result = await this.db.update(performanceTable)\n        .set(performance)\n        .where(eq(performanceTable.id, existing[0].id))\n        .returning();\n      return result[0];\n    } else {\n      const result = await this.db.insert(performanceTable).values(performance).returning();\n      return result[0];\n    }\n  }\n\n  // Streak\n  async getStreak(): Promise<Streak> {\n    const result = await this.db.select().from(streakTable).limit(1);\n    if (result.length === 0) {\n      // Create default streak if none exists\n      const defaultStreak = { id: \"default\", current: 0, highest: 0 };\n      const created = await this.db.insert(streakTable).values(defaultStreak).returning();\n      return created[0];\n    }\n    return result[0];\n  }\n\n  async updateStreak(streak: Partial<Streak>): Promise<Streak> {\n    const existing = await this.getStreak();\n    const result = await this.db.update(streakTable)\n      .set(streak)\n      .where(eq(streakTable.id, existing.id))\n      .returning();\n    return result[0];\n  }\n}","size_bytes":8984},"server/db.ts":{"content":"import { drizzle } from 'drizzle-orm/neon-serverless';\nimport { neon } from '@neondatabase/serverless';\nimport { tasksTable } from '@shared/schema';\n\n// Create database connection\nlet connection: ReturnType<typeof neon> | null = null;\nlet db: ReturnType<typeof drizzle> | null = null;\n\nexport function getDb() {\n  if (!db) {\n    if (!process.env.DATABASE_URL) {\n      throw new Error('DATABASE_URL environment variable is required');\n    }\n    \n    connection = neon(process.env.DATABASE_URL);\n    db = drizzle(connection);\n  }\n  \n  return db;\n}\n\nexport async function initializeDatabase() {\n  try {\n    const database = getDb();\n    // Test the connection\n    await database.select().from(tasksTable).limit(1);\n    console.log('✅ Database connection established');\n    return true;\n  } catch (error) {\n    console.log('❌ Database connection failed:', error);\n    return false;\n  }\n}","size_bytes":887},"RENDER_BUILD_FIX_GUIDE.md":{"content":"# Render Build Fix Guide\n\n## Problem Fixed\nThe Render deployment was failing with error \"vite: not found\" during the build process.\n\n## Root Cause\n- Dockerfile was using `npm ci --only=production` which excludes dev dependencies\n- Build tools like Vite and ESBuild are in devDependencies but needed for building\n- This caused the build step to fail because Vite couldn't be found\n\n## Solution Applied\n\n### 1. Fixed Dockerfile\nUpdated the build process to:\n1. Install ALL dependencies (including dev dependencies)\n2. Build the application\n3. Remove dev dependencies after build to reduce image size\n\n### 2. Updated render.yaml\nChanged the build command to include the build step:\n- Old: `npm install`\n- New: `npm install && npm run build`\n\nChanged the start command to use the built version:\n- Old: `npx tsx server/index.ts` (runs TypeScript directly)\n- New: `npm start` (runs the compiled JavaScript)\n\n## Files Modified\n- `Dockerfile` - Fixed dependency installation and build process\n- `render.yaml` - Updated build and start commands\n\n## Expected Result\n- Render will now successfully build the application\n- All dependencies will be available during build\n- The app will run the optimized production build\n- Build logs should show successful Vite build and ESBuild compilation\n\n## Deployment Steps\n1. Commit and push these changes to your GitHub repository\n2. Render will automatically detect the changes and redeploy\n3. Check the build logs to confirm successful compilation\n4. Test all app features after deployment\n\nThe build error should now be resolved and your app should deploy successfully on Render!","size_bytes":1611},"RENDER_DEPLOYMENT_GUIDE.md":{"content":"# Render Deployment Guide for Meta Build\n\n## The Issue You Experienced\n\nYour app was returning 404 errors for all API endpoints because Render was restarting your server frequently, causing the in-memory data to be lost. The mindset page worked because it doesn't require server data.\n\n## Fixed Issues\n\n✅ **API Routes Working**: Added proper sample data initialization in production\n✅ **Static File Serving**: Configured to preserve API routes in production\n✅ **Render Configuration**: Added render.yaml and Dockerfile for proper deployment\n\n## How to Deploy on Render\n\n### Method 1: Using render.yaml (Recommended)\n\n1. **Push to GitHub**: Make sure your code is in a GitHub repository\n\n2. **Connect to Render**:\n   - Go to [render.com](https://render.com)\n   - Click \"New\" → \"Blueprint\"\n   - Connect your GitHub repo\n   - Render will automatically detect the `render.yaml` file\n\n3. **Environment Variables** (Render will prompt you):\n   - `NODE_ENV=production` (automatically set)\n   - `PORT` (automatically set by Render)\n\n### Method 2: Manual Web Service\n\n1. **Create Web Service**:\n   - Go to Render Dashboard\n   - Click \"New\" → \"Web Service\"\n   - Connect your GitHub repository\n\n2. **Configure Build Settings**:\n   - **Build Command**: `npm install && npm run build`\n   - **Start Command**: `npm start`\n   - **Node Version**: 18\n\n3. **Environment Variables**:\n   - Set `NODE_ENV` to `production`\n\n## Build Commands Explained\n\n- **Build**: `npm run build` - Compiles TypeScript and builds the frontend\n- **Start**: `npm start` - Runs the production server from the built files\n\n## Key Files for Deployment\n\n- `render.yaml` - Render configuration (auto-deployment)\n- `Dockerfile` - Container configuration (optional)\n- `package.json` - Build and start scripts are properly configured\n\n## Post-Deployment\n\nAfter deployment:\n1. Your app will be available at `https://your-app-name.onrender.com`\n2. All API endpoints will work correctly\n3. Sample data will be initialized automatically\n4. All pages (Dashboard, Tasks, Fitness, Mindset, Routine, Goals) will load properly\n\n## Troubleshooting\n\nIf you still see 404 errors:\n1. Check Render logs for any startup errors\n2. Ensure the build completed successfully\n3. Verify the start command is running\n\n## Cost\n\n- Free tier: Your app will sleep after 15 minutes of inactivity\n- Paid tier ($7/month): Always active, faster startup times\n\n## Next Steps\n\n1. Push your code to GitHub (if not already)\n2. Deploy using Method 1 above\n3. Test all pages to ensure they're working\n4. Consider upgrading to paid tier for better performance\n\nYour app is now production-ready! 🚀","size_bytes":2624},"RENDER_FIX_GUIDE.md":{"content":"# IMMEDIATE FIX for Render Deployment\n\n## The Issue\nYour current Render deployment is failing because the build process isn't working correctly. The API routes are returning 404 because the server isn't starting properly.\n\n## Quick Fix Steps\n\n### 1. Update Your Render Configuration\n\nIn your Render dashboard:\n1. Go to your service settings\n2. Update the **Build Command** to: `npm install`\n3. Update the **Start Command** to: `npx tsx server/index.ts`\n4. Set **Environment Variable**: `NODE_ENV=production`\n\n### 2. Alternative: Use the Updated render.yaml\n\nI've updated your `render.yaml` file. If you're using Blueprint deployment:\n1. Push the updated code to GitHub\n2. Render will automatically detect the changes\n3. It will rebuild with the simplified configuration\n\n### 3. Manual Deployment Steps\n\nIf the above doesn't work, try this manual approach:\n\n1. **Create a new Web Service** in Render\n2. **Connect your GitHub repo**\n3. **Use these settings**:\n   - **Build Command**: Leave empty or use `npm install`\n   - **Start Command**: `npx tsx server/index.ts`\n   - **Environment Variables**: \n     - `NODE_ENV=production`\n   - **Root Directory**: Leave empty\n\n### 4. Verify the Fix\n\nAfter deployment, check:\n1. Visit your app URL\n2. All pages should load properly\n3. API calls should return data (not 404)\n4. Check the Render logs for \"Sample data initialized successfully\"\n\n## Why This Works\n\n- Uses `tsx` to run TypeScript directly (no build step needed)\n- Initializes sample data on every startup\n- Uses Vite dev server even in production for simplicity\n- Bypasses complex build issues\n\n## If You Still Get 404 Errors\n\n1. Check Render logs for any startup errors\n2. Ensure your GitHub repo has the latest code\n3. Try deleting and recreating the Render service\n4. Make sure all files are committed to Git\n\nThis approach trades some performance for reliability - your app will work correctly on Render even if it's not perfectly optimized.","size_bytes":1945},"start-production.js":{"content":"#!/usr/bin/env node\n\n// Production startup script for Render\nprocess.env.NODE_ENV = 'production';\n\nconsole.log('🚀 Starting Meta Build in production...');\nconsole.log('📍 Current directory:', process.cwd());\nconsole.log('📂 Files in directory:', require('fs').readdirSync('.'));\n\ntry {\n  // Check if the built file exists\n  const fs = require('fs');\n  const path = require('path');\n  \n  const builtFile = path.join(process.cwd(), 'dist', 'index.js');\n  console.log('🔍 Looking for built file at:', builtFile);\n  \n  if (fs.existsSync(builtFile)) {\n    console.log('✅ Built file found, starting server...');\n    require('./dist/index.js');\n  } else {\n    console.log('❌ Built file not found, trying direct server start...');\n    console.log('📁 Contents of dist directory:');\n    if (fs.existsSync('dist')) {\n      console.log(fs.readdirSync('dist'));\n    } else {\n      console.log('No dist directory found');\n    }\n    \n    // Fall back to running from source\n    console.log('🔄 Falling back to tsx server...');\n    const { spawn } = require('child_process');\n    const server = spawn('npx', ['tsx', 'server/index.ts'], {\n      stdio: 'inherit',\n      env: { ...process.env, NODE_ENV: 'production' }\n    });\n    \n    server.on('error', (err) => {\n      console.error('❌ Server error:', err);\n      process.exit(1);\n    });\n  }\n} catch (error) {\n  console.error('💥 Startup error:', error);\n  process.exit(1);\n}","size_bytes":1431}}}